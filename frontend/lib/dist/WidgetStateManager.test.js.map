{"version":3,"file":"WidgetStateManager.test.js","names":["enableAllPlugins","ArrowTable","ArrowTableProto","Button","ButtonProto","FileUploaderState","FileUploaderStateProto","UploadedFileInfo","UploadedFileInfoProto","createFormsData","WidgetStateDict","WidgetStateManager","MOCK_ARROW_TABLE","data","Uint8Array","index","columns","MOCK_BYTES","MOCK_JSON","foo","baz","MOCK_WIDGET","id","formId","MOCK_FORM_WIDGET","MOCK_FILE_UPLOADER_STATE","maxFileId","uploadedFileInfo","name","size","describe","sendBackMsg","widgetMgr","formsData","onFormsDataChanged","beforeEach","jest","fn","newData","sendRerunBackMsg","formsDataChanged","getWidget","_ref","insideForm","assertCallbacks","_ref2","expect","not","toHaveBeenCalled","toHaveBeenCalledTimes","toHaveBeenCalledWith","anything","undefined","it","each","widget","setStringValue","fromUi","getStringValue","toBe","setBoolValue","getBoolValue","setIntValue","getIntValue","setDoubleValue","getDoubleValue","setTriggerValue","getWidgetState","setStringTriggerValue","setStringArrayValue","getStringArrayValue","toEqual","setIntArrayValue","getIntArrayValue","setDoubleArrayValue","getDoubleArrayValue","setArrowValue","getArrowValue","setJsonValue","getJsonValue","JSON","stringify","setBytesValue","getBytesValue","setFileUploaderStateValue","getFileUploaderStateValue","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","values","toStrictEqual","setterMethod","value","_ref3","_formsData$submitButt","_formsData$submitButt2","_formsData$submitButt3","_formsData$submitButt4","newButtonMock","secondButtonMock","submitButtons","get","toBeDefined","addSubmitButton","length","removeSubmitButton","setFormsWithUploads","Set","formsWithUploads","has","Object","isFrozen","formsWithPendingChanges","submitForm","widgets","triggerValue","stringValue","toThrow","concat","disabled","FORM_1","FORM_2","toHaveBeenLastCalledWith","_widgetMgr$elementSta","setElementState","elementStates","set","Map","getElementState","deleteElementState","widgetId1","widgetId2","widgetId3","widgetId4","elementId1","elementId2","activeIds","removeInactive","toBeUndefined","widgetStateDict","widgetId","createState","getState","deleteState","isEmpty","toBeTruthy","toBeFalsy","msg","createWidgetStatesMsg","newWidgetDict","copyFrom","widgetStateManager","widgetStates","getActiveWidgetStates"],"sources":["../src/WidgetStateManager.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { enableAllPlugins } from \"immer\"\nimport {\n  ArrowTable as ArrowTableProto,\n  Button as ButtonProto,\n  FileUploaderState as FileUploaderStateProto,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"./proto\"\nimport {\n  createFormsData,\n  FormsData,\n  WidgetInfo,\n  WidgetStateDict,\n  WidgetStateManager,\n} from \"./WidgetStateManager\"\n\nconst MOCK_ARROW_TABLE = new ArrowTableProto({\n  data: new Uint8Array(),\n  index: new Uint8Array(),\n  columns: new Uint8Array(),\n})\n\nconst MOCK_BYTES = new Uint8Array([0, 1, 2, 3])\n\nconst MOCK_JSON = { foo: \"bar\", baz: \"qux\" }\n\nconst MOCK_WIDGET = {\n  id: \"mockWidgetId\",\n  formId: \"\",\n}\n\nconst MOCK_FORM_WIDGET = {\n  id: \"mockFormWidgetId\",\n  formId: \"mockFormId\",\n}\n\nconst MOCK_FILE_UPLOADER_STATE = new FileUploaderStateProto({\n  maxFileId: 42,\n  uploadedFileInfo: [\n    new UploadedFileInfoProto({\n      id: 4,\n      name: \"bob\",\n      size: 5,\n    }),\n\n    new UploadedFileInfoProto({\n      id: 42,\n      name: \"linus\",\n      size: 9001,\n    }),\n  ],\n})\n\n// Required by ImmerJS\nenableAllPlugins()\n\ndescribe(\"Widget State Manager\", () => {\n  let sendBackMsg: jest.Mock\n  let widgetMgr: WidgetStateManager\n  let formsData: FormsData\n  let onFormsDataChanged: jest.Mock\n\n  beforeEach(() => {\n    formsData = createFormsData()\n    sendBackMsg = jest.fn()\n    onFormsDataChanged = jest.fn(newData => {\n      formsData = newData\n    })\n    widgetMgr = new WidgetStateManager({\n      sendRerunBackMsg: sendBackMsg,\n      formsDataChanged: onFormsDataChanged,\n    })\n  })\n\n  /** Select the mock WidgetInfo to use for a test. */\n  const getWidget = ({ insideForm }: { insideForm: boolean }): WidgetInfo => {\n    return insideForm ? MOCK_FORM_WIDGET : MOCK_WIDGET\n  }\n\n  /** Assert calls of our callback functions. */\n  const assertCallbacks = ({ insideForm }: { insideForm: boolean }): void => {\n    if (insideForm) {\n      expect(sendBackMsg).not.toHaveBeenCalled()\n    } else {\n      expect(sendBackMsg).toHaveBeenCalledTimes(1)\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        expect.anything(),\n        undefined // fragmentId\n      )\n    }\n  }\n\n  it.each([false, true])(\n    \"sets string value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setStringValue(\n        widget,\n        \"mockStringValue\",\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getStringValue(widget)).toBe(\"mockStringValue\")\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets boolean value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setBoolValue(widget, true, { fromUi: true }, undefined)\n      expect(widgetMgr.getBoolValue(widget)).toBe(true)\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets int value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setIntValue(widget, 100, { fromUi: true }, undefined)\n      expect(widgetMgr.getIntValue(widget)).toBe(100)\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets float value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setDoubleValue(widget, 3.14, { fromUi: true }, undefined)\n      expect(widgetMgr.getDoubleValue(widget)).toBe(3.14)\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  /**\n   * Buttons (which set trigger values) can't be used within forms, so this test\n   * is not parameterized on insideForm.\n   */\n  it(\"sets trigger value correctly\", () => {\n    const widget = getWidget({ insideForm: false })\n    widgetMgr.setTriggerValue(widget, { fromUi: true }, undefined)\n    // @ts-expect-error\n    expect(widgetMgr.getWidgetState(widget)).toBe(undefined)\n    assertCallbacks({ insideForm: false })\n  })\n\n  /**\n   * String Triggers can't be used within forms, so this test\n   * is not parameterized on insideForm.\n   */\n  it(\"sets string trigger value correctly\", () => {\n    const widget = getWidget({ insideForm: false })\n    widgetMgr.setStringTriggerValue(\n      widget,\n      \"sample string\",\n      { fromUi: true },\n      undefined\n    )\n    // @ts-expect-error\n    expect(widgetMgr.getWidgetState(widget)).toBe(undefined)\n    assertCallbacks({ insideForm: false })\n  })\n\n  it.each([false, true])(\n    \"sets string array value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setStringArrayValue(\n        widget,\n        [\"foo\", \"bar\", \"baz\"],\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      expect(widgetMgr.getStringArrayValue(widget)).toEqual([\n        \"foo\",\n        \"bar\",\n        \"baz\",\n      ])\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets int array value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setIntArrayValue(\n        widget,\n        [4, 5, 6],\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getIntArrayValue(widget)).toEqual([4, 5, 6])\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets float array value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setDoubleArrayValue(\n        widget,\n        [1.1, 2.2, 3.3],\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      expect(widgetMgr.getDoubleArrayValue(widget)).toEqual([1.1, 2.2, 3.3])\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets ArrowTable value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setArrowValue(\n        widget,\n        MOCK_ARROW_TABLE,\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getArrowValue(widget)).toEqual(MOCK_ARROW_TABLE)\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets JSON value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setJsonValue(\n        widget,\n        MOCK_JSON,\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      expect(widgetMgr.getJsonValue(widget)).toBe(JSON.stringify(MOCK_JSON))\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets bytes value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setBytesValue(widget, MOCK_BYTES, { fromUi: true }, undefined)\n      expect(widgetMgr.getBytesValue(widget)).toEqual(MOCK_BYTES)\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it.each([false, true])(\n    \"sets FileUploaderState value correctly (insideForm=%p)\",\n    insideForm => {\n      const widget = getWidget({ insideForm })\n      widgetMgr.setFileUploaderStateValue(\n        widget,\n        MOCK_FILE_UPLOADER_STATE,\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      expect(widgetMgr.getFileUploaderStateValue(widget)).toEqual(\n        MOCK_FILE_UPLOADER_STATE\n      )\n      assertCallbacks({ insideForm })\n    }\n  )\n\n  it(\"setIntValue can handle MIN_ and MAX_SAFE_INTEGER\", () => {\n    widgetMgr.setIntValue(\n      MOCK_WIDGET,\n      Number.MAX_SAFE_INTEGER,\n      {\n        fromUi: true,\n      },\n      undefined\n    )\n\n    expect(widgetMgr.getIntValue(MOCK_WIDGET)).toBe(Number.MAX_SAFE_INTEGER)\n\n    widgetMgr.setIntValue(\n      MOCK_WIDGET,\n      Number.MIN_SAFE_INTEGER,\n      {\n        fromUi: true,\n      },\n      undefined\n    )\n\n    expect(widgetMgr.getIntValue(MOCK_WIDGET)).toBe(Number.MIN_SAFE_INTEGER)\n  })\n\n  it(\"setIntArrayValue can handle MIN_ and MAX_SAFE_INTEGER\", () => {\n    const values = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]\n    widgetMgr.setIntArrayValue(\n      MOCK_WIDGET,\n      values,\n      {\n        fromUi: true,\n      },\n      undefined\n    )\n\n    expect(widgetMgr.getIntArrayValue(MOCK_WIDGET)).toStrictEqual(values)\n  })\n\n  describe(\"can set fragmentId in setter methods\", () => {\n    it.each([\n      {\n        setterMethod: \"setStringTriggerValue\",\n        value: \"Hello world\",\n      },\n      {\n        setterMethod: \"setBoolValue\",\n        value: true,\n      },\n      {\n        setterMethod: \"setIntValue\",\n        value: 42,\n      },\n      {\n        setterMethod: \"setDoubleValue\",\n        value: 42.0,\n      },\n      {\n        setterMethod: \"setStringValue\",\n        value: \"Hello world\",\n      },\n      {\n        setterMethod: \"setStringArrayValue\",\n        value: [\"Hello\", \"world\"],\n      },\n      {\n        setterMethod: \"setDoubleArrayValue\",\n        value: [40.0, 2.0],\n      },\n      {\n        setterMethod: \"setIntArrayValue\",\n        value: [40, 2],\n      },\n      {\n        setterMethod: \"setJsonValue\",\n        value: MOCK_JSON,\n      },\n      {\n        setterMethod: \"setArrowValue\",\n        value: MOCK_ARROW_TABLE,\n      },\n      {\n        setterMethod: \"setBytesValue\",\n        value: MOCK_BYTES,\n      },\n      {\n        setterMethod: \"setFileUploaderStateValue\",\n        value: MOCK_FILE_UPLOADER_STATE,\n      },\n    ])(\"%p\", ({ setterMethod, value }) => {\n      // @ts-expect-error\n      widgetMgr[setterMethod](\n        MOCK_WIDGET,\n        value,\n        {\n          fromUi: true,\n        },\n        \"myFragmentId\"\n      )\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        expect.anything(),\n        \"myFragmentId\"\n      )\n    })\n\n    // This test isn't parameterized like the ones above because setTriggerValue\n    // has a slightly different signature from the other setter methods.\n    it(\"can set fragmentId in setTriggerValue\", () => {\n      widgetMgr.setTriggerValue(\n        MOCK_WIDGET,\n        {\n          fromUi: true,\n        },\n        \"myFragmentId\"\n      )\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        expect.anything(),\n        \"myFragmentId\"\n      )\n    })\n  })\n\n  describe(\"Primitive types as JSON values\", () => {\n    it(\"sets string value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(\n        MOCK_WIDGET,\n        \"mockStringValue\",\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(\n        JSON.stringify(\"mockStringValue\")\n      )\n    })\n\n    it(\"sets int value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(MOCK_WIDGET, 45, { fromUi: true }, undefined)\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(JSON.stringify(45))\n    })\n\n    it(\"sets float value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(MOCK_WIDGET, 3.14, { fromUi: true }, undefined)\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(JSON.stringify(3.14))\n    })\n\n    it(\"sets string array value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(\n        MOCK_WIDGET,\n        [\"foo\", \"bar\", \"baz\"],\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(\n        JSON.stringify([\"foo\", \"bar\", \"baz\"])\n      )\n    })\n\n    it(\"sets int array value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(\n        MOCK_WIDGET,\n        [5, 6, 7],\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(\n        JSON.stringify([5, 6, 7])\n      )\n    })\n\n    it(\"sets float array value as JSON correctly\", () => {\n      widgetMgr.setJsonValue(\n        MOCK_WIDGET,\n        [1.1, 2.2, 3.3],\n        { fromUi: true },\n        undefined\n      )\n      expect(widgetMgr.getJsonValue(MOCK_WIDGET)).toBe(\n        JSON.stringify([1.1, 2.2, 3.3])\n      )\n    })\n  })\n\n  // Other FormsData-related tests\n  describe(\"formsData\", () => {\n    it(\"updates submitButtons Array\", () => {\n      const newButtonMock = new ButtonProto()\n      const secondButtonMock = new ButtonProto({ id: \"newId\" })\n      expect(formsData.submitButtons.get(\"form\")).not.toBeDefined()\n      widgetMgr.addSubmitButton(\"form\", newButtonMock)\n      expect(formsData.submitButtons.get(\"form\")?.length).toEqual(1)\n      widgetMgr.addSubmitButton(\"form\", secondButtonMock)\n      expect(formsData.submitButtons.get(\"form\")?.length).toEqual(2)\n      widgetMgr.removeSubmitButton(\"form\", newButtonMock)\n      expect(formsData.submitButtons.get(\"form\")?.length).toEqual(1)\n      widgetMgr.removeSubmitButton(\"form\", secondButtonMock)\n      expect(formsData.submitButtons.get(\"form\")?.length).toEqual(0)\n    })\n\n    it(\"updates formsWithUploads\", () => {\n      widgetMgr.setFormsWithUploads(new Set([\"three\", \"four\"]))\n      expect(onFormsDataChanged).toHaveBeenCalledTimes(1)\n      expect(formsData.formsWithUploads.has(\"one\")).toBe(false)\n      expect(formsData.formsWithUploads.has(\"two\")).toBe(false)\n      expect(formsData.formsWithUploads.has(\"three\")).toBe(true)\n      expect(formsData.formsWithUploads.has(\"four\")).toBe(true)\n    })\n\n    it(\"creates frozen FormsData instances\", () => {\n      // Our sets are readonly, but that doesn't prevent mutating functions\n      // from being called on them. Immer will detect these calls at runtime\n      // and throw errors.\n\n      // It's sufficient to check just a single FormsData member for this test;\n      // Immer imposes this immutability guarantee on all of an object's\n      // sets, maps, and arrays.\n      widgetMgr.setFormsWithUploads(new Set([\"one\", \"two\"]))\n      expect(Object.isFrozen(formsData.formsWithUploads)).toBe(true)\n    })\n  })\n\n  describe(\"submitForm\", () => {\n    it(\"calls sendBackMsg with expected data\", () => {\n      const formId = \"mockFormId\"\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"submitButton\" })\n      )\n\n      // Populate a form\n      widgetMgr.setStringValue(\n        { id: \"widget1\", formId },\n        \"foo\",\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n      widgetMgr.setStringValue(\n        { id: \"widget2\", formId },\n        \"bar\",\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n\n      // We have a single pending form.\n      expect(formsData.formsWithPendingChanges).toEqual(new Set([formId]))\n\n      widgetMgr.submitForm(formId, undefined)\n\n      // Our backMsg should be populated with our two widget values,\n      // plus the submitButton's value.\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        {\n          widgets: [\n            { id: \"submitButton\", triggerValue: true },\n            { id: \"widget1\", stringValue: \"foo\" },\n            { id: \"widget2\", stringValue: \"bar\" },\n          ],\n        },\n        undefined // fragmentId\n      )\n\n      // We have no more pending form.\n      expect(formsData.formsWithPendingChanges).toEqual(new Set())\n    })\n\n    it(\"calls sendBackMsg with fragmentId\", () => {\n      const formId = \"mockFormId\"\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"submitButton\" })\n      )\n\n      // Populate a form\n      widgetMgr.setStringValue(\n        { id: \"widget1\", formId },\n        \"foo\",\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n\n      widgetMgr.submitForm(formId, \"myFragmentId\", undefined)\n\n      // Our backMsg should be populated with our two widget values,\n      // plus the submitButton's value.\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        {\n          widgets: [\n            { id: \"submitButton\", triggerValue: true },\n            { id: \"widget1\", stringValue: \"foo\" },\n          ],\n        },\n        \"myFragmentId\"\n      )\n\n      // We have no more pending form.\n      expect(formsData.formsWithPendingChanges).toEqual(new Set())\n    })\n\n    it(\"throws on invalid formId\", () => {\n      expect(() =>\n        widgetMgr.submitForm(MOCK_WIDGET.formId, undefined)\n      ).toThrow(`invalid formID ${MOCK_WIDGET.formId}`)\n    })\n\n    it(\"submits the form for the first submitButton if an actualSubmitButton proto is passed\", () => {\n      const formId = \"mockFormId\"\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"firstSubmitButton\" })\n      )\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"secondSubmitButton\" })\n      )\n      widgetMgr.submitForm(formId, undefined)\n\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        {\n          widgets: [{ id: \"firstSubmitButton\", triggerValue: true }],\n        },\n        undefined\n      )\n    })\n\n    it(\"does not submit the form if the first submitButton is disabled\", () => {\n      const formId = \"mockFormId\"\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"firstSubmitButton\", disabled: true })\n      )\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"secondSubmitButton\" })\n      )\n      widgetMgr.submitForm(formId, undefined)\n\n      expect(sendBackMsg).not.toHaveBeenCalled()\n    })\n\n    it(\"does not submit the form if the second submitButton is disabled\", () => {\n      const formId = \"mockFormId\"\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"firstSubmitButton\" })\n      )\n      widgetMgr.addSubmitButton(\n        formId,\n        new ButtonProto({ id: \"secondSubmitButton\", disabled: true })\n      )\n      widgetMgr.submitForm(formId, undefined)\n\n      expect(sendBackMsg).not.toHaveBeenCalled()\n    })\n  })\n\n  describe(\"Forms don't interfere with each other\", () => {\n    const FORM_1 = {\n      id: \"NOT_A_REAL_WIDGET_ID_1\",\n      formId: \"NOT_A_REAL_FORM_ID_1\",\n    }\n    const FORM_2 = {\n      id: \"NOT_A_REAL_WIDGET_ID_2\",\n      formId: \"NOT_A_REAL_FORM_ID_2\",\n    }\n\n    beforeEach(() => {\n      // Set widget value for the first form.\n      widgetMgr.setStringValue(\n        FORM_1,\n        \"foo\",\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n\n      // Set widget value for the second form.\n      widgetMgr.setStringValue(\n        FORM_2,\n        \"bar\",\n        {\n          fromUi: true,\n        },\n        undefined\n      )\n    })\n\n    it(\"checks that there are two pending forms\", () => {\n      expect(formsData.formsWithPendingChanges).toEqual(\n        new Set([FORM_1.formId, FORM_2.formId])\n      )\n    })\n\n    it(\"calls sendBackMsg with the first form data\", () => {\n      widgetMgr.addSubmitButton(\n        FORM_1.formId,\n        new ButtonProto({ id: \"submitButton\" })\n      )\n\n      // Submit the first form.\n      widgetMgr.submitForm(FORM_1.formId, undefined)\n\n      // Our backMsg should be populated with the first form widget value,\n      // plus the first submitButton's triggerValue.\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        {\n          widgets: [\n            { id: \"submitButton\", triggerValue: true },\n            { id: FORM_1.id, stringValue: \"foo\" },\n          ],\n        },\n        undefined\n      )\n    })\n\n    it(\"checks that only the second form is pending after the first is submitted\", () => {\n      widgetMgr.submitForm(FORM_1.formId, undefined)\n      expect(formsData.formsWithPendingChanges).toEqual(\n        new Set([FORM_2.formId])\n      )\n    })\n\n    it(\"calls sendBackMsg with data from both forms\", () => {\n      // Submit the first form and then the second form.\n      widgetMgr.submitForm(FORM_1.formId, undefined)\n      widgetMgr.submitForm(\n        FORM_2.formId,\n        undefined,\n        new ButtonProto({ id: \"submitButton2\" })\n      )\n\n      // Our most recent backMsg should be populated with the both forms' widget values,\n      // plus the second submitButton's fromSubmitValue.\n      expect(sendBackMsg).toHaveBeenLastCalledWith(\n        {\n          widgets: [\n            { id: FORM_1.id, stringValue: \"foo\" },\n            { id: \"submitButton2\", triggerValue: true },\n            { id: FORM_2.id, stringValue: \"bar\" },\n          ],\n        },\n        undefined\n      )\n    })\n\n    it(\"checks that no more pending forms exist after both are submitted\", () => {\n      widgetMgr.submitForm(FORM_1.formId, undefined)\n      widgetMgr.submitForm(FORM_2.formId, undefined)\n      expect(formsData.formsWithPendingChanges).toEqual(new Set())\n    })\n\n    it(\"supports two submit buttons and can submitForm on the second one\", () => {\n      widgetMgr.addSubmitButton(\n        FORM_1.formId,\n        new ButtonProto({ id: \"submitButton\" })\n      )\n      widgetMgr.addSubmitButton(\n        FORM_2.formId,\n        new ButtonProto({ id: \"submitButton2\" })\n      )\n\n      // Submit the second form.\n      widgetMgr.submitForm(\n        FORM_2.formId,\n        undefined,\n        new ButtonProto({ id: \"submitButton2\" })\n      )\n\n      expect(sendBackMsg).toHaveBeenCalledWith(\n        {\n          widgets: [\n            { id: \"submitButton2\", triggerValue: true },\n            { id: FORM_2.id, stringValue: \"bar\" },\n          ],\n        },\n        undefined\n      )\n    })\n  })\n\n  describe(\"manages element state values\", () => {\n    it(\"sets extra widget information properly\", () => {\n      widgetMgr.setElementState(\"id\", \"color\", \"red\")\n      // @ts-expect-error\n      expect(widgetMgr.elementStates.get(\"id\")?.get(\"color\")).toEqual(\"red\")\n    })\n\n    it(\"returns extra widget information when id exists and key exists\", () => {\n      // @ts-expect-error\n      widgetMgr.elementStates.set(\"id\", new Map([[\"color\", \"red\"]]))\n      expect(widgetMgr.getElementState(\"id\", \"color\")).toEqual(\"red\")\n    })\n\n    it(\"returns undefined when when id does not exist\", () => {\n      expect(widgetMgr.getElementState(\"id\", \"color\")).toEqual(undefined)\n    })\n\n    it(\"returns undefined when when id exists and key does not exist\", () => {\n      // @ts-expect-error\n      widgetMgr.elementStates.set(\"id\", new Map([[\"text\", \"red\"]]))\n      expect(widgetMgr.getElementState(\"id\", \"color\")).toEqual(undefined)\n    })\n\n    it(\"deletes a value for the key if set\", () => {\n      // @ts-expect-error\n      widgetMgr.elementStates.set(\"id\", new Map([[\"text\", \"red\"]]))\n      widgetMgr.deleteElementState(\"id\", \"color\")\n      expect(widgetMgr.getElementState(\"id\", \"color\")).toEqual(undefined)\n    })\n\n    it(\"does not error when deleting for the key if not set\", () => {\n      widgetMgr.deleteElementState(\"id\", \"color\")\n      expect(widgetMgr.getElementState(\"id\", \"color\")).toEqual(undefined)\n    })\n  })\n\n  it(\"cleans up widget & element states on removeInactive\", () => {\n    const widgetId1 = \"TEST_ID_1\"\n    const widgetId2 = \"TEST_ID_2\"\n    const widgetId3 = \"TEST_ID_3\"\n    const widgetId4 = \"TEST_ID_4\"\n    const elementId1 = \"TEST_ID_5\"\n    const elementId2 = \"TEST_ID_6\"\n    widgetMgr.setStringValue(\n      { id: widgetId1 },\n      \"widgetState1\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n    widgetMgr.setStringValue(\n      { id: widgetId2 },\n      \"widgetState2\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n    widgetMgr.setStringValue(\n      { id: widgetId3 },\n      \"widgetState3\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n    widgetMgr.setStringValue(\n      { id: widgetId4 },\n      \"widgetState4\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n\n    widgetMgr.setElementState(elementId1, \"key1\", \"elementState1\")\n    widgetMgr.setElementState(elementId2, \"key2\", \"elementState2\")\n\n    const activeIds = new Set([widgetId3, widgetId4, elementId2])\n    widgetMgr.removeInactive(activeIds)\n\n    expect(widgetMgr.getStringValue({ id: widgetId1 })).toBeUndefined()\n    expect(widgetMgr.getStringValue({ id: widgetId2 })).toBeUndefined()\n    expect(widgetMgr.getStringValue({ id: widgetId3 })).toEqual(\"widgetState3\")\n    expect(widgetMgr.getStringValue({ id: widgetId4 })).toEqual(\"widgetState4\")\n    expect(widgetMgr.getElementState(elementId1, \"key1\")).toBeUndefined()\n    expect(widgetMgr.getElementState(elementId2, \"key2\")).toEqual(\n      \"elementState2\"\n    )\n  })\n})\n\ndescribe(\"WidgetStateDict\", () => {\n  let widgetStateDict: WidgetStateDict\n  const widgetId = \"TEST_ID\"\n\n  beforeEach(() => {\n    widgetStateDict = new WidgetStateDict()\n  })\n\n  it(\"creates a new state with the given widget id\", () => {\n    widgetStateDict.createState(widgetId)\n\n    expect(widgetStateDict.getState(widgetId)).toEqual({ id: widgetId })\n  })\n\n  it(\"deletes a state with the given widget id\", () => {\n    widgetStateDict.createState(widgetId)\n    widgetStateDict.deleteState(widgetId)\n\n    expect(widgetStateDict.getState(widgetId)).toBeUndefined()\n  })\n\n  it(\"checks that widget state dict is empty after creation\", () => {\n    expect(widgetStateDict.isEmpty).toBeTruthy()\n  })\n\n  it(\"checks that widget state dict is not empty if there is at least one element in it\", () => {\n    widgetStateDict.createState(widgetId)\n\n    expect(widgetStateDict.isEmpty).toBeFalsy()\n  })\n\n  it(\"checks that widget state dict is empty if all elements have been deleted\", () => {\n    widgetStateDict.createState(widgetId)\n    widgetStateDict.deleteState(widgetId)\n\n    expect(widgetStateDict.isEmpty).toBeTruthy()\n  })\n\n  it(\"cleans states of widgets that are not contained in `activeIds`\", () => {\n    const widgetId1 = \"TEST_ID_1\"\n    const widgetId2 = \"TEST_ID_2\"\n    const widgetId3 = \"TEST_ID_3\"\n    const widgetId4 = \"TEST_ID_4\"\n    widgetStateDict.createState(widgetId1)\n    widgetStateDict.createState(widgetId2)\n    widgetStateDict.createState(widgetId3)\n    widgetStateDict.createState(widgetId4)\n\n    const activeIds = new Set([widgetId3, widgetId4])\n    widgetStateDict.removeInactive(activeIds)\n\n    expect(widgetStateDict.getState(widgetId1)).toBeUndefined()\n    expect(widgetStateDict.getState(widgetId2)).toBeUndefined()\n    expect(widgetStateDict.getState(widgetId3)).toEqual({ id: widgetId3 })\n    expect(widgetStateDict.getState(widgetId4)).toEqual({ id: widgetId4 })\n  })\n\n  it(\"creates widget state message\", () => {\n    widgetStateDict.createState(widgetId)\n    const msg = widgetStateDict.createWidgetStatesMsg()\n\n    expect(msg.widgets).toEqual([{ id: widgetId }])\n  })\n\n  it(\"copies the contents of another WidgetStateDict into the given one, overwriting any values with duplicate keys\", () => {\n    const widgetId1 = \"TEST_ID_1\"\n    const widgetId2 = \"TEST_ID_2\"\n    const widgetId3 = \"TEST_ID_3\"\n\n    widgetStateDict.createState(widgetId1)\n    widgetStateDict.createState(widgetId2)\n\n    // NOTE: `widgetId2` is used in both dicts.\n    const newWidgetDict = new WidgetStateDict()\n    newWidgetDict.createState(widgetId2)\n    newWidgetDict.createState(widgetId3)\n\n    widgetStateDict.copyFrom(newWidgetDict)\n\n    expect(widgetStateDict.getState(widgetId1)).toEqual({ id: widgetId1 })\n    expect(widgetStateDict.getState(widgetId2)).toEqual({ id: widgetId2 })\n    expect(widgetStateDict.getState(widgetId3)).toEqual({ id: widgetId3 })\n  })\n\n  it(\"supplies WidgetStates with for active widgets based on input\", () => {\n    const widgetStateManager = new WidgetStateManager({\n      sendRerunBackMsg: jest.fn(),\n      formsDataChanged: jest.fn(),\n    })\n\n    widgetStateManager.setStringValue(\n      { id: \"widget1\" },\n      \"foo\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n    widgetStateManager.setStringValue(\n      { id: \"widget2\" },\n      \"bar\",\n      {\n        fromUi: false,\n      },\n      undefined\n    )\n\n    const activeIds = new Set([\"widget2\"])\n    const widgetStates = widgetStateManager.getActiveWidgetStates(activeIds)\n\n    expect(widgetStates).toEqual({\n      widgets: [\n        {\n          id: \"widget2\",\n          stringValue: \"bar\",\n        },\n      ],\n    })\n  })\n})\n"],"mappings":"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"}