{"version":3,"file":"PerformanceEvents.js","names":["logMessage","getRerunAnalysis","PerformanceEvents","record","event","enabled","timestamp","performance","now","events","push","name","messageType"],"sources":["../../src/profiler/PerformanceEvents.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logMessage } from \"@streamlit/lib/src/util/log\"\nimport { getRerunAnalysis } from \"@streamlit/lib/src/profiler/RerunAnalyzer\"\nimport { ScriptRunState } from \"@streamlit/lib/src/ScriptRunState\"\n\ninterface PerformanceEventBase {\n  timestamp?: number\n}\n\nexport interface RequestedRerunEvent extends PerformanceEventBase {\n  name: \"RequestedRerun\"\n  scriptRunState: ScriptRunState\n}\n\nexport interface BeginHandleMessageEvent extends PerformanceEventBase {\n  name: \"BeginHandleMessage\"\n  messageIndex: number\n}\n\nexport interface DecodedMessageEvent extends PerformanceEventBase {\n  name: \"DecodedMessage\"\n  messageIndex: number\n  messageType?: string\n  len: number\n}\n\nexport interface GotCachedPayloadEvent extends PerformanceEventBase {\n  name: \"GotCachedPayload\"\n  messageIndex: number\n}\n\nexport interface DispatchedMessageEvent extends PerformanceEventBase {\n  name: \"DispatchedMessage\"\n  messageIndex: number\n  messageType?: string\n}\n\nexport type HandleMessageEvent =\n  | BeginHandleMessageEvent\n  | DecodedMessageEvent\n  | GotCachedPayloadEvent\n  | DispatchedMessageEvent\n\nexport type PerformanceEvent = RequestedRerunEvent | HandleMessageEvent\n\n/** Simple utility for capturing time samples. */\nexport class PerformanceEvents {\n  /** Set this to true to capture PerformanceEvents. */\n  public static enabled = false\n\n  private static events: PerformanceEvent[] = []\n\n  public static record(event: PerformanceEvent): void {\n    if (!this.enabled) {\n      return\n    }\n\n    event.timestamp = performance.now()\n    this.events.push(event)\n\n    if (\n      event.name === \"DispatchedMessage\" &&\n      event.messageType === \"scriptFinished\"\n    ) {\n      logMessage(\"Rerun results\", getRerunAnalysis(this.events))\n      this.events = []\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU;AACnB,SAASC,gBAAgB;AA2CzB;AACA,OAAO,MAAMC,iBAAiB,CAAC;EAC7B;;EAKA,OAAcC,MAAMA,CAACC,KAAuB,EAAQ;IAClD,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB;IACF;IAEAD,KAAK,CAACE,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IACnC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC;IAEvB,IACEA,KAAK,CAACO,IAAI,KAAK,mBAAmB,IAClCP,KAAK,CAACQ,WAAW,KAAK,gBAAgB,EACtC;MACAZ,UAAU,CAAC,eAAe,EAAEC,gBAAgB,CAAC,IAAI,CAACQ,MAAM,CAAC,CAAC;MAC1D,IAAI,CAACA,MAAM,GAAG,EAAE;IAClB;EACF;AACF;AAtBaP,iBAAiB,CAEdG,OAAO,GAAG,KAAK;AAFlBH,iBAAiB,CAIbO,MAAM,GAAuB,EAAE"}