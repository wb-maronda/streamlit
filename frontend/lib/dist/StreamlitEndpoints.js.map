{"version":3,"file":"StreamlitEndpoints.js","names":[],"sources":["../src/StreamlitEndpoints.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CancelToken } from \"axios\"\n\nimport { IAppPage } from \"./proto\"\n\nexport type JWTHeader = {\n  jwtHeaderName: string\n  jwtHeaderValue: string\n}\n\n/** Exposes non-websocket endpoints used by the frontend. */\nexport interface StreamlitEndpoints {\n  /**\n   * Return a URL to fetch data for the given custom component.\n   * @param componentName The registered name of the component.\n   * @param path The path of the component resource to fetch, e.g. \"index.html\".\n   */\n  buildComponentURL(componentName: string, path: string): string\n\n  /**\n   * Construct a URL for a media file.\n   * @param url a relative or absolute URL. If `url` is absolute, it will be\n   * returned unchanged. Otherwise, the return value will be a URL for fetching\n   * the media file from the connected Streamlit instance.\n   */\n  buildMediaURL(url: string): string\n\n  /**\n   * Construct a URL for uploading a file.\n   * @param url a relative or absolute URL. If `url` is absolute, it will be\n   * returned unchanged. Otherwise, the return value will be a URL for fetching\n   * the media file from the connected Streamlit instance.\n   */\n  buildFileUploadURL?(url: string): string\n\n  /**\n   * Construct a URL for an app page in a multi-page app.\n   * @param pageLinkBaseURL the optional pageLinkBaseURL set by the host communication layer.\n   * @param page the page's AppPage protobuf properties\n   * @param pageIndex the page's zero-based index\n   */\n  buildAppPageURL(pageLinkBaseURL: string | undefined, page: IAppPage): string\n\n  /**\n   * Upload a file to the FileUploader endpoint.\n   *\n   * @param fileUploadUrl The URL to upload the file to.\n   * @param file The file to upload.\n   * @param sessionId the current sessionID. The file will be associated with this ID.\n   * @param onUploadProgress optional function that will be called repeatedly with progress events during the upload.\n   * @param cancelToken optional axios CancelToken that can be used to cancel the in-progress upload.\n   *\n   * @return a Promise<number> that resolves with the file's unique ID, as assigned by the server.\n   */\n  uploadFileUploaderFile(\n    fileUploadUrl: string,\n    file: File,\n    sessionId: string,\n    onUploadProgress?: (progressEvent: any) => void,\n    cancelToken?: CancelToken\n  ): Promise<void>\n\n  /**\n   * Request that the file at the given URL be deleted.\n   *\n   * @param fileUrl: The URL of the file to delete.\n   * @param sessionId the current sessionID.\n   */\n  deleteFileAtURL?(fileUrl: string, sessionId: string): Promise<void>\n\n  /**\n   * Fetch a cached ForwardMsg from the server.\n   *\n   * This is called when the ForwardMessageCache has a cache miss - that is, when\n   * the server sends a ForwardMsg reference and we don't have the original message\n   * in our local cache.\n   *\n   * @param hash the message's hash\n   *\n   * @return a Promise<Uint8Array> that resolves with the serialized ForwardMsg data returned\n   * from the server. Callers can use `ForwardMsg.decode` to deserialize the data.\n   */\n  fetchCachedForwardMsg(hash: string): Promise<Uint8Array>\n\n  /**\n   * Set JWT Header.\n   * @param jwtHeader the object that contains jwtHeaderName and jwtHeaderValue\n   */\n  setJWTHeader?(jwtHeader: JWTHeader): void\n}\n"],"mappings":""}