{"version":3,"file":"useStateRef.js","names":["useRef","useState","useStateRef","initialState","state","setState","ref","current"],"sources":["../../src/hooks/useStateRef.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  useRef,\n  useState,\n  MutableRefObject,\n  Dispatch,\n  SetStateAction,\n} from \"react\"\n\n/**\n * A custom React Hook that extends useState by providing a mutable ref object\n * to track the current state value.\n *\n * @template T The type of the state value.\n * @param {T} initialState The initial state value.\n * @returns {[T, Dispatch<SetStateAction<T>>, MutableRefObject<T>]} A tuple containing the\n *   current state value, a function to update the state, and a mutable ref object.\n *\n * @example\n * // Usage inside a component:\n * const [count, setCount, countRef] = useStateRef(0);\n *\n * // Accessing the current state value:\n * console.log(count); // Output: 0\n * console.log(countRef.current); // Output: 0\n *\n * // Modifying the state value and updating the ref:\n * setCount(10);\n * console.log(count); // Output: 10\n * console.log(countRef.current); // Output: 10\n *\n * // Comparing previous and current state values:\n * const previousCount = useRef(countRef.current);\n * console.log(previousCount.current); // Output: 10\n * console.log(previousCount.current === countRef.current); // Output: true\n *\n * // Sharing the state value with other components:\n * <ChildComponent countRef={countRef} />\n */\nexport default function useStateRef<T>(\n  initialState: T\n): [T, Dispatch<SetStateAction<T>>, MutableRefObject<T>] {\n  const [state, setState] = useState<T>(initialState)\n  const ref = useRef<T>(initialState)\n  ref.current = state\n\n  return [state, setState, ref]\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEA,MAAM,EACNC,QAAQ,QAIH,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CACjCC,YAAe,EACwC;EACvD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAIE,YAAY,CAAC;EACnD,MAAMG,GAAG,GAAGN,MAAM,CAAIG,YAAY,CAAC;EACnCG,GAAG,CAACC,OAAO,GAAGH,KAAK;EAEnB,OAAO,CAACA,KAAK,EAAEC,QAAQ,EAAEC,GAAG,CAAC;AAC/B"}