{"version":3,"file":"useStWidthHeight.js","names":["useMemo","useStWidthHeight","_ref","container","element","heightFallback","isFullScreen","shouldUseContainerWidth","widthFallback","width","height"],"sources":["../../src/hooks/useStWidthHeight.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CSSProperties, useMemo } from \"react\"\n\ntype StWidthHeightArgs = {\n  container: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  element: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  heightFallback?: CSSProperties[\"height\"]\n  isFullScreen: boolean\n  shouldUseContainerWidth: boolean\n  widthFallback?: CSSProperties[\"width\"]\n}\n\ntype StWidthHeightShape = {\n  height: number | string\n  width: number | string\n}\n\n/**\n * Determines the width and height to use for a given element based on the\n * Streamlit conditions in which it's being rendered.\n *\n * @returns {Object} An object with `width` and `height` properties.\n */\nexport const useStWidthHeight = ({\n  container,\n  element,\n  heightFallback = \"auto\",\n  isFullScreen,\n  shouldUseContainerWidth,\n  widthFallback = \"auto\",\n}: StWidthHeightArgs): StWidthHeightShape => {\n  const width = useMemo(() => {\n    if (shouldUseContainerWidth || isFullScreen) {\n      return \"100%\"\n    }\n    return element.width || container.width || widthFallback\n  }, [\n    container.width,\n    element.width,\n    isFullScreen,\n    shouldUseContainerWidth,\n    widthFallback,\n  ])\n\n  const height = useMemo(() => {\n    if (isFullScreen && container.height) {\n      return container.height\n    }\n\n    return element.height || container.height || heightFallback\n  }, [isFullScreen, element.height, container.height, heightFallback])\n\n  return { width, height }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAwBA,OAAO,QAAQ,OAAO;AAsB9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGC,IAAA,IAOa;EAAA,IAPZ;IAC/BC,SAAS;IACTC,OAAO;IACPC,cAAc,GAAG,MAAM;IACvBC,YAAY;IACZC,uBAAuB;IACvBC,aAAa,GAAG;EACC,CAAC,GAAAN,IAAA;EAClB,MAAMO,KAAK,GAAGT,OAAO,CAAC,MAAM;IAC1B,IAAIO,uBAAuB,IAAID,YAAY,EAAE;MAC3C,OAAO,MAAM;IACf;IACA,OAAOF,OAAO,CAACK,KAAK,IAAIN,SAAS,CAACM,KAAK,IAAID,aAAa;EAC1D,CAAC,EAAE,CACDL,SAAS,CAACM,KAAK,EACfL,OAAO,CAACK,KAAK,EACbH,YAAY,EACZC,uBAAuB,EACvBC,aAAa,CACd,CAAC;EAEF,MAAME,MAAM,GAAGV,OAAO,CAAC,MAAM;IAC3B,IAAIM,YAAY,IAAIH,SAAS,CAACO,MAAM,EAAE;MACpC,OAAOP,SAAS,CAACO,MAAM;IACzB;IAEA,OAAON,OAAO,CAACM,MAAM,IAAIP,SAAS,CAACO,MAAM,IAAIL,cAAc;EAC7D,CAAC,EAAE,CAACC,YAAY,EAAEF,OAAO,CAACM,MAAM,EAAEP,SAAS,CAACO,MAAM,EAAEL,cAAc,CAAC,CAAC;EAEpE,OAAO;IAAEI,KAAK;IAAEC;EAAO,CAAC;AAC1B,CAAC"}