{"version":3,"file":"UriUtil.test.js","names":["buildHttpUri","buildWsUri","getPossibleBaseUris","getWindowBaseUriParts","isValidOrigin","location","global","window","Object","create","defineProperty","value","test","hostname","port","pathname","parts","expect","toStrictEqual","host","basePath","href","uri","toBe","describe","it","toBeFalsy","toBeTruthy","originalPathName","beforeEach","afterEach","testCases","description","expectedBasePaths","forEach","_ref","concat","map","b","toEqual"],"sources":["../../src/util/UriUtil.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  buildHttpUri,\n  buildWsUri,\n  getPossibleBaseUris,\n  getWindowBaseUriParts,\n  isValidOrigin,\n} from \"./UriUtil\"\n\nconst location: Partial<Location> = {}\n\nglobal.window = Object.create(window)\nObject.defineProperty(window, \"location\", { value: location })\n\ntest(\"gets all window URI parts\", () => {\n  location.hostname = \"the_host\"\n  location.port = \"9988\"\n  location.pathname = \"foo\"\n\n  const parts = getWindowBaseUriParts()\n  expect(parts).toStrictEqual({\n    host: \"the_host\",\n    port: 9988,\n    basePath: \"foo\",\n  })\n})\n\ntest(\"gets window URI parts without basePath\", () => {\n  location.hostname = \"the_host\"\n  location.port = \"9988\"\n  location.pathname = \"\"\n\n  const parts = getWindowBaseUriParts()\n  expect(parts).toStrictEqual({\n    host: \"the_host\",\n    port: 9988,\n    basePath: \"\",\n  })\n})\n\ntest(\"gets window URI parts with long basePath\", () => {\n  location.hostname = \"the_host\"\n  location.port = \"9988\"\n  location.pathname = \"/foo/bar\"\n\n  const parts = getWindowBaseUriParts()\n  expect(parts).toStrictEqual({\n    host: \"the_host\",\n    port: 9988,\n    basePath: \"foo/bar\",\n  })\n})\n\ntest(\"gets window URI parts with weird basePath\", () => {\n  location.hostname = \"the_host\"\n  location.port = \"9988\"\n  location.pathname = \"///foo/bar//\"\n\n  const parts = getWindowBaseUriParts()\n  expect(parts).toStrictEqual({\n    host: \"the_host\",\n    port: 9988,\n    basePath: \"foo/bar\",\n  })\n})\n\ntest(\"builds HTTP URI correctly\", () => {\n  location.href = \"http://something\"\n  const uri = buildHttpUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"foo/bar\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"http://the_host:9988/foo/bar/baz\")\n})\n\ntest(\"builds HTTPS URI correctly\", () => {\n  location.href = \"https://something\"\n  const uri = buildHttpUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"foo/bar\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"https://the_host:9988/foo/bar/baz\")\n})\n\ntest(\"builds HTTP URI with no base path\", () => {\n  location.href = \"http://something\"\n  const uri = buildHttpUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"http://the_host:9988/baz\")\n})\n\ntest(\"builds WS URI correctly\", () => {\n  location.href = \"http://something\"\n  const uri = buildWsUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"foo/bar\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"ws://the_host:9988/foo/bar/baz\")\n})\n\ntest(\"builds WSS URI correctly\", () => {\n  location.href = \"https://something\"\n  const uri = buildWsUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"foo/bar\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"wss://the_host:9988/foo/bar/baz\")\n})\n\ntest(\"builds WS URI with no base path\", () => {\n  location.href = \"http://something\"\n  const uri = buildWsUri(\n    {\n      host: \"the_host\",\n      port: 9988,\n      basePath: \"\",\n    },\n    \"baz\"\n  )\n  expect(uri).toBe(\"ws://the_host:9988/baz\")\n})\n\ndescribe(\"isValidOrigin\", () => {\n  it(\"returns false if allowedOrigin is invalid\", () => {\n    // allowedOrigin doesn't have a protocol\n    expect(\n      isValidOrigin(\"devel.streamlit.io\", \"http://devel.streamlit.io\")\n    ).toBeFalsy()\n  })\n\n  it(\"returns false if testOrigin is invalid\", () => {\n    // testOrigin doesn't have a protocol\n    expect(\n      isValidOrigin(\"http://devel.streamlit.io\", \"devel.streamlit.io\")\n    ).toBeFalsy()\n  })\n\n  it(\"returns true if testUrl's hostname is localhost w/ various ports\", () => {\n    expect(\n      isValidOrigin(\n        \"http:localhost\",\n        // Example of localhost url used for manual testing\n        \"http://localhost:8000\"\n      )\n    ).toBeTruthy()\n\n    expect(\n      isValidOrigin(\n        \"http://localhost\",\n        // Example of localhost url used by e2e test\n        \"http://localhost:35475\"\n      )\n    ).toBeTruthy()\n  })\n\n  it(\"returns false if protocols don't match\", () => {\n    expect(\n      isValidOrigin(\"https://devel.streamlit.io\", \"http://devel.streamlit.io\")\n    ).toBeFalsy()\n  })\n\n  it(\"returns false if ports don't match\", () => {\n    expect(\n      isValidOrigin(\n        \"https://devel.streamlit.io:8080\",\n        \"https://devel.streamlit.io\"\n      )\n    ).toBeFalsy()\n  })\n\n  it(\"returns true when the pattern and url are the same\", () => {\n    expect(\n      isValidOrigin(\"http://devel.streamlit.io\", \"http://devel.streamlit.io\")\n    ).toBeTruthy()\n  })\n\n  it(\"returns false if it has different form\", () => {\n    expect(isValidOrigin(\"https://*.com\", \"https://test.test.com\")).toBeFalsy()\n  })\n\n  it(\"returns true if it matches the pattern\", () => {\n    expect(isValidOrigin(\"https://*.com\", \"https://a.com\")).toBeTruthy()\n    expect(isValidOrigin(\"https://*.a.com\", \"https://asd.a.com\")).toBeTruthy()\n    expect(\n      isValidOrigin(\"https://www.*.a.com\", \"https://www.asd.a.com\")\n    ).toBeTruthy()\n    expect(\n      isValidOrigin(\"https://abc.*.*.a.com\", \"https://abc.def.xyz.a.com\")\n    ).toBeTruthy()\n  })\n\n  it(\"returns false if it doesn't match the pattern\", () => {\n    expect(isValidOrigin(\"https://*.b.com\", \"https://www.c.com\")).toBeFalsy()\n  })\n})\n\ndescribe(\"getPossibleBaseUris\", () => {\n  let originalPathName = \"\"\n\n  beforeEach(() => {\n    originalPathName = window.location.pathname\n  })\n\n  afterEach(() => {\n    window.location.pathname = originalPathName\n  })\n\n  const testCases = [\n    {\n      description: \"empty pathnames\",\n      pathname: \"\",\n      expectedBasePaths: [\"\"],\n    },\n    {\n      description: \"pathnames with a single part\",\n      pathname: \"foo\",\n      expectedBasePaths: [\"foo\", \"\"],\n    },\n    {\n      description: \"pathnames with two parts\",\n      pathname: \"foo/bar\",\n      expectedBasePaths: [\"foo/bar\", \"foo\"],\n    },\n    {\n      description: \"pathnames with more than two parts\",\n      pathname: \"foo/bar/baz/qux\",\n      expectedBasePaths: [\"foo/bar/baz/qux\", \"foo/bar/baz\"],\n    },\n  ]\n\n  testCases.forEach(({ description, pathname, expectedBasePaths }) => {\n    it(`handles ${description}`, () => {\n      window.location.pathname = pathname\n\n      expect(getPossibleBaseUris().map(b => b.basePath)).toEqual(\n        expectedBasePaths\n      )\n    })\n  })\n})\n"],"mappings":"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"}