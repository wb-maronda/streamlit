{"version":3,"file":"FileHelper.test.js","names":["BYTE_CONVERSION_SIZE","FileSize","getSizeDisplay","sizeConverter","describe","test","expect","Byte","toEqual","Gigabyte","Megabyte","toThrow","Kilobyte"],"sources":["../../src/util/FileHelper.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BYTE_CONVERSION_SIZE,\n  FileSize,\n  getSizeDisplay,\n  sizeConverter,\n} from \"./FileHelper\"\n\ndescribe(\"getSizeDisplay\", () => {\n  test(\"it shows unit\", async () => {\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte)).toEqual(\n      \"1.0KB\"\n    )\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE ** 2, FileSize.Byte)).toEqual(\n      \"1.0MB\"\n    )\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE ** 3, FileSize.Byte)).toEqual(\n      \"1.0GB\"\n    )\n\n    expect(getSizeDisplay(10, FileSize.Gigabyte)).toEqual(\"10.0GB\")\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Megabyte)).toEqual(\n      \"1.0GB\"\n    )\n  })\n\n  test(\"it has unusual values\", async () => {\n    expect(() => getSizeDisplay(-100, FileSize.Byte)).toThrow(\n      \"Size must be greater than or equal to 0\"\n    )\n    expect(getSizeDisplay(0, FileSize.Byte, -1)).toEqual(\"0B\")\n  })\n\n  test(\"it truncates to the right amount of decimals\", async () => {\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte)).toEqual(\n      \"1.0KB\"\n    )\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte, 0)).toEqual(\n      \"1KB\"\n    )\n    expect(getSizeDisplay(BYTE_CONVERSION_SIZE, FileSize.Byte, 3)).toEqual(\n      \"1.000KB\"\n    )\n  })\n\n  test(\"it rounds up to the next unit\", async () => {\n    expect(getSizeDisplay(500, FileSize.Byte)).toEqual(\"500.0B\")\n    expect(getSizeDisplay(800, FileSize.Byte)).toEqual(\"0.8KB\")\n    expect(getSizeDisplay(501, FileSize.Gigabyte)).toEqual(\"501.0GB\")\n  })\n})\n\ndescribe(\"sizeConverter\", () => {\n  test(\"it converts up to the bigger unit\", async () => {\n    expect(sizeConverter(0.5, FileSize.Kilobyte, FileSize.Megabyte)).toEqual(\n      0.5 / BYTE_CONVERSION_SIZE\n    )\n    expect(\n      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Byte, FileSize.Kilobyte)\n    ).toEqual(1)\n    expect(\n      sizeConverter(\n        BYTE_CONVERSION_SIZE ** 2,\n        FileSize.Kilobyte,\n        FileSize.Gigabyte\n      )\n    ).toEqual(1)\n    expect(sizeConverter(1, FileSize.Megabyte, FileSize.Gigabyte)).toEqual(\n      1 / BYTE_CONVERSION_SIZE\n    )\n  })\n\n  test(\"it converts down to the smaller unit\", async () => {\n    expect(sizeConverter(0.5, FileSize.Gigabyte, FileSize.Megabyte)).toEqual(\n      BYTE_CONVERSION_SIZE * 0.5\n    )\n    expect(\n      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Gigabyte, FileSize.Kilobyte)\n    ).toEqual(BYTE_CONVERSION_SIZE ** 3)\n    expect(\n      sizeConverter(\n        BYTE_CONVERSION_SIZE ** 2,\n        FileSize.Megabyte,\n        FileSize.Kilobyte\n      )\n    ).toEqual(BYTE_CONVERSION_SIZE ** 3)\n    expect(sizeConverter(1, FileSize.Kilobyte, FileSize.Byte)).toEqual(\n      BYTE_CONVERSION_SIZE\n    )\n  })\n\n  test(\"it handles unusual cases\", async () => {\n    expect(\n      sizeConverter(BYTE_CONVERSION_SIZE, FileSize.Byte, FileSize.Byte)\n    ).toEqual(BYTE_CONVERSION_SIZE)\n    expect(() =>\n      sizeConverter(-1, FileSize.Gigabyte, FileSize.Gigabyte)\n    ).toThrow(\"Size must be 0 or greater\")\n  })\n})\n"],"mappings":"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"}