{"version":3,"file":"getBrowserInfo.test.js","names":["getBrowserInfo","describe","userAgentSpy","mockUserAgent","userAgentString","jest","spyOn","window","navigator","mockReturnValue","afterEach","mockRestore","it","result","expect","toEqual","browserName","browserVersion","deviceType","os"],"sources":["../../src/util/getBrowserInfo.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport getBrowserInfo from \"./getBrowserInfo\"\n\ndescribe(\"getBrowserInfo\", () => {\n  let userAgentSpy: jest.SpyInstance\n\n  const mockUserAgent = (userAgentString: string): void => {\n    userAgentSpy = jest\n      .spyOn(window.navigator, \"userAgent\", \"get\")\n      .mockReturnValue(userAgentString)\n  }\n\n  afterEach(() => {\n    userAgentSpy.mockRestore()\n  })\n\n  it(\"should detect Opera browser on Windows\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 OPR/77.0.4054.254\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"Opera\",\n      browserVersion: \"77.0.4054.254\",\n      deviceType: \"desktop\",\n      os: \"Windows\",\n    })\n  })\n\n  it(\"should detect Brave browser on macOS\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 Brave/92.0.4515.107\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"Brave\",\n      browserVersion: \"92.0.4515.107\",\n      deviceType: \"desktop\",\n      os: \"Mac OS\",\n    })\n  })\n\n  it(\"should detect QQ Browser on Android\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Linux; U; Android 10; en-US; V2023A Build/QP1A.190711.020) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 MQQBrowser/13.4 Mobile\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"QQBrowser\",\n      browserVersion: \"13.4\",\n      deviceType: \"mobile\",\n      os: \"Android\",\n    })\n  })\n\n  it(\"should detect Internet Explorer on Windows\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"IE\",\n      browserVersion: \"11.0\",\n      deviceType: \"desktop\",\n      os: \"Windows\",\n    })\n  })\n\n  it(\"should detect Maxthon browser on Windows\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0 Maxthon/6.1.0.2000\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"Maxthon\",\n      browserVersion: \"6.1.0.2000\",\n      deviceType: \"desktop\",\n      os: \"Windows\",\n    })\n  })\n\n  it(\"should detect Chrome on Chrome OS\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (X11; CrOS x86_64 13421.99.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"Chrome\",\n      browserVersion: \"91.0.4472.114\",\n      deviceType: \"desktop\",\n      os: \"Chromium OS\",\n    })\n  })\n\n  it(\"should detect UC Browser on Android\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Linux; Android 9; M2004J19C) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 UCBrowser/13.0.0.1288 Mobile Safari/537.36\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"UCBrowser\",\n      browserVersion: \"13.0.0.1288\",\n      deviceType: \"mobile\",\n      os: \"Android\",\n    })\n  })\n\n  it(\"should detect Samsung Internet on Android\", () => {\n    mockUserAgent(\n      \"Mozilla/5.0 (Linux; Android 10; SAMSUNG SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/13.2 Chrome/79.0.3945.136 Mobile Safari/537.36\"\n    )\n\n    const result = getBrowserInfo()\n    expect(result).toEqual({\n      browserName: \"Samsung Internet\",\n      browserVersion: \"13.2\",\n      deviceType: \"mobile\",\n      os: \"Android\",\n    })\n  })\n})\n"],"mappings":"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"}