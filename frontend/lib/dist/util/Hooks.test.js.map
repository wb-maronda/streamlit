{"version":3,"file":"Hooks.test.js","names":["useIsOverflowing","stateSetters","jest","mock","__esModule","requireActual","useCallback","fn","mockImplementation","cb","useEffect","useState","setValue","push","describe","it","ref","current","scrollHeight","clientHeight","setIsOverflowing","pop","expect","toHaveBeenCalledWith"],"sources":["../../src/util/Hooks.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useIsOverflowing } from \"./Hooks\"\n\nconst stateSetters: Array<any> = []\n\njest.mock(\"react\", () => ({\n  __esModule: true,\n  ...jest.requireActual(\"react\"),\n  useCallback: jest.fn().mockImplementation(cb => cb),\n  useEffect: jest.fn().mockImplementation(cb => cb()),\n  useState: jest.fn().mockImplementation(() => {\n    const setValue = jest.fn()\n    stateSetters.push(setValue)\n\n    return [false, setValue]\n  }),\n}))\n\n// NOTE: We can't test the return value of useIsOverflowing directly because\n// it won't have changed in a single run of the function. This is why we just\n// check that the state setter was called.\ndescribe(\"useIsOverflowing\", () => {\n  it(\"sets state to true if the element is overflowing\", () => {\n    const ref = { current: { scrollHeight: 1, clientHeight: 0 } }\n    // @ts-expect-error\n    useIsOverflowing(ref)\n\n    const setIsOverflowing = stateSetters.pop()\n    expect(setIsOverflowing).toHaveBeenCalledWith(true)\n  })\n\n  it(\"sets state to false if the element is not overflowing\", () => {\n    const ref = { current: { scrollHeight: 1, clientHeight: 1 } }\n    // @ts-expect-error\n    useIsOverflowing(ref)\n\n    const setIsOverflowing = stateSetters.pop()\n    expect(setIsOverflowing).toHaveBeenCalledWith(false)\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB;AAEzB,MAAMC,YAAwB,GAAG,EAAE;AAEnCC,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,OAAO;EACxBC,UAAU,EAAE,IAAI;EAChB,GAAGF,IAAI,CAACG,aAAa,CAAC,OAAO,CAAC;EAC9BC,WAAW,EAAEJ,IAAI,CAACK,EAAE,CAAC,CAAC,CAACC,kBAAkB,CAACC,EAAE,IAAIA,EAAE,CAAC;EACnDC,SAAS,EAAER,IAAI,CAACK,EAAE,CAAC,CAAC,CAACC,kBAAkB,CAACC,EAAE,IAAIA,EAAE,CAAC,CAAC,CAAC;EACnDE,QAAQ,EAAET,IAAI,CAACK,EAAE,CAAC,CAAC,CAACC,kBAAkB,CAAC,MAAM;IAC3C,MAAMI,QAAQ,GAAGV,IAAI,CAACK,EAAE,CAAC,CAAC;IAC1BN,YAAY,CAACY,IAAI,CAACD,QAAQ,CAAC;IAE3B,OAAO,CAAC,KAAK,EAAEA,QAAQ,CAAC;EAC1B,CAAC;AACH,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACAE,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EACjCC,EAAE,CAAC,kDAAkD,EAAE,MAAM;IAC3D,MAAMC,GAAG,GAAG;MAAEC,OAAO,EAAE;QAAEC,YAAY,EAAE,CAAC;QAAEC,YAAY,EAAE;MAAE;IAAE,CAAC;IAC7D;IACAnB,gBAAgB,CAACgB,GAAG,CAAC;IAErB,MAAMI,gBAAgB,GAAGnB,YAAY,CAACoB,GAAG,CAAC,CAAC;IAC3CC,MAAM,CAACF,gBAAgB,CAAC,CAACG,oBAAoB,CAAC,IAAI,CAAC;EACrD,CAAC,CAAC;EAEFR,EAAE,CAAC,uDAAuD,EAAE,MAAM;IAChE,MAAMC,GAAG,GAAG;MAAEC,OAAO,EAAE;QAAEC,YAAY,EAAE,CAAC;QAAEC,YAAY,EAAE;MAAE;IAAE,CAAC;IAC7D;IACAnB,gBAAgB,CAACgB,GAAG,CAAC;IAErB,MAAMI,gBAAgB,GAAGnB,YAAY,CAACoB,GAAG,CAAC,CAAC;IAC3CC,MAAM,CAACF,gBAAgB,CAAC,CAACG,oBAAoB,CAAC,KAAK,CAAC;EACtD,CAAC,CAAC;AACJ,CAAC,CAAC"}