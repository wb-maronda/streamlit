{"version":3,"file":"WidgetStateManager.js","names":["produce","util","Signal","isValidFormId","notNullOrUndefined","DoubleArray","SInt64Array","StringArray","StringTriggerValue","WidgetState","WidgetStates","createFormsData","formsWithPendingChanges","Set","formsWithUploads","submitButtons","Map","WidgetStateDict","constructor","widgetStates","createState","widgetId","state","id","set","getState","get","deleteState","delete","removeInactive","activeIds","forEach","value","key","has","clear","isEmpty","size","createWidgetStatesMsg","msg","widgets","push","copyFrom","other","callbackfn","FormState","clearOnSubmit","enterToSubmit","formCleared","hasPendingChanges","WidgetStateManager","props","forms","formsData","elementStates","addFormClearedListener","formId","listener","getOrCreateFormState","connect","setFormSubmitBehaviors","arguments","length","undefined","form","submitForm","fragmentId","actualSubmitButton","Error","selectedSubmitButton","createWidgetState","fromUi","triggerValue","sendUpdateWidgetsMessage","syncFormsWithPendingChanges","deleteWidgetState","emit","setStringTriggerValue","widget","source","stringTriggerValue","data","onWidgetValueChanged","setTriggerValue","getBoolValue","getWidgetState","boolValue","setBoolValue","getIntValue","requireNumberInt","intValue","setIntValue","getDoubleValue","doubleValue","setDoubleValue","getStringValue","stringValue","setStringValue","setStringArrayValue","stringArrayValue","getStringArrayValue","getDoubleArrayValue","doubleArrayValue","setDoubleArrayValue","getIntArrayValue","intArrayValue","map","setIntArrayValue","getJsonValue","jsonValue","setJsonValue","JSON","stringify","setArrowValue","arrowValue","getArrowValue","setBytesValue","bytesValue","getBytesValue","setFileUploaderStateValue","fileUploaderStateValue","getFileUploaderStateValue","pendingFormIds","add","updateFormsData","draft","isAutoRerun","sendRerunBackMsg","getActiveWidgetStates","widgetState","_","elementId","deleteElementState","addToForm","widgetStateDict","formState","setFormsWithUploads","allowFormEnterToSubmit","firstSubmitButton","disabled","addSubmitButton","submitButtonProto","setSubmitButtons","copySubmitButtons","Object","assign","removeSubmitButton","index","indexOf","splice","recipe","newData","formsDataChanged","getElementState","setElementState","longNumber","LongBits","from","toNumber","Number","isSafeInteger"],"sources":["../src/WidgetStateManager.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport produce, { Draft } from \"immer\"\nimport { Long, util } from \"protobufjs\"\nimport { Signal, SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  DoubleArray,\n  IArrowTable,\n  IFileUploaderState,\n  SInt64Array,\n  StringArray,\n  StringTriggerValue,\n  Button as SubmitButtonProto,\n  WidgetState,\n  WidgetStates,\n} from \"./proto\"\n\nexport interface Source {\n  fromUi: boolean\n}\n\n/** Common widget protobuf fields that are used by the WidgetStateManager. */\nexport interface WidgetInfo {\n  id: string\n  formId?: string\n}\n\n/**\n * Immutable structure that exposes public data about all the forms in the app.\n * WidgetStateManager produces new instances of this type when forms data\n * changes.\n */\nexport interface FormsData {\n  /** Forms that have unsubmitted changes. */\n  readonly formsWithPendingChanges: Set<string>\n\n  /** Forms that have in-progress file uploads. */\n  readonly formsWithUploads: Set<string>\n\n  /**\n   * Mapping of formID:numberOfSubmitButtons. (Most forms will have only one,\n   * but it's not an error to have multiple.)\n   */\n  readonly submitButtons: Map<string, Array<SubmitButtonProto>>\n}\n\n/** Create an empty FormsData instance. */\nexport function createFormsData(): FormsData {\n  return {\n    formsWithPendingChanges: new Set(),\n    formsWithUploads: new Set(),\n    submitButtons: new Map(),\n  }\n}\n\n/**\n * A Dictionary that maps widgetID -> WidgetState, and provides some utility\n * functions.\n */\nexport class WidgetStateDict {\n  private readonly widgetStates = new Map<string, WidgetState>()\n\n  /**\n   * Create a new WidgetState proto for the widget with the given ID,\n   * overwriting any that currently exists.\n   */\n  public createState(widgetId: string): WidgetState {\n    const state = new WidgetState({ id: widgetId })\n    this.widgetStates.set(widgetId, state)\n    return state\n  }\n\n  /** Return the WidgetState for the given widgetID if it exists. */\n  public getState(widgetId: string): WidgetState | undefined {\n    return this.widgetStates.get(widgetId)\n  }\n\n  /** Remove the WidgetState proto with the given id, if it exists. */\n  public deleteState(widgetId: string): void {\n    this.widgetStates.delete(widgetId)\n  }\n\n  /** Remove the state of widgets that are not contained in `activeIds`. */\n  public removeInactive(activeIds: Set<string>): void {\n    this.widgetStates.forEach((value, key) => {\n      if (!activeIds.has(key)) {\n        this.widgetStates.delete(key)\n      }\n    })\n  }\n\n  /** Remove all widget states. */\n  public clear(): void {\n    this.widgetStates.clear()\n  }\n\n  public get isEmpty(): boolean {\n    return this.widgetStates.size === 0\n  }\n\n  public createWidgetStatesMsg(): WidgetStates {\n    const msg = new WidgetStates()\n    this.widgetStates.forEach(value => msg.widgets.push(value))\n    return msg\n  }\n\n  /**\n   * Copy the contents of another WidgetStateDict into this one, overwriting\n   * any values with duplicate keys.\n   */\n  public copyFrom(other: WidgetStateDict): void {\n    other.widgetStates.forEach((state, widgetId) => {\n      this.widgetStates.set(widgetId, state)\n    })\n  }\n\n  /** Call a function for each value in the dict. */\n  public forEach(callbackfn: (value: WidgetState) => void): void {\n    this.widgetStates.forEach(callbackfn)\n  }\n}\n\n/** Stores private data about a single form. */\nclass FormState {\n  public readonly widgetStates = new WidgetStateDict()\n\n  /** True if the form was created with the clear_on_submit flag. */\n  public clearOnSubmit = false\n\n  /** True if the form was created with the enter_to_submit flag. */\n  public enterToSubmit = true\n\n  /** Signal emitted when the form is cleared. */\n  public readonly formCleared = new Signal()\n\n  /** True if the form has a non-empty WidgetStateDict. */\n  public get hasPendingChanges(): boolean {\n    return !this.widgetStates.isEmpty\n  }\n}\n\ninterface Props {\n  /** Callback to deliver a message to the server */\n  sendRerunBackMsg: (\n    widgetStates: WidgetStates,\n    fragmentId: string | undefined,\n    pageScriptHash: string | undefined,\n    isAutoRerun: boolean | undefined\n  ) => void\n\n  /**\n   * Callback invoked whenever our FormsData changed. (Because FormsData\n   * is immutable, any changes to it result in a new instance being created.)\n   */\n  formsDataChanged: (formsData: FormsData) => void\n}\n\n/**\n * Manages widget values, and sends widget update messages back to the server.\n */\nexport class WidgetStateManager {\n  private readonly props: Props\n\n  // Top-level widget state dictionary.\n  private readonly widgetStates = new WidgetStateDict()\n\n  // Internal state for each form we're managing.\n  private readonly forms = new Map<string, FormState>()\n\n  // External data about all forms.\n  private formsData: FormsData\n\n  // A dictionary that maps elementId -> element state keys -> element state values.\n  // This is used to store frontend-only state for elements.\n  // This state is not never sent to the server.\n  private readonly elementStates = new Map<string, Map<string, any>>()\n\n  constructor(props: Props) {\n    this.props = props\n    this.formsData = createFormsData()\n  }\n\n  /**\n   * Register a function that will be called when the given form is cleared.\n   * Returns an object that can be used to de-register the listener.\n   */\n  public addFormClearedListener(\n    formId: string,\n    listener: () => void\n  ): SignalConnection {\n    return this.getOrCreateFormState(formId).formCleared.connect(listener)\n  }\n\n  /**\n   * Register a Form, and assign its clearOnSubmit & enterToSubmit values.\n   * The `Form` element calls this when it's first mounted.\n   */\n  public setFormSubmitBehaviors(\n    formId: string,\n    clearOnSubmit: boolean,\n    enterToSubmit = true\n  ): void {\n    const form = this.getOrCreateFormState(formId)\n    form.clearOnSubmit = clearOnSubmit\n    form.enterToSubmit = enterToSubmit\n  }\n\n  /**\n   * Commit pending changes for widgets that belong to the given form,\n   * and send a rerunBackMsg to the server.\n   */\n  public submitForm(\n    formId: string,\n    fragmentId: string | undefined,\n    actualSubmitButton?: WidgetInfo\n  ): void {\n    if (!isValidFormId(formId)) {\n      // This should never get thrown - only FormSubmitButton calls this\n      // function.\n      throw new Error(`invalid formID '${formId}'`)\n    }\n\n    const form = this.getOrCreateFormState(formId)\n\n    const submitButtons = this.formsData.submitButtons.get(formId)\n\n    let selectedSubmitButton\n\n    if (actualSubmitButton !== undefined) {\n      selectedSubmitButton = actualSubmitButton\n    }\n    // can have an empty list of submitButtons\n    else if (submitButtons !== undefined && submitButtons.length > 0) {\n      // click the first submit button. We can choose any so we just choose first.\n      selectedSubmitButton = submitButtons[0]\n    }\n\n    if (selectedSubmitButton) {\n      this.createWidgetState(selectedSubmitButton, {\n        fromUi: true,\n      }).triggerValue = true\n    }\n\n    // Copy the form's values into widgetStates, delete the form's pending\n    // changes, and send our widgetStates back to the server.\n    this.widgetStates.copyFrom(form.widgetStates)\n    form.widgetStates.clear()\n\n    this.sendUpdateWidgetsMessage(fragmentId)\n    this.syncFormsWithPendingChanges()\n\n    if (selectedSubmitButton) {\n      this.deleteWidgetState(selectedSubmitButton.id)\n    }\n\n    // If the form has the clearOnSubmit flag, we emit a signal to all widgets\n    // in the form. Each widget that handles this signal will reset to their\n    // default values, and submit those new default values to the WidgetStateManager\n    // in their signal handlers. (Because all of these widgets are in a form,\n    // none of these value submissions will trigger re-run requests.)\n    if (form.clearOnSubmit) {\n      form.formCleared.emit()\n    }\n  }\n\n  /**\n   * Sets the string trigger value for the given widget ID to a string value,\n   * sends a rerunScript message to the server, and then immediately unsets the\n   * string trigger value to None/null.\n   */\n  public setStringTriggerValue(\n    widget: WidgetInfo,\n    value: string,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringTriggerValue =\n      new StringTriggerValue({ data: value })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n    this.deleteWidgetState(widget.id)\n  }\n\n  /**\n   * Sets the trigger value for the given widget ID to true, sends a rerunScript message\n   * to the server, and then immediately unsets the trigger value.\n   */\n  public setTriggerValue(\n    widget: WidgetInfo,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).triggerValue = true\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n    this.deleteWidgetState(widget.id)\n  }\n\n  public getBoolValue(widget: WidgetInfo): boolean | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"boolValue\") {\n      return state.boolValue as boolean\n    }\n\n    return undefined\n  }\n\n  public setBoolValue(\n    widget: WidgetInfo,\n    value: boolean,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).boolValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getIntValue(widget: WidgetInfo): number | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"intValue\") {\n      return requireNumberInt(state.intValue as number)\n    }\n\n    return undefined\n  }\n\n  public setIntValue(\n    widget: WidgetInfo,\n    value: number | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).intValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getDoubleValue(widget: WidgetInfo): number | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"doubleValue\") {\n      return state.doubleValue as number\n    }\n\n    return undefined\n  }\n\n  public setDoubleValue(\n    widget: WidgetInfo,\n    value: number | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).doubleValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getStringValue(widget: WidgetInfo): string | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"stringValue\") {\n      return state.stringValue as string\n    }\n\n    return undefined\n  }\n\n  public setStringValue(\n    widget: WidgetInfo,\n    value: string | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public setStringArrayValue(\n    widget: WidgetInfo,\n    value: string[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringArrayValue = new StringArray({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getStringArrayValue(widget: WidgetInfo): string[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      notNullOrUndefined(state) &&\n      state.value === \"stringArrayValue\" &&\n      notNullOrUndefined(state.stringArrayValue) &&\n      notNullOrUndefined(state.stringArrayValue.data)\n    ) {\n      return state.stringArrayValue.data\n    }\n\n    return undefined\n  }\n\n  public getDoubleArrayValue(widget: WidgetInfo): number[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      notNullOrUndefined(state) &&\n      state.value === \"doubleArrayValue\" &&\n      notNullOrUndefined(state.doubleArrayValue) &&\n      notNullOrUndefined(state.doubleArrayValue.data)\n    ) {\n      return state.doubleArrayValue.data\n    }\n\n    return undefined\n  }\n\n  public setDoubleArrayValue(\n    widget: WidgetInfo,\n    value: number[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).doubleArrayValue = new DoubleArray({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getIntArrayValue(widget: WidgetInfo): number[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      notNullOrUndefined(state) &&\n      state.value === \"intArrayValue\" &&\n      notNullOrUndefined(state.intArrayValue) &&\n      notNullOrUndefined(state.intArrayValue.data)\n    ) {\n      return state.intArrayValue.data.map(requireNumberInt)\n    }\n\n    return undefined\n  }\n\n  public setIntArrayValue(\n    widget: WidgetInfo,\n    value: number[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).intArrayValue = new SInt64Array({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getJsonValue(widget: WidgetInfo): string | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"jsonValue\") {\n      return state.jsonValue as string\n    }\n\n    return undefined\n  }\n\n  public setJsonValue(\n    widget: WidgetInfo,\n    value: any,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).jsonValue = JSON.stringify(value)\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public setArrowValue(\n    widget: WidgetInfo,\n    value: IArrowTable,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).arrowValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getArrowValue(widget: WidgetInfo): IArrowTable | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      notNullOrUndefined(state) &&\n      state.value === \"arrowValue\" &&\n      notNullOrUndefined(state.arrowValue)\n    ) {\n      return state.arrowValue\n    }\n\n    return undefined\n  }\n\n  public setBytesValue(\n    widget: WidgetInfo,\n    value: Uint8Array,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).bytesValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getBytesValue(widget: WidgetInfo): Uint8Array | undefined {\n    const state = this.getWidgetState(widget)\n    if (notNullOrUndefined(state) && state.value === \"bytesValue\") {\n      return state.bytesValue as Uint8Array\n    }\n\n    return undefined\n  }\n\n  public setFileUploaderStateValue(\n    widget: WidgetInfo,\n    value: IFileUploaderState,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).fileUploaderStateValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getFileUploaderStateValue(\n    widget: WidgetInfo\n  ): IFileUploaderState | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      notNullOrUndefined(state) &&\n      state.value === \"fileUploaderStateValue\"\n    ) {\n      return state.fileUploaderStateValue as IFileUploaderState\n    }\n\n    return undefined\n  }\n\n  /**\n   * Perform housekeeping every time a widget value changes.\n   * - If the widget does not belong to a form, and the value update came from\n   *   a user action, send the \"updateWidgets\" message\n   * - If the widget belongs to a form, dispatch the \"pendingFormsChanged\"\n   *   callback if needed.\n   *\n   * Called by every \"setValue\" function.\n   */\n  private onWidgetValueChanged(\n    formId: string | undefined,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    if (isValidFormId(formId)) {\n      this.syncFormsWithPendingChanges()\n    } else if (source.fromUi) {\n      this.sendUpdateWidgetsMessage(fragmentId)\n    }\n  }\n\n  /**\n   * Update FormsData.formsWithPendingChanges with the current set of forms\n   * that have pending changes. This is called after widget values are updated.\n   */\n  private syncFormsWithPendingChanges(): void {\n    const pendingFormIds = new Set<string>()\n    this.forms.forEach((form, formId) => {\n      if (form.hasPendingChanges) {\n        pendingFormIds.add(formId)\n      }\n    })\n\n    this.updateFormsData(draft => {\n      draft.formsWithPendingChanges = pendingFormIds\n    })\n  }\n\n  public sendUpdateWidgetsMessage(\n    fragmentId: string | undefined,\n    isAutoRerun: boolean | undefined = undefined\n  ): void {\n    this.props.sendRerunBackMsg(\n      this.widgetStates.createWidgetStatesMsg(),\n      fragmentId,\n      undefined,\n      isAutoRerun\n    )\n  }\n\n  public getActiveWidgetStates(activeIds: Set<string>): WidgetStates {\n    const msg = new WidgetStates()\n    this.widgetStates.forEach(widgetState => {\n      if (activeIds.has(widgetState.id)) {\n        msg.widgets.push(widgetState)\n      }\n    })\n    return msg\n  }\n\n  /**\n   * Remove the state of widgets that are not contained in `activeIds`.\n   * This is called when a script finishes running, so that we don't retain\n   * data for widgets that have been removed from the app.\n   */\n  public removeInactive(activeIds: Set<string>): void {\n    this.widgetStates.removeInactive(activeIds)\n    this.forms.forEach(form => form.widgetStates.removeInactive(activeIds))\n    this.elementStates.forEach((_, elementId) => {\n      if (!activeIds.has(elementId)) {\n        this.deleteElementState(elementId)\n      }\n    })\n  }\n\n  /**\n   * Create and return a new WidgetState proto for the given widget ID,\n   * overwriting any that currently exists. If the widget belongs to a form,\n   * the WidgetState will be created inside the form's WidgetStateDict.\n   */\n  private createWidgetState(widget: WidgetInfo, source: Source): WidgetState {\n    const addToForm = isValidFormId(widget.formId) && source.fromUi\n    const widgetStateDict = addToForm\n      ? this.getOrCreateFormState(widget.formId as string).widgetStates\n      : this.widgetStates\n\n    return widgetStateDict.createState(widget.id)\n  }\n\n  /**\n   * Get the WidgetState proto for the given widget ID, if it exists.\n   */\n  private getWidgetState(widget: WidgetInfo): WidgetState | undefined {\n    // If the widget belongs to a form, try its form value first.\n    if (isValidFormId(widget.formId)) {\n      const formState = this.forms\n        .get(widget.formId)\n        ?.widgetStates.getState(widget.id)\n\n      if (notNullOrUndefined(formState)) {\n        return formState\n      }\n    }\n\n    return this.widgetStates.getState(widget.id)\n  }\n\n  /**\n   * Remove the WidgetState proto with the given id, if it exists\n   */\n  private deleteWidgetState(widgetId: string): void {\n    this.widgetStates.deleteState(widgetId)\n  }\n\n  /** Return the FormState for the given form. Create it if it doesn't exist. */\n  private getOrCreateFormState(formId: string): FormState {\n    let form = this.forms.get(formId)\n    if (notNullOrUndefined(form)) {\n      return form\n    }\n\n    form = new FormState()\n    this.forms.set(formId, form)\n    return form\n  }\n\n  /** Store the IDs of all forms with in-progress uploads. */\n  public setFormsWithUploads(formsWithUploads: Set<string>): void {\n    this.updateFormsData(draft => {\n      draft.formsWithUploads = formsWithUploads\n    })\n  }\n\n  /**\n   * Helper function to determine whether a form allows enter to submit\n   * for input elements (st.number_input, st.text_input, etc.)\n   * If in form, checks form's enterToSubmit paramf first, otherwise default\n   * behavior: Must have 1st submit button enabled to allow\n   */\n  public allowFormEnterToSubmit(formId: string): boolean {\n    // Don't allow if not in form\n    if (!isValidFormId(formId)) return false\n\n    // Check if user-set enterToSubmit param is false (in FormState)\n    const form = this.forms.get(formId)\n    if (form && !form.enterToSubmit) return false\n\n    // Otherwise, use default behavior\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    const firstSubmitButton = submitButtons?.[0]\n\n    // If no submit buttons for the formId, invalid form\n    if (!firstSubmitButton) return false\n\n    // Allow form submit on enter as long as 1st submit button is not disabled\n    return !firstSubmitButton.disabled\n  }\n\n  /**\n   * Called by FormSubmitButton on creation. Add the SubmitButtonProto for\n   * the given form and update FormsData.\n   */\n  public addSubmitButton(\n    formId: string,\n    submitButtonProto: SubmitButtonProto\n  ): void {\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    if (submitButtons === undefined) {\n      this.setSubmitButtons(formId, [submitButtonProto])\n    } else {\n      const copySubmitButtons = Object.assign([], submitButtons)\n      copySubmitButtons.push(submitButtonProto)\n      this.setSubmitButtons(formId, copySubmitButtons)\n    }\n  }\n\n  /**\n   * Called by FormSubmitButton on creation. Remove the SubmitButtonProto for\n   * the given form, and update FormsData.\n   */\n  public removeSubmitButton(\n    formId: string,\n    submitButtonProto: SubmitButtonProto\n  ): void {\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    if (submitButtons !== undefined) {\n      const copySubmitButtons = Object.assign([], submitButtons)\n      const index = copySubmitButtons.indexOf(submitButtonProto, 0)\n      if (index > -1) {\n        copySubmitButtons.splice(index, 1)\n      }\n      this.setSubmitButtons(formId, copySubmitButtons)\n    }\n  }\n\n  private setSubmitButtons(\n    formId: string,\n    submitButtons: Array<SubmitButtonProto>\n  ): void {\n    if (submitButtons.length < 0) {\n      throw new Error(\n        `Bad submitButtons length ${submitButtons.length} (must be >= 0)`\n      )\n    }\n\n    this.updateFormsData(draft => {\n      draft.submitButtons.set(formId, submitButtons)\n    })\n  }\n\n  /**\n   * Produce a new FormsData with the given recipe, and fire off the\n   * formsDataChanged callback with that new data.\n   */\n  private updateFormsData(recipe: (draft: Draft<FormsData>) => void): void {\n    const newData = produce(this.formsData, recipe)\n    if (this.formsData !== newData) {\n      this.formsData = newData\n      this.props.formsDataChanged(this.formsData)\n    }\n  }\n\n  /**\n   * Get the element state value for the given element ID and key, if it exists.\n   * This is a frontend-only state that is never sent to the server.\n   */\n  public getElementState(elementId: string, key: string): any {\n    return this.elementStates.get(elementId)?.get(key)\n  }\n\n  /**\n   * Sets the state of an element identified by its ID and its key.\n   * This is a frontend-only state that is never sent to the server.\n   * It can be used to store element state to restore the state\n   * of an element in situations where an element is removed and re-added.\n   *\n   * @param {string} elementId - The unique identifier of the element.\n   * @param {string} key - The key to set\n   * @param {any} value - The value to set for the element's state.\n   * @returns {void}\n   */\n  public setElementState(elementId: string, key: string, value: any): void {\n    if (!this.elementStates.has(elementId)) {\n      this.elementStates.set(elementId, new Map<string, any>())\n    }\n\n    // It's expected here that there is always an initialized map for an elementId\n    ;(this.elementStates.get(elementId) as Map<string, any>).set(key, value)\n  }\n\n  /**\n   * Deletes the state associated with a specific element by ID. If a key is provided,\n   * only the state corresponding to that key is removed. If no key is specified, all states\n   * associated with the element ID are removed.\n   */\n  public deleteElementState(elementId: string, key?: string): void {\n    if (notNullOrUndefined(key)) {\n      this.elementStates.get(elementId)?.delete(key)\n    } else {\n      this.elementStates.delete(elementId)\n    }\n  }\n}\n\n/**\n * Coerce a `number | Long` to a `number`.\n *\n * Our \"intValue\" and \"intArrayValue\" widget protobuf fields represent their\n * values with sint64, because sint32 is too small to represent the full range\n * of JavaScript int values. Protobufjs uses `number | Long` to represent\n * sint64. However, we're never putting Longs *into* int and intArrays -\n * because none of our widgets use Longs - so we'll never get a Long back out.\n *\n * If the given value cannot be converted to `number` without a loss of\n * precision (which should not be possible!), throw an error instead.\n */\nfunction requireNumberInt(value: number | Long): number {\n  if (typeof value === \"number\") {\n    return value\n  }\n\n  const longNumber = util.LongBits.from(value).toNumber()\n  if (Number.isSafeInteger(longNumber)) {\n    return longNumber\n  }\n\n  throw new Error(\n    `value ${value} cannot be converted to number without a loss of precision!`\n  )\n}\n"],"mappings":"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"}