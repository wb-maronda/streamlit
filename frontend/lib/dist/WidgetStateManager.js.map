{"version":3,"file":"WidgetStateManager.js","names":["produce","util","DoubleArray","SInt64Array","StringArray","StringTriggerValue","WidgetState","WidgetStates","Signal","isValidFormId","notNullOrUndefined","createFormsData","formsWithPendingChanges","Set","formsWithUploads","submitButtons","Map","WidgetStateDict","constructor","widgetStates","createState","widgetId","state","id","set","getState","get","deleteState","delete","removeInactive","activeIds","forEach","value","key","has","clear","isEmpty","size","createWidgetStatesMsg","msg","widgets","push","copyFrom","other","callbackfn","FormState","clearOnSubmit","formCleared","hasPendingChanges","WidgetStateManager","props","forms","formsData","elementStates","addFormClearedListener","formId","listener","getOrCreateFormState","connect","setFormClearOnSubmit","submitForm","fragmentId","actualSubmitButton","Error","concat","form","disableForm","some","submitButton","disabled","selectedSubmitButton","undefined","length","createWidgetState","fromUi","triggerValue","sendUpdateWidgetsMessage","syncFormsWithPendingChanges","deleteWidgetState","emit","setStringTriggerValue","widget","source","stringTriggerValue","data","onWidgetValueChanged","setTriggerValue","getBoolValue","getWidgetState","boolValue","setBoolValue","getIntValue","requireNumberInt","intValue","setIntValue","getDoubleValue","doubleValue","setDoubleValue","getStringValue","stringValue","setStringValue","setStringArrayValue","stringArrayValue","getStringArrayValue","getDoubleArrayValue","doubleArrayValue","setDoubleArrayValue","getIntArrayValue","intArrayValue","map","setIntArrayValue","getJsonValue","jsonValue","setJsonValue","JSON","stringify","setArrowValue","arrowValue","getArrowValue","setBytesValue","bytesValue","getBytesValue","setFileUploaderStateValue","fileUploaderStateValue","getFileUploaderStateValue","pendingFormIds","add","updateFormsData","draft","sendRerunBackMsg","getActiveWidgetStates","widgetState","_","elementId","deleteElementState","addToForm","widgetStateDict","_this$forms$get","formState","setFormsWithUploads","addSubmitButton","submitButtonProto","setSubmitButtons","copySubmitButtons","Object","assign","removeSubmitButton","index","indexOf","splice","recipe","newData","formsDataChanged","getElementState","_this$elementStates$g","setElementState","_this$elementStates$g2","longNumber","LongBits","from","toNumber","Number","isSafeInteger"],"sources":["../src/WidgetStateManager.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport produce, { Draft } from \"immer\"\nimport { Long, util } from \"protobufjs\"\n\nimport {\n  DoubleArray,\n  IArrowTable,\n  IFileUploaderState,\n  SInt64Array,\n  StringArray,\n  Button as SubmitButtonProto,\n  StringTriggerValue,\n  WidgetState,\n  WidgetStates,\n} from \"./proto\"\nimport { Signal, SignalConnection } from \"typed-signals\"\nimport { isValidFormId, notNullOrUndefined } from \"./util/utils\"\n\nexport interface Source {\n  fromUi: boolean\n}\n\n/** Common widget protobuf fields that are used by the WidgetStateManager. */\nexport interface WidgetInfo {\n  id: string\n  formId?: string\n}\n\n/**\n * Immutable structure that exposes public data about all the forms in the app.\n * WidgetStateManager produces new instances of this type when forms data\n * changes.\n */\nexport interface FormsData {\n  /** Forms that have unsubmitted changes. */\n  readonly formsWithPendingChanges: Set<string>\n\n  /** Forms that have in-progress file uploads. */\n  readonly formsWithUploads: Set<string>\n\n  /**\n   * Mapping of formID:numberOfSubmitButtons. (Most forms will have only one,\n   * but it's not an error to have multiple.)\n   */\n  readonly submitButtons: Map<string, Array<SubmitButtonProto>>\n}\n\n/** Create an empty FormsData instance. */\nexport function createFormsData(): FormsData {\n  return {\n    formsWithPendingChanges: new Set(),\n    formsWithUploads: new Set(),\n    submitButtons: new Map(),\n  }\n}\n\n/**\n * A Dictionary that maps widgetID -> WidgetState, and provides some utility\n * functions.\n */\nexport class WidgetStateDict {\n  private readonly widgetStates = new Map<string, WidgetState>()\n\n  /**\n   * Create a new WidgetState proto for the widget with the given ID,\n   * overwriting any that currently exists.\n   */\n  public createState(widgetId: string): WidgetState {\n    const state = new WidgetState({ id: widgetId })\n    this.widgetStates.set(widgetId, state)\n    return state\n  }\n\n  /** Return the WidgetState for the given widgetID if it exists. */\n  public getState(widgetId: string): WidgetState | undefined {\n    return this.widgetStates.get(widgetId)\n  }\n\n  /** Remove the WidgetState proto with the given id, if it exists. */\n  public deleteState(widgetId: string): void {\n    this.widgetStates.delete(widgetId)\n  }\n\n  /** Remove the state of widgets that are not contained in `activeIds`. */\n  public removeInactive(activeIds: Set<string>): void {\n    this.widgetStates.forEach((value, key) => {\n      if (!activeIds.has(key)) {\n        this.widgetStates.delete(key)\n      }\n    })\n  }\n\n  /** Remove all widget states. */\n  public clear(): void {\n    this.widgetStates.clear()\n  }\n\n  public get isEmpty(): boolean {\n    return this.widgetStates.size === 0\n  }\n\n  public createWidgetStatesMsg(): WidgetStates {\n    const msg = new WidgetStates()\n    this.widgetStates.forEach(value => msg.widgets.push(value))\n    return msg\n  }\n\n  /**\n   * Copy the contents of another WidgetStateDict into this one, overwriting\n   * any values with duplicate keys.\n   */\n  public copyFrom(other: WidgetStateDict): void {\n    other.widgetStates.forEach((state, widgetId) => {\n      this.widgetStates.set(widgetId, state)\n    })\n  }\n\n  /** Call a function for each value in the dict. */\n  public forEach(callbackfn: (value: WidgetState) => void): void {\n    this.widgetStates.forEach(callbackfn)\n  }\n}\n\n/** Stores private data about a single form. */\nclass FormState {\n  public readonly widgetStates = new WidgetStateDict()\n\n  /** True if the form was created with the clear_on_submit flag. */\n  public clearOnSubmit = false\n\n  /** Signal emitted when the form is cleared. */\n  public readonly formCleared = new Signal()\n\n  /** True if the form has a non-empty WidgetStateDict. */\n  public get hasPendingChanges(): boolean {\n    return !this.widgetStates.isEmpty\n  }\n}\n\ninterface Props {\n  /** Callback to deliver a message to the server */\n  sendRerunBackMsg: (\n    widgetStates: WidgetStates,\n    fragmentId: string | undefined\n  ) => void\n\n  /**\n   * Callback invoked whenever our FormsData changed. (Because FormsData\n   * is immutable, any changes to it result in a new instance being created.)\n   */\n  formsDataChanged: (formsData: FormsData) => void\n}\n\n/**\n * Manages widget values, and sends widget update messages back to the server.\n */\nexport class WidgetStateManager {\n  private readonly props: Props\n\n  // Top-level widget state dictionary.\n  private readonly widgetStates = new WidgetStateDict()\n\n  // Internal state for each form we're managing.\n  private readonly forms = new Map<string, FormState>()\n\n  // External data about all forms.\n  private formsData: FormsData\n\n  // A dictionary that maps elementId -> element state keys -> element state values.\n  // This is used to store frontend-only state for elements.\n  // This state is not never sent to the server.\n  private readonly elementStates = new Map<string, Map<string, any>>()\n\n  constructor(props: Props) {\n    this.props = props\n    this.formsData = createFormsData()\n  }\n\n  /**\n   * Register a function that will be called when the given form is cleared.\n   * Returns an object that can be used to de-register the listener.\n   */\n  public addFormClearedListener(\n    formId: string,\n    listener: () => void\n  ): SignalConnection {\n    return this.getOrCreateFormState(formId).formCleared.connect(listener)\n  }\n\n  /**\n   * Register a Form, and assign its clearOnSubmit value.\n   * The `Form` element calls this when it's first mounted.\n   */\n  public setFormClearOnSubmit(formId: string, clearOnSubmit: boolean): void {\n    this.getOrCreateFormState(formId).clearOnSubmit = clearOnSubmit\n  }\n\n  /**\n   * Commit pending changes for widgets that belong to the given form,\n   * and send a rerunBackMsg to the server.\n   */\n  public submitForm(\n    formId: string,\n    fragmentId: string | undefined,\n    actualSubmitButton?: WidgetInfo\n  ): void {\n    if (!isValidFormId(formId)) {\n      // This should never get thrown - only FormSubmitButton calls this\n      // function.\n      throw new Error(`invalid formID '${formId}'`)\n    }\n\n    const form = this.getOrCreateFormState(formId)\n\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    const disableForm = submitButtons?.some(\n      submitButton => submitButton.disabled\n    )\n    if (disableForm) {\n      return\n    }\n\n    let selectedSubmitButton\n\n    if (actualSubmitButton !== undefined) {\n      selectedSubmitButton = actualSubmitButton\n    }\n    // can have an empty list of submitButtons\n    else if (submitButtons !== undefined && submitButtons.length > 0) {\n      // click the first submit button. We can choose any so we just choose first.\n      selectedSubmitButton = submitButtons[0]\n    }\n\n    if (selectedSubmitButton) {\n      this.createWidgetState(selectedSubmitButton, {\n        fromUi: true,\n      }).triggerValue = true\n    }\n\n    // Copy the form's values into widgetStates, delete the form's pending\n    // changes, and send our widgetStates back to the server.\n    this.widgetStates.copyFrom(form.widgetStates)\n    form.widgetStates.clear()\n\n    this.sendUpdateWidgetsMessage(fragmentId)\n    this.syncFormsWithPendingChanges()\n\n    if (selectedSubmitButton) {\n      this.deleteWidgetState(selectedSubmitButton.id)\n    }\n\n    // If the form has the clearOnSubmit flag, we emit a signal to all widgets\n    // in the form. Each widget that handles this signal will reset to their\n    // default values, and submit those new default values to the WidgetStateManager\n    // in their signal handlers. (Because all of these widgets are in a form,\n    // none of these value submissions will trigger re-run requests.)\n    if (form.clearOnSubmit) {\n      form.formCleared.emit()\n    }\n  }\n\n  /**\n   * Sets the string trigger value for the given widget ID to a string value,\n   * sends a rerunScript message to the server, and then immediately unsets the\n   * string trigger value to None/null.\n   */\n  public setStringTriggerValue(\n    widget: WidgetInfo,\n    value: string,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringTriggerValue =\n      new StringTriggerValue({ data: value })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n    this.deleteWidgetState(widget.id)\n  }\n\n  /**\n   * Sets the trigger value for the given widget ID to true, sends a rerunScript message\n   * to the server, and then immediately unsets the trigger value.\n   */\n  public setTriggerValue(\n    widget: WidgetInfo,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).triggerValue = true\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n    this.deleteWidgetState(widget.id)\n  }\n\n  public getBoolValue(widget: WidgetInfo): boolean | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"boolValue\") {\n      return state.boolValue as boolean\n    }\n\n    return undefined\n  }\n\n  public setBoolValue(\n    widget: WidgetInfo,\n    value: boolean,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).boolValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getIntValue(widget: WidgetInfo): number | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"intValue\") {\n      return requireNumberInt(state.intValue as number)\n    }\n\n    return undefined\n  }\n\n  public setIntValue(\n    widget: WidgetInfo,\n    value: number | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).intValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getDoubleValue(widget: WidgetInfo): number | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"doubleValue\") {\n      return state.doubleValue as number\n    }\n\n    return undefined\n  }\n\n  public setDoubleValue(\n    widget: WidgetInfo,\n    value: number | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).doubleValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getStringValue(widget: WidgetInfo): string | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"stringValue\") {\n      return state.stringValue as string\n    }\n\n    return undefined\n  }\n\n  public setStringValue(\n    widget: WidgetInfo,\n    value: string | null,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public setStringArrayValue(\n    widget: WidgetInfo,\n    value: string[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).stringArrayValue = new StringArray({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getStringArrayValue(widget: WidgetInfo): string[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      state != null &&\n      state.value === \"stringArrayValue\" &&\n      state.stringArrayValue != null &&\n      state.stringArrayValue.data != null\n    ) {\n      return state.stringArrayValue.data\n    }\n\n    return undefined\n  }\n\n  public getDoubleArrayValue(widget: WidgetInfo): number[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      state != null &&\n      state.value === \"doubleArrayValue\" &&\n      state.doubleArrayValue != null &&\n      state.doubleArrayValue.data != null\n    ) {\n      return state.doubleArrayValue.data\n    }\n\n    return undefined\n  }\n\n  public setDoubleArrayValue(\n    widget: WidgetInfo,\n    value: number[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).doubleArrayValue = new DoubleArray({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getIntArrayValue(widget: WidgetInfo): number[] | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      state != null &&\n      state.value === \"intArrayValue\" &&\n      state.intArrayValue != null &&\n      state.intArrayValue.data != null\n    ) {\n      return state.intArrayValue.data.map(requireNumberInt)\n    }\n\n    return undefined\n  }\n\n  public setIntArrayValue(\n    widget: WidgetInfo,\n    value: number[],\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).intArrayValue = new SInt64Array({\n      data: value,\n    })\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getJsonValue(widget: WidgetInfo): string | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"jsonValue\") {\n      return state.jsonValue as string\n    }\n\n    return undefined\n  }\n\n  public setJsonValue(\n    widget: WidgetInfo,\n    value: any,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).jsonValue = JSON.stringify(value)\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public setArrowValue(\n    widget: WidgetInfo,\n    value: IArrowTable,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).arrowValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getArrowValue(widget: WidgetInfo): IArrowTable | undefined {\n    const state = this.getWidgetState(widget)\n    if (\n      state != null &&\n      state.value === \"arrowValue\" &&\n      state.arrowValue != null\n    ) {\n      return state.arrowValue\n    }\n\n    return undefined\n  }\n\n  public setBytesValue(\n    widget: WidgetInfo,\n    value: Uint8Array,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).bytesValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getBytesValue(widget: WidgetInfo): Uint8Array | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"bytesValue\") {\n      return state.bytesValue as Uint8Array\n    }\n\n    return undefined\n  }\n\n  public setFileUploaderStateValue(\n    widget: WidgetInfo,\n    value: IFileUploaderState,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    this.createWidgetState(widget, source).fileUploaderStateValue = value\n    this.onWidgetValueChanged(widget.formId, source, fragmentId)\n  }\n\n  public getFileUploaderStateValue(\n    widget: WidgetInfo\n  ): IFileUploaderState | undefined {\n    const state = this.getWidgetState(widget)\n    if (state != null && state.value === \"fileUploaderStateValue\") {\n      return state.fileUploaderStateValue as IFileUploaderState\n    }\n\n    return undefined\n  }\n\n  /**\n   * Perform housekeeping every time a widget value changes.\n   * - If the widget does not belong to a form, and the value update came from\n   *   a user action, send the \"updateWidgets\" message\n   * - If the widget belongs to a form, dispatch the \"pendingFormsChanged\"\n   *   callback if needed.\n   *\n   * Called by every \"setValue\" function.\n   */\n  private onWidgetValueChanged(\n    formId: string | undefined,\n    source: Source,\n    fragmentId: string | undefined\n  ): void {\n    if (isValidFormId(formId)) {\n      this.syncFormsWithPendingChanges()\n    } else if (source.fromUi) {\n      this.sendUpdateWidgetsMessage(fragmentId)\n    }\n  }\n\n  /**\n   * Update FormsData.formsWithPendingChanges with the current set of forms\n   * that have pending changes. This is called after widget values are updated.\n   */\n  private syncFormsWithPendingChanges(): void {\n    const pendingFormIds = new Set<string>()\n    this.forms.forEach((form, formId) => {\n      if (form.hasPendingChanges) {\n        pendingFormIds.add(formId)\n      }\n    })\n\n    this.updateFormsData(draft => {\n      draft.formsWithPendingChanges = pendingFormIds\n    })\n  }\n\n  public sendUpdateWidgetsMessage(fragmentId: string | undefined): void {\n    this.props.sendRerunBackMsg(\n      this.widgetStates.createWidgetStatesMsg(),\n      fragmentId\n    )\n  }\n\n  public getActiveWidgetStates(activeIds: Set<string>): WidgetStates {\n    const msg = new WidgetStates()\n    this.widgetStates.forEach(widgetState => {\n      if (activeIds.has(widgetState.id)) {\n        msg.widgets.push(widgetState)\n      }\n    })\n    return msg\n  }\n\n  /**\n   * Remove the state of widgets that are not contained in `activeIds`.\n   * This is called when a script finishes running, so that we don't retain\n   * data for widgets that have been removed from the app.\n   */\n  public removeInactive(activeIds: Set<string>): void {\n    this.widgetStates.removeInactive(activeIds)\n    this.forms.forEach(form => form.widgetStates.removeInactive(activeIds))\n    this.elementStates.forEach((_, elementId) => {\n      if (!activeIds.has(elementId)) {\n        this.deleteElementState(elementId)\n      }\n    })\n  }\n\n  /**\n   * Create and return a new WidgetState proto for the given widget ID,\n   * overwriting any that currently exists. If the widget belongs to a form,\n   * the WidgetState will be created inside the form's WidgetStateDict.\n   */\n  private createWidgetState(widget: WidgetInfo, source: Source): WidgetState {\n    const addToForm = isValidFormId(widget.formId) && source.fromUi\n    const widgetStateDict = addToForm\n      ? this.getOrCreateFormState(widget.formId as string).widgetStates\n      : this.widgetStates\n\n    return widgetStateDict.createState(widget.id)\n  }\n\n  /**\n   * Get the WidgetState proto for the given widget ID, if it exists.\n   */\n  private getWidgetState(widget: WidgetInfo): WidgetState | undefined {\n    // If the widget belongs to a form, try its form value first.\n    if (isValidFormId(widget.formId)) {\n      const formState = this.forms\n        .get(widget.formId)\n        ?.widgetStates.getState(widget.id)\n\n      if (formState != null) {\n        return formState\n      }\n    }\n\n    return this.widgetStates.getState(widget.id)\n  }\n\n  /**\n   * Remove the WidgetState proto with the given id, if it exists\n   */\n  private deleteWidgetState(widgetId: string): void {\n    this.widgetStates.deleteState(widgetId)\n  }\n\n  /** Return the FormState for the given form. Create it if it doesn't exist. */\n  private getOrCreateFormState(formId: string): FormState {\n    let form = this.forms.get(formId)\n    if (form != null) {\n      return form\n    }\n\n    form = new FormState()\n    this.forms.set(formId, form)\n    return form\n  }\n\n  /** Store the IDs of all forms with in-progress uploads. */\n  public setFormsWithUploads(formsWithUploads: Set<string>): void {\n    this.updateFormsData(draft => {\n      draft.formsWithUploads = formsWithUploads\n    })\n  }\n\n  /**\n   * Called by FormSubmitButton on creation. Add the SubmitButtonProto for\n   * the given form and update FormsData.\n   */\n  public addSubmitButton(\n    formId: string,\n    submitButtonProto: SubmitButtonProto\n  ): void {\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    if (submitButtons === undefined) {\n      this.setSubmitButtons(formId, [submitButtonProto])\n    } else {\n      const copySubmitButtons = Object.assign([], submitButtons)\n      copySubmitButtons.push(submitButtonProto)\n      this.setSubmitButtons(formId, copySubmitButtons)\n    }\n  }\n\n  /**\n   * Called by FormSubmitButton on creation. Remove the SubmitButtonProto for\n   * the given form, and update FormsData.\n   */\n  public removeSubmitButton(\n    formId: string,\n    submitButtonProto: SubmitButtonProto\n  ): void {\n    const submitButtons = this.formsData.submitButtons.get(formId)\n    if (submitButtons !== undefined) {\n      const copySubmitButtons = Object.assign([], submitButtons)\n      const index = copySubmitButtons.indexOf(submitButtonProto, 0)\n      if (index > -1) {\n        copySubmitButtons.splice(index, 1)\n      }\n      this.setSubmitButtons(formId, copySubmitButtons)\n    }\n  }\n\n  private setSubmitButtons(\n    formId: string,\n    submitButtons: Array<SubmitButtonProto>\n  ): void {\n    if (submitButtons.length < 0) {\n      throw new Error(\n        `Bad submitButtons length ${submitButtons.length} (must be >= 0)`\n      )\n    }\n\n    this.updateFormsData(draft => {\n      draft.submitButtons.set(formId, submitButtons)\n    })\n  }\n\n  /**\n   * Produce a new FormsData with the given recipe, and fire off the\n   * formsDataChanged callback with that new data.\n   */\n  private updateFormsData(recipe: (draft: Draft<FormsData>) => void): void {\n    const newData = produce(this.formsData, recipe)\n    if (this.formsData !== newData) {\n      this.formsData = newData\n      this.props.formsDataChanged(this.formsData)\n    }\n  }\n\n  /**\n   * Get the element state value for the given element ID and key, if it exists.\n   * This is a frontend-only state that is never sent to the server.\n   */\n  public getElementState(elementId: string, key: string): any {\n    return this.elementStates.get(elementId)?.get(key)\n  }\n\n  /**\n   * Sets the state of an element identified by its ID and its key.\n   * This is a frontend-only state that is never sent to the server.\n   * It can be used to store element state to restore the state\n   * of an element in situations where an element is removed and re-added.\n   *\n   * @param {string} elementId - The unique identifier of the element.\n   * @param {string} key - The key to set\n   * @param {any} value - The value to set for the element's state.\n   * @returns {void}\n   */\n  public setElementState(elementId: string, key: string, value: any): void {\n    if (!this.elementStates.has(elementId)) {\n      this.elementStates.set(elementId, new Map<string, any>())\n    }\n\n    // It's expected here that there is always an initialized map for an elementId\n    ;(this.elementStates.get(elementId) as Map<string, any>).set(key, value)\n  }\n\n  /**\n   * Deletes the state associated with a specific element by ID. If a key is provided,\n   * only the state corresponding to that key is removed. If no key is specified, all states\n   * associated with the element ID are removed.\n   */\n  public deleteElementState(elementId: string, key?: string): void {\n    if (notNullOrUndefined(key)) {\n      this.elementStates.get(elementId)?.delete(key)\n    } else {\n      this.elementStates.delete(elementId)\n    }\n  }\n}\n\n/**\n * Coerce a `number | Long` to a `number`.\n *\n * Our \"intValue\" and \"intArrayValue\" widget protobuf fields represent their\n * values with sint64, because sint32 is too small to represent the full range\n * of JavaScript int values. Protobufjs uses `number | Long` to represent\n * sint64. However, we're never putting Longs *into* int and intArrays -\n * because none of our widgets use Longs - so we'll never get a Long back out.\n *\n * If the given value cannot be converted to `number` without a loss of\n * precision (which should not be possible!), throw an error instead.\n */\nfunction requireNumberInt(value: number | Long): number {\n  if (typeof value === \"number\") {\n    return value\n  }\n\n  const longNumber = util.LongBits.from(value).toNumber()\n  if (Number.isSafeInteger(longNumber)) {\n    return longNumber\n  }\n\n  throw new Error(\n    `value ${value} cannot be converted to number without a loss of precision!`\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAiB,OAAO;AACtC,SAAeC,IAAI,QAAQ,YAAY;AAEvC,SACEC,WAAW,EAGXC,WAAW,EACXC,WAAW,EAEXC,kBAAkB,EAClBC,WAAW,EACXC,YAAY;AAEd,SAASC,MAAM,QAA0B,eAAe;AACxD,SAASC,aAAa,EAAEC,kBAAkB;;AAM1C;;AAMA;AACA;AACA;AACA;AACA;;AAeA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAc;EAC3C,OAAO;IACLC,uBAAuB,EAAE,IAAIC,GAAG,CAAC,CAAC;IAClCC,gBAAgB,EAAE,IAAID,GAAG,CAAC,CAAC;IAC3BE,aAAa,EAAE,IAAIC,GAAG,CAAC;EACzB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAAA,KACVC,YAAY,GAAG,IAAIH,GAAG,CAAsB,CAAC;EAAA;EAE9D;AACF;AACA;AACA;EACSI,WAAWA,CAACC,QAAgB,EAAe;IAChD,MAAMC,KAAK,GAAG,IAAIhB,WAAW,CAAC;MAAEiB,EAAE,EAAEF;IAAS,CAAC,CAAC;IAC/C,IAAI,CAACF,YAAY,CAACK,GAAG,CAACH,QAAQ,EAAEC,KAAK,CAAC;IACtC,OAAOA,KAAK;EACd;;EAEA;EACOG,QAAQA,CAACJ,QAAgB,EAA2B;IACzD,OAAO,IAAI,CAACF,YAAY,CAACO,GAAG,CAACL,QAAQ,CAAC;EACxC;;EAEA;EACOM,WAAWA,CAACN,QAAgB,EAAQ;IACzC,IAAI,CAACF,YAAY,CAACS,MAAM,CAACP,QAAQ,CAAC;EACpC;;EAEA;EACOQ,cAAcA,CAACC,SAAsB,EAAQ;IAClD,IAAI,CAACX,YAAY,CAACY,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;MACxC,IAAI,CAACH,SAAS,CAACI,GAAG,CAACD,GAAG,CAAC,EAAE;QACvB,IAAI,CAACd,YAAY,CAACS,MAAM,CAACK,GAAG,CAAC;MAC/B;IACF,CAAC,CAAC;EACJ;;EAEA;EACOE,KAAKA,CAAA,EAAS;IACnB,IAAI,CAAChB,YAAY,CAACgB,KAAK,CAAC,CAAC;EAC3B;EAEA,IAAWC,OAAOA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACjB,YAAY,CAACkB,IAAI,KAAK,CAAC;EACrC;EAEOC,qBAAqBA,CAAA,EAAiB;IAC3C,MAAMC,GAAG,GAAG,IAAIhC,YAAY,CAAC,CAAC;IAC9B,IAAI,CAACY,YAAY,CAACY,OAAO,CAACC,KAAK,IAAIO,GAAG,CAACC,OAAO,CAACC,IAAI,CAACT,KAAK,CAAC,CAAC;IAC3D,OAAOO,GAAG;EACZ;;EAEA;AACF;AACA;AACA;EACSG,QAAQA,CAACC,KAAsB,EAAQ;IAC5CA,KAAK,CAACxB,YAAY,CAACY,OAAO,CAAC,CAACT,KAAK,EAAED,QAAQ,KAAK;MAC9C,IAAI,CAACF,YAAY,CAACK,GAAG,CAACH,QAAQ,EAAEC,KAAK,CAAC;IACxC,CAAC,CAAC;EACJ;;EAEA;EACOS,OAAOA,CAACa,UAAwC,EAAQ;IAC7D,IAAI,CAACzB,YAAY,CAACY,OAAO,CAACa,UAAU,CAAC;EACvC;AACF;;AAEA;AACA,MAAMC,SAAS,CAAC;EAAA3B,YAAA;IAAA,KACEC,YAAY,GAAG,IAAIF,eAAe,CAAC,CAAC;IAAA,KAG7C6B,aAAa,GAAG,KAAK;IAAA,KAGZC,WAAW,GAAG,IAAIvC,MAAM,CAAC,CAAC;EAAA;EAJ1C;EAGA;EAGA;EACA,IAAWwC,iBAAiBA,CAAA,EAAY;IACtC,OAAO,CAAC,IAAI,CAAC7B,YAAY,CAACiB,OAAO;EACnC;AACF;AAgBA;AACA;AACA;AACA,OAAO,MAAMa,kBAAkB,CAAC;EAG9B;;EAGA;;EAGA;;EAGA;EACA;EACA;;EAGA/B,WAAWA,CAACgC,KAAY,EAAE;IAAA,KAhBTA,KAAK;IAAA,KAGL/B,YAAY,GAAG,IAAIF,eAAe,CAAC,CAAC;IAAA,KAGpCkC,KAAK,GAAG,IAAInC,GAAG,CAAoB,CAAC;IAAA,KAG7CoC,SAAS;IAAA,KAKAC,aAAa,GAAG,IAAIrC,GAAG,CAA2B,CAAC;IAGlE,IAAI,CAACkC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,SAAS,GAAGzC,eAAe,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;EACS2C,sBAAsBA,CAC3BC,MAAc,EACdC,QAAoB,EACF;IAClB,OAAO,IAAI,CAACC,oBAAoB,CAACF,MAAM,CAAC,CAACR,WAAW,CAACW,OAAO,CAACF,QAAQ,CAAC;EACxE;;EAEA;AACF;AACA;AACA;EACSG,oBAAoBA,CAACJ,MAAc,EAAET,aAAsB,EAAQ;IACxE,IAAI,CAACW,oBAAoB,CAACF,MAAM,CAAC,CAACT,aAAa,GAAGA,aAAa;EACjE;;EAEA;AACF;AACA;AACA;EACSc,UAAUA,CACfL,MAAc,EACdM,UAA8B,EAC9BC,kBAA+B,EACzB;IACN,IAAI,CAACrD,aAAa,CAAC8C,MAAM,CAAC,EAAE;MAC1B;MACA;MACA,MAAM,IAAIQ,KAAK,oBAAAC,MAAA,CAAoBT,MAAM,MAAG,CAAC;IAC/C;IAEA,MAAMU,IAAI,GAAG,IAAI,CAACR,oBAAoB,CAACF,MAAM,CAAC;IAE9C,MAAMxC,aAAa,GAAG,IAAI,CAACqC,SAAS,CAACrC,aAAa,CAACW,GAAG,CAAC6B,MAAM,CAAC;IAC9D,MAAMW,WAAW,GAAGnD,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEoD,IAAI,CACrCC,YAAY,IAAIA,YAAY,CAACC,QAC/B,CAAC;IACD,IAAIH,WAAW,EAAE;MACf;IACF;IAEA,IAAII,oBAAoB;IAExB,IAAIR,kBAAkB,KAAKS,SAAS,EAAE;MACpCD,oBAAoB,GAAGR,kBAAkB;IAC3C;IACA;IAAA,KACK,IAAI/C,aAAa,KAAKwD,SAAS,IAAIxD,aAAa,CAACyD,MAAM,GAAG,CAAC,EAAE;MAChE;MACAF,oBAAoB,GAAGvD,aAAa,CAAC,CAAC,CAAC;IACzC;IAEA,IAAIuD,oBAAoB,EAAE;MACxB,IAAI,CAACG,iBAAiB,CAACH,oBAAoB,EAAE;QAC3CI,MAAM,EAAE;MACV,CAAC,CAAC,CAACC,YAAY,GAAG,IAAI;IACxB;;IAEA;IACA;IACA,IAAI,CAACxD,YAAY,CAACuB,QAAQ,CAACuB,IAAI,CAAC9C,YAAY,CAAC;IAC7C8C,IAAI,CAAC9C,YAAY,CAACgB,KAAK,CAAC,CAAC;IAEzB,IAAI,CAACyC,wBAAwB,CAACf,UAAU,CAAC;IACzC,IAAI,CAACgB,2BAA2B,CAAC,CAAC;IAElC,IAAIP,oBAAoB,EAAE;MACxB,IAAI,CAACQ,iBAAiB,CAACR,oBAAoB,CAAC/C,EAAE,CAAC;IACjD;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAI0C,IAAI,CAACnB,aAAa,EAAE;MACtBmB,IAAI,CAAClB,WAAW,CAACgC,IAAI,CAAC,CAAC;IACzB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACSC,qBAAqBA,CAC1BC,MAAkB,EAClBjD,KAAa,EACbkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACC,kBAAkB,GACvD,IAAI9E,kBAAkB,CAAC;MAAE+E,IAAI,EAAEpD;IAAM,CAAC,CAAC;IACzC,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;IAC5D,IAAI,CAACiB,iBAAiB,CAACG,MAAM,CAAC1D,EAAE,CAAC;EACnC;;EAEA;AACF;AACA;AACA;EACS+D,eAAeA,CACpBL,MAAkB,EAClBC,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACP,YAAY,GAAG,IAAI;IAC1D,IAAI,CAACU,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;IAC5D,IAAI,CAACiB,iBAAiB,CAACG,MAAM,CAAC1D,EAAE,CAAC;EACnC;EAEOgE,YAAYA,CAACN,MAAkB,EAAuB;IAC3D,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,WAAW,EAAE;MAChD,OAAOV,KAAK,CAACmE,SAAS;IACxB;IAEA,OAAOlB,SAAS;EAClB;EAEOmB,YAAYA,CACjBT,MAAkB,EAClBjD,KAAc,EACdkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACO,SAAS,GAAGzD,KAAK;IACxD,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEO8B,WAAWA,CAACV,MAAkB,EAAsB;IACzD,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,UAAU,EAAE;MAC/C,OAAO4D,gBAAgB,CAACtE,KAAK,CAACuE,QAAkB,CAAC;IACnD;IAEA,OAAOtB,SAAS;EAClB;EAEOuB,WAAWA,CAChBb,MAAkB,EAClBjD,KAAoB,EACpBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACW,QAAQ,GAAG7D,KAAK;IACvD,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOkC,cAAcA,CAACd,MAAkB,EAAsB;IAC5D,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,aAAa,EAAE;MAClD,OAAOV,KAAK,CAAC0E,WAAW;IAC1B;IAEA,OAAOzB,SAAS;EAClB;EAEO0B,cAAcA,CACnBhB,MAAkB,EAClBjD,KAAoB,EACpBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACc,WAAW,GAAGhE,KAAK;IAC1D,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOqC,cAAcA,CAACjB,MAAkB,EAAsB;IAC5D,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,aAAa,EAAE;MAClD,OAAOV,KAAK,CAAC6E,WAAW;IAC1B;IAEA,OAAO5B,SAAS;EAClB;EAEO6B,cAAcA,CACnBnB,MAAkB,EAClBjD,KAAoB,EACpBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACiB,WAAW,GAAGnE,KAAK;IAC1D,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOwC,mBAAmBA,CACxBpB,MAAkB,EAClBjD,KAAe,EACfkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACoB,gBAAgB,GAAG,IAAIlG,WAAW,CAAC;MACxEgF,IAAI,EAAEpD;IACR,CAAC,CAAC;IACF,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEO0C,mBAAmBA,CAACtB,MAAkB,EAAwB;IACnE,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IACE3D,KAAK,IAAI,IAAI,IACbA,KAAK,CAACU,KAAK,KAAK,kBAAkB,IAClCV,KAAK,CAACgF,gBAAgB,IAAI,IAAI,IAC9BhF,KAAK,CAACgF,gBAAgB,CAAClB,IAAI,IAAI,IAAI,EACnC;MACA,OAAO9D,KAAK,CAACgF,gBAAgB,CAAClB,IAAI;IACpC;IAEA,OAAOb,SAAS;EAClB;EAEOiC,mBAAmBA,CAACvB,MAAkB,EAAwB;IACnE,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IACE3D,KAAK,IAAI,IAAI,IACbA,KAAK,CAACU,KAAK,KAAK,kBAAkB,IAClCV,KAAK,CAACmF,gBAAgB,IAAI,IAAI,IAC9BnF,KAAK,CAACmF,gBAAgB,CAACrB,IAAI,IAAI,IAAI,EACnC;MACA,OAAO9D,KAAK,CAACmF,gBAAgB,CAACrB,IAAI;IACpC;IAEA,OAAOb,SAAS;EAClB;EAEOmC,mBAAmBA,CACxBzB,MAAkB,EAClBjD,KAAe,EACfkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACuB,gBAAgB,GAAG,IAAIvG,WAAW,CAAC;MACxEkF,IAAI,EAAEpD;IACR,CAAC,CAAC;IACF,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEO8C,gBAAgBA,CAAC1B,MAAkB,EAAwB;IAChE,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IACE3D,KAAK,IAAI,IAAI,IACbA,KAAK,CAACU,KAAK,KAAK,eAAe,IAC/BV,KAAK,CAACsF,aAAa,IAAI,IAAI,IAC3BtF,KAAK,CAACsF,aAAa,CAACxB,IAAI,IAAI,IAAI,EAChC;MACA,OAAO9D,KAAK,CAACsF,aAAa,CAACxB,IAAI,CAACyB,GAAG,CAACjB,gBAAgB,CAAC;IACvD;IAEA,OAAOrB,SAAS;EAClB;EAEOuC,gBAAgBA,CACrB7B,MAAkB,EAClBjD,KAAe,EACfkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAAC0B,aAAa,GAAG,IAAIzG,WAAW,CAAC;MACrEiF,IAAI,EAAEpD;IACR,CAAC,CAAC;IACF,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOkD,YAAYA,CAAC9B,MAAkB,EAAsB;IAC1D,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,WAAW,EAAE;MAChD,OAAOV,KAAK,CAAC0F,SAAS;IACxB;IAEA,OAAOzC,SAAS;EAClB;EAEO0C,YAAYA,CACjBhC,MAAkB,EAClBjD,KAAU,EACVkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAAC8B,SAAS,GAAGE,IAAI,CAACC,SAAS,CAACnF,KAAK,CAAC;IACxE,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOuD,aAAaA,CAClBnC,MAAkB,EAClBjD,KAAkB,EAClBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACmC,UAAU,GAAGrF,KAAK;IACzD,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEOyD,aAAaA,CAACrC,MAAkB,EAA2B;IAChE,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IACE3D,KAAK,IAAI,IAAI,IACbA,KAAK,CAACU,KAAK,KAAK,YAAY,IAC5BV,KAAK,CAAC+F,UAAU,IAAI,IAAI,EACxB;MACA,OAAO/F,KAAK,CAAC+F,UAAU;IACzB;IAEA,OAAO9C,SAAS;EAClB;EAEOgD,aAAaA,CAClBtC,MAAkB,EAClBjD,KAAiB,EACjBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACsC,UAAU,GAAGxF,KAAK;IACzD,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEO4D,aAAaA,CAACxC,MAAkB,EAA0B;IAC/D,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,YAAY,EAAE;MACjD,OAAOV,KAAK,CAACkG,UAAU;IACzB;IAEA,OAAOjD,SAAS;EAClB;EAEOmD,yBAAyBA,CAC9BzC,MAAkB,EAClBjD,KAAyB,EACzBkD,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAI,CAACY,iBAAiB,CAACQ,MAAM,EAAEC,MAAM,CAAC,CAACyC,sBAAsB,GAAG3F,KAAK;IACrE,IAAI,CAACqD,oBAAoB,CAACJ,MAAM,CAAC1B,MAAM,EAAE2B,MAAM,EAAErB,UAAU,CAAC;EAC9D;EAEO+D,yBAAyBA,CAC9B3C,MAAkB,EACc;IAChC,MAAM3D,KAAK,GAAG,IAAI,CAACkE,cAAc,CAACP,MAAM,CAAC;IACzC,IAAI3D,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACU,KAAK,KAAK,wBAAwB,EAAE;MAC7D,OAAOV,KAAK,CAACqG,sBAAsB;IACrC;IAEA,OAAOpD,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUc,oBAAoBA,CAC1B9B,MAA0B,EAC1B2B,MAAc,EACdrB,UAA8B,EACxB;IACN,IAAIpD,aAAa,CAAC8C,MAAM,CAAC,EAAE;MACzB,IAAI,CAACsB,2BAA2B,CAAC,CAAC;IACpC,CAAC,MAAM,IAAIK,MAAM,CAACR,MAAM,EAAE;MACxB,IAAI,CAACE,wBAAwB,CAACf,UAAU,CAAC;IAC3C;EACF;;EAEA;AACF;AACA;AACA;EACUgB,2BAA2BA,CAAA,EAAS;IAC1C,MAAMgD,cAAc,GAAG,IAAIhH,GAAG,CAAS,CAAC;IACxC,IAAI,CAACsC,KAAK,CAACpB,OAAO,CAAC,CAACkC,IAAI,EAAEV,MAAM,KAAK;MACnC,IAAIU,IAAI,CAACjB,iBAAiB,EAAE;QAC1B6E,cAAc,CAACC,GAAG,CAACvE,MAAM,CAAC;MAC5B;IACF,CAAC,CAAC;IAEF,IAAI,CAACwE,eAAe,CAACC,KAAK,IAAI;MAC5BA,KAAK,CAACpH,uBAAuB,GAAGiH,cAAc;IAChD,CAAC,CAAC;EACJ;EAEOjD,wBAAwBA,CAACf,UAA8B,EAAQ;IACpE,IAAI,CAACX,KAAK,CAAC+E,gBAAgB,CACzB,IAAI,CAAC9G,YAAY,CAACmB,qBAAqB,CAAC,CAAC,EACzCuB,UACF,CAAC;EACH;EAEOqE,qBAAqBA,CAACpG,SAAsB,EAAgB;IACjE,MAAMS,GAAG,GAAG,IAAIhC,YAAY,CAAC,CAAC;IAC9B,IAAI,CAACY,YAAY,CAACY,OAAO,CAACoG,WAAW,IAAI;MACvC,IAAIrG,SAAS,CAACI,GAAG,CAACiG,WAAW,CAAC5G,EAAE,CAAC,EAAE;QACjCgB,GAAG,CAACC,OAAO,CAACC,IAAI,CAAC0F,WAAW,CAAC;MAC/B;IACF,CAAC,CAAC;IACF,OAAO5F,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;EACSV,cAAcA,CAACC,SAAsB,EAAQ;IAClD,IAAI,CAACX,YAAY,CAACU,cAAc,CAACC,SAAS,CAAC;IAC3C,IAAI,CAACqB,KAAK,CAACpB,OAAO,CAACkC,IAAI,IAAIA,IAAI,CAAC9C,YAAY,CAACU,cAAc,CAACC,SAAS,CAAC,CAAC;IACvE,IAAI,CAACuB,aAAa,CAACtB,OAAO,CAAC,CAACqG,CAAC,EAAEC,SAAS,KAAK;MAC3C,IAAI,CAACvG,SAAS,CAACI,GAAG,CAACmG,SAAS,CAAC,EAAE;QAC7B,IAAI,CAACC,kBAAkB,CAACD,SAAS,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACU5D,iBAAiBA,CAACQ,MAAkB,EAAEC,MAAc,EAAe;IACzE,MAAMqD,SAAS,GAAG9H,aAAa,CAACwE,MAAM,CAAC1B,MAAM,CAAC,IAAI2B,MAAM,CAACR,MAAM;IAC/D,MAAM8D,eAAe,GAAGD,SAAS,GAC7B,IAAI,CAAC9E,oBAAoB,CAACwB,MAAM,CAAC1B,MAAgB,CAAC,CAACpC,YAAY,GAC/D,IAAI,CAACA,YAAY;IAErB,OAAOqH,eAAe,CAACpH,WAAW,CAAC6D,MAAM,CAAC1D,EAAE,CAAC;EAC/C;;EAEA;AACF;AACA;EACUiE,cAAcA,CAACP,MAAkB,EAA2B;IAClE;IACA,IAAIxE,aAAa,CAACwE,MAAM,CAAC1B,MAAM,CAAC,EAAE;MAAA,IAAAkF,eAAA;MAChC,MAAMC,SAAS,IAAAD,eAAA,GAAG,IAAI,CAACtF,KAAK,CACzBzB,GAAG,CAACuD,MAAM,CAAC1B,MAAM,CAAC,cAAAkF,eAAA,uBADHA,eAAA,CAEdtH,YAAY,CAACM,QAAQ,CAACwD,MAAM,CAAC1D,EAAE,CAAC;MAEpC,IAAImH,SAAS,IAAI,IAAI,EAAE;QACrB,OAAOA,SAAS;MAClB;IACF;IAEA,OAAO,IAAI,CAACvH,YAAY,CAACM,QAAQ,CAACwD,MAAM,CAAC1D,EAAE,CAAC;EAC9C;;EAEA;AACF;AACA;EACUuD,iBAAiBA,CAACzD,QAAgB,EAAQ;IAChD,IAAI,CAACF,YAAY,CAACQ,WAAW,CAACN,QAAQ,CAAC;EACzC;;EAEA;EACQoC,oBAAoBA,CAACF,MAAc,EAAa;IACtD,IAAIU,IAAI,GAAG,IAAI,CAACd,KAAK,CAACzB,GAAG,CAAC6B,MAAM,CAAC;IACjC,IAAIU,IAAI,IAAI,IAAI,EAAE;MAChB,OAAOA,IAAI;IACb;IAEAA,IAAI,GAAG,IAAIpB,SAAS,CAAC,CAAC;IACtB,IAAI,CAACM,KAAK,CAAC3B,GAAG,CAAC+B,MAAM,EAAEU,IAAI,CAAC;IAC5B,OAAOA,IAAI;EACb;;EAEA;EACO0E,mBAAmBA,CAAC7H,gBAA6B,EAAQ;IAC9D,IAAI,CAACiH,eAAe,CAACC,KAAK,IAAI;MAC5BA,KAAK,CAAClH,gBAAgB,GAAGA,gBAAgB;IAC3C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACS8H,eAAeA,CACpBrF,MAAc,EACdsF,iBAAoC,EAC9B;IACN,MAAM9H,aAAa,GAAG,IAAI,CAACqC,SAAS,CAACrC,aAAa,CAACW,GAAG,CAAC6B,MAAM,CAAC;IAC9D,IAAIxC,aAAa,KAAKwD,SAAS,EAAE;MAC/B,IAAI,CAACuE,gBAAgB,CAACvF,MAAM,EAAE,CAACsF,iBAAiB,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,MAAME,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAElI,aAAa,CAAC;MAC1DgI,iBAAiB,CAACtG,IAAI,CAACoG,iBAAiB,CAAC;MACzC,IAAI,CAACC,gBAAgB,CAACvF,MAAM,EAAEwF,iBAAiB,CAAC;IAClD;EACF;;EAEA;AACF;AACA;AACA;EACSG,kBAAkBA,CACvB3F,MAAc,EACdsF,iBAAoC,EAC9B;IACN,MAAM9H,aAAa,GAAG,IAAI,CAACqC,SAAS,CAACrC,aAAa,CAACW,GAAG,CAAC6B,MAAM,CAAC;IAC9D,IAAIxC,aAAa,KAAKwD,SAAS,EAAE;MAC/B,MAAMwE,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAElI,aAAa,CAAC;MAC1D,MAAMoI,KAAK,GAAGJ,iBAAiB,CAACK,OAAO,CAACP,iBAAiB,EAAE,CAAC,CAAC;MAC7D,IAAIM,KAAK,GAAG,CAAC,CAAC,EAAE;QACdJ,iBAAiB,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACpC;MACA,IAAI,CAACL,gBAAgB,CAACvF,MAAM,EAAEwF,iBAAiB,CAAC;IAClD;EACF;EAEQD,gBAAgBA,CACtBvF,MAAc,EACdxC,aAAuC,EACjC;IACN,IAAIA,aAAa,CAACyD,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM,IAAIT,KAAK,6BAAAC,MAAA,CACejD,aAAa,CAACyD,MAAM,oBAClD,CAAC;IACH;IAEA,IAAI,CAACuD,eAAe,CAACC,KAAK,IAAI;MAC5BA,KAAK,CAACjH,aAAa,CAACS,GAAG,CAAC+B,MAAM,EAAExC,aAAa,CAAC;IAChD,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACUgH,eAAeA,CAACuB,MAAyC,EAAQ;IACvE,MAAMC,OAAO,GAAGvJ,OAAO,CAAC,IAAI,CAACoD,SAAS,EAAEkG,MAAM,CAAC;IAC/C,IAAI,IAAI,CAAClG,SAAS,KAAKmG,OAAO,EAAE;MAC9B,IAAI,CAACnG,SAAS,GAAGmG,OAAO;MACxB,IAAI,CAACrG,KAAK,CAACsG,gBAAgB,CAAC,IAAI,CAACpG,SAAS,CAAC;IAC7C;EACF;;EAEA;AACF;AACA;AACA;EACSqG,eAAeA,CAACpB,SAAiB,EAAEpG,GAAW,EAAO;IAAA,IAAAyH,qBAAA;IAC1D,QAAAA,qBAAA,GAAO,IAAI,CAACrG,aAAa,CAAC3B,GAAG,CAAC2G,SAAS,CAAC,cAAAqB,qBAAA,uBAAjCA,qBAAA,CAAmChI,GAAG,CAACO,GAAG,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACS0H,eAAeA,CAACtB,SAAiB,EAAEpG,GAAW,EAAED,KAAU,EAAQ;IACvE,IAAI,CAAC,IAAI,CAACqB,aAAa,CAACnB,GAAG,CAACmG,SAAS,CAAC,EAAE;MACtC,IAAI,CAAChF,aAAa,CAAC7B,GAAG,CAAC6G,SAAS,EAAE,IAAIrH,GAAG,CAAc,CAAC,CAAC;IAC3D;;IAEA;IACA;IAAE,IAAI,CAACqC,aAAa,CAAC3B,GAAG,CAAC2G,SAAS,CAAC,CAAsB7G,GAAG,CAACS,GAAG,EAAED,KAAK,CAAC;EAC1E;;EAEA;AACF;AACA;AACA;AACA;EACSsG,kBAAkBA,CAACD,SAAiB,EAAEpG,GAAY,EAAQ;IAC/D,IAAIvB,kBAAkB,CAACuB,GAAG,CAAC,EAAE;MAAA,IAAA2H,sBAAA;MAC3B,CAAAA,sBAAA,OAAI,CAACvG,aAAa,CAAC3B,GAAG,CAAC2G,SAAS,CAAC,cAAAuB,sBAAA,uBAAjCA,sBAAA,CAAmChI,MAAM,CAACK,GAAG,CAAC;IAChD,CAAC,MAAM;MACL,IAAI,CAACoB,aAAa,CAACzB,MAAM,CAACyG,SAAS,CAAC;IACtC;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASzC,gBAAgBA,CAAC5D,KAAoB,EAAU;EACtD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,MAAM6H,UAAU,GAAG5J,IAAI,CAAC6J,QAAQ,CAACC,IAAI,CAAC/H,KAAK,CAAC,CAACgI,QAAQ,CAAC,CAAC;EACvD,IAAIC,MAAM,CAACC,aAAa,CAACL,UAAU,CAAC,EAAE;IACpC,OAAOA,UAAU;EACnB;EAEA,MAAM,IAAI9F,KAAK,UAAAC,MAAA,CACJhC,KAAK,gEAChB,CAAC;AACH"}