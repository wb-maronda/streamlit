{"version":3,"file":"FileUploadClient.js","names":["isEqual","v4","uuidv4","logWarning","Resolver","isValidFormId","FileUploadClient","constructor","props","sessionInfo","endpoints","formsWithPendingRequests","Map","pendingFormUploadsChanged","requestFileURLs","pendingFileURLsRequests","formsWithPendingRequestsChanged","uploadFile","widget","fileUploadUrl","file","onUploadProgress","cancelToken","offsetPendingRequestCount","formId","uploadFileUploaderFile","current","sessionId","finally","deleteFile","fileUrl","deleteFileAtURL","Promise","resolve","fetchFileURLs","files","resolver","requestId","set","promise","onFileURLsResponse","resp","id","responseId","get","errorMsg","reject","fileUrls","delete","getFormIdSet","Set","keys","offset","curCount","newCount","Error","prevWidgetIds","newWidgetIds"],"sources":["../src/FileUploadClient.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CancelToken } from \"axios\"\nimport isEqual from \"lodash/isEqual\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nimport { IFileURLs, IFileURLsResponse } from \"@streamlit/lib/src/proto\"\n\nimport { SessionInfo } from \"./SessionInfo\"\nimport { StreamlitEndpoints } from \"./StreamlitEndpoints\"\nimport { logWarning } from \"./util/log\"\nimport Resolver from \"./util/Resolver\"\nimport { isValidFormId } from \"./util/utils\"\n\n/** Common widget protobuf fields that are used by the FileUploadClient. */\ninterface WidgetInfo {\n  id: string\n  formId: string\n}\n\ninterface Props {\n  /** The app's SessionInfo instance. */\n  sessionInfo: SessionInfo\n  endpoints: StreamlitEndpoints\n  formsWithPendingRequestsChanged: (formIds: Set<string>) => void\n  requestFileURLs?: (requestId: string, files: File[]) => void\n}\n\n/**\n * Handles operations related to the widgets that require file uploading.\n */\nexport class FileUploadClient {\n  private readonly sessionInfo: SessionInfo\n\n  private readonly endpoints: StreamlitEndpoints\n\n  /**\n   * Map of <formId: number of outstanding requests>. Updated whenever\n   * a widget in a form creates are completes a request.\n   */\n  private readonly formsWithPendingRequests = new Map<string, number>()\n\n  /**\n   * Called when the set of forms that have pending file requests changes.\n   */\n  private readonly pendingFormUploadsChanged: (formIds: Set<string>) => void\n\n  /**\n   * Function to ask the app to request file URLs for getting/uploading/deleting\n   * files. Currently, this is only done by App.tsx via a BackMsg sent over the\n   * browser tab's websocket connection, but the FileUploadClient is\n   * indifferent to the exact mechanism used.\n   *\n   * Upon receiving the requested file URLs, the app should call this class'\n   * onFileURLsResponse method.\n   */\n  private readonly requestFileURLs?: (requestId: string, files: File[]) => void\n\n  /**\n   * A map from request ID (a uuidv4) to the Resolver that should resolve once\n   * the requested file URLs are received.\n   */\n  private readonly pendingFileURLsRequests = new Map<\n    string,\n    Resolver<IFileURLs[]>\n  >()\n\n  public constructor(props: Props) {\n    this.sessionInfo = props.sessionInfo\n    this.endpoints = props.endpoints\n    this.pendingFormUploadsChanged = props.formsWithPendingRequestsChanged\n    this.requestFileURLs = props.requestFileURLs\n  }\n\n  /**\n   * Upload a file to the given URL. It will be associated with this browser's\n   * sessionID.\n   *\n   * @param widget: the FileUploader widget that's doing the upload.\n   * @param fileUploadUrl: the URL to upload the file to.\n   * @param file: the files to upload.\n   * @param onUploadProgress: an optional function that will be called repeatedly with progress events during the upload.\n   * @param cancelToken: an optional axios CancelToken that can be used to cancel the in-progress upload.\n   *\n   * @return a Promise<number> that resolves with the file's unique ID, as assigned by the server.\n   */\n  public async uploadFile(\n    widget: WidgetInfo,\n    fileUploadUrl: string,\n    file: File,\n    onUploadProgress?: (progressEvent: any) => void,\n    cancelToken?: CancelToken\n  ): Promise<void> {\n    this.offsetPendingRequestCount(widget.formId, 1)\n    return this.endpoints\n      .uploadFileUploaderFile(\n        fileUploadUrl,\n        file,\n        this.sessionInfo.current.sessionId,\n        onUploadProgress,\n        cancelToken\n      )\n      .finally(() => this.offsetPendingRequestCount(widget.formId, -1))\n  }\n\n  /**\n   * Request that the file at the given URL is deleted.\n   * @param fileUrl: the URL of the file to delete.\n   */\n  public deleteFile(fileUrl: string): Promise<void> {\n    return this.endpoints.deleteFileAtURL\n      ? this.endpoints.deleteFileAtURL(\n          fileUrl,\n          this.sessionInfo.current.sessionId\n        )\n      : Promise.resolve()\n  }\n\n  /**\n   * Request that the app fetch URLs to upload/delete/get the given files. Once\n   * this is done, the app should call this class' onFileURLsResponse to\n   * signify completion.\n   *\n   * @param files: An array of files.\n   *\n   * @return a Promise<FileURLsResponse.IFileURLs[]> resolving to a list of\n   * URLs for uploading and deleting the given files.\n   */\n  public fetchFileURLs(files: File[]): Promise<IFileURLs[]> {\n    if (!this.requestFileURLs) {\n      return Promise.resolve([])\n    }\n\n    const resolver = new Resolver<IFileURLs[]>()\n\n    const requestId = uuidv4()\n    this.pendingFileURLsRequests.set(requestId, resolver)\n    this.requestFileURLs(requestId, files)\n\n    return resolver.promise\n  }\n\n  /**\n   * Callback to be called by the app once the file URLs corresponding to a\n   * call to this.requestFileURLs has been received.\n   *\n   * @param resp: the FileURLsResponse corresponding to a call to\n   * this.requestFileURLs.\n   */\n  public onFileURLsResponse(resp: IFileURLsResponse): void {\n    const id = resp.responseId as string\n    const resolver = this.pendingFileURLsRequests.get(id)\n    if (resolver) {\n      if (resp.errorMsg) {\n        resolver.reject(resp.errorMsg)\n      } else {\n        resolver.resolve(resp.fileUrls || [])\n      }\n      this.pendingFileURLsRequests.delete(id)\n    } else {\n      logWarning(\n        \"fileURLsResponse received for nonexistent request, ignoring.\"\n      )\n    }\n  }\n\n  private getFormIdSet(): Set<string> {\n    return new Set(this.formsWithPendingRequests.keys())\n  }\n\n  private offsetPendingRequestCount(formId: string, offset: number): void {\n    if (offset === 0) {\n      return\n    }\n\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    const curCount = this.formsWithPendingRequests.get(formId) ?? 0\n    const newCount = curCount + offset\n    if (newCount < 0) {\n      throw new Error(\n        `Can't offset pendingRequestCount below 0 (formId=${formId}, curCount=${curCount}, offset=${offset})`\n      )\n    }\n\n    const prevWidgetIds = this.getFormIdSet()\n\n    if (newCount === 0) {\n      this.formsWithPendingRequests.delete(formId)\n    } else {\n      this.formsWithPendingRequests.set(formId, newCount)\n    }\n\n    const newWidgetIds = this.getFormIdSet()\n    if (!isEqual(newWidgetIds, prevWidgetIds)) {\n      this.pendingFormUploadsChanged(newWidgetIds)\n    }\n  }\n}\n"],"mappings":"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"}