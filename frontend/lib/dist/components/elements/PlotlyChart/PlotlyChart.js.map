{"version":3,"file":"PlotlyChart.js","names":["React","useCallback","useEffect","useMemo","useState","useTheme","Plot","PlotlyChart","PlotlyChartProto","withFullScreenWrapper","keysToSnakeCase","notNullOrUndefined","FormClearHelper","applyStreamlitTheme","layoutWithThemeDefaults","replaceTemporaryColors","jsx","_jsx","MIN_WIDTH","FULLSCREEN_EXPAND_ICON","width","height","name","path","FULLSCREEN_COLLAPSE_ICON","parseLassoPath","pathData","x","y","points","replace","split","forEach","point","xVal","yVal","map","Number","push","parseBoxSelection","selection","hasRequiredFields","x0","x1","y0","y1","applyTheming","plotlyFigure","chartTheme","theme","spec","JSON","parse","stringify","layout","handleSelection","event","widgetMgr","element","fragmentId","selectionState","point_indices","box","lasso","selectedPointIndices","Set","selectedBoxes","selectedLassos","selectedPoints","selections","legendgroup","data","undefined","fullData","pointIndex","add","pointIndices","length","item","type","xAndy","returnSelection","xref","yref","Array","from","selectionMode","includes","SelectionMode","BOX","LASSO","currentSelectionState","getStringValue","newSelectionState","setStringValue","fromUi","sendEmptySelection","emptySelectionState","_ref","disabled","isFullScreen","expand","collapse","disableFullscreenMode","initialFigureSpec","frames","id","setPlotlyFigure","initialFigureState","getElementState","isSelectionActivated","isLassoSelectionActivated","isBoxSelectionActivated","isPointsSelectionActivated","POINTS","plotlyConfig","config","modeBarButtonsToAdd","icon","click","modeBarButtonsToRemove","displaylogo","prevState","updatedClickMode","clickmode","updatedHoverMode","hovermode","updatedDragMode","dragmode","calculatedWidth","Math","max","useContainerWidth","min","calculatedHeight","prevFigure","handleSelectionCallback","resetSelectionsCallback","resetSelectionInFigure","arguments","setTimeout","trace","selectedpoints","formId","formClearHelper","manageFormClearListener","disconnect","className","children","style","visibility","onSelected","onDoubleClick","onDeselect","onInitialized","figure","setElementState","onUpdate"],"sources":["../../../../src/components/elements/PlotlyChart/PlotlyChart.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport Plot, { Figure as PlotlyFigureType } from \"react-plotly.js\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { PlotlyChart as PlotlyChartProto } from \"@streamlit/lib/src/proto\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  keysToSnakeCase,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form/FormClearHelper\"\n\nimport {\n  applyStreamlitTheme,\n  layoutWithThemeDefaults,\n  replaceTemporaryColors,\n} from \"./CustomTheme\"\n\n// Copied and Pasted from Plotly type def\nexport interface SelectionRange {\n  x: number[]\n  y: number[]\n}\n\nexport interface PlotlySelection extends SelectionRange {\n  xref: string\n  yref: string\n}\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code. Uses snake case to be compatible with the\n// Python naming conventions.\nexport interface PlotlyWidgetState {\n  selection: {\n    points: Array<any>\n    point_indices: number[]\n    box: PlotlySelection[]\n    lasso: PlotlySelection[]\n  }\n}\n\n// Minimum width for Plotly charts\nconst MIN_WIDTH = 150\n\n// Custom icon used in the fullscreen expand toolbar button:\nconst FULLSCREEN_EXPAND_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-expand\",\n  // https://fontawesome.com/icons/expand?f=classic&s=solid\n  path: \"M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z\",\n}\n\nconst FULLSCREEN_COLLAPSE_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-collapse\",\n  // https://fontawesome.com/icons/compress?f=classic&s=solid\n  path: \"M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V64zM32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zM352 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V64zM320 320c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z\",\n}\n\n/**\n * Parses an SVG path string into separate x and y coordinates.\n *\n * The function takes a single SVG path string as input. This path string should start with 'M'\n * (move to command), followed by pairs of x and y coordinates separated by commas, and optionally\n * end with 'Z' to close the path. Each pair of coordinates is separated by 'L' (line to command).\n *\n * Example Input:\n * \"M4.016412414518674,8.071685352641575L4.020620725933719,7.8197516509841165Z\"\n *\n * Example Output:\n * {\n *   x: [4.016412414518674, 4.020620725933719],\n *   y: [8.071685352641575, 7.8197516509841165]\n * }\n *\n * @param {string} pathData - The SVG path string to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseLassoPath(pathData: string): SelectionRange {\n  if (pathData === \"\") {\n    return {\n      x: [],\n      y: [],\n    }\n  }\n  const points = pathData.replace(\"M\", \"\").replace(\"Z\", \"\").split(\"L\")\n\n  const x: number[] = []\n  const y: number[] = []\n\n  points.forEach(point => {\n    const [xVal, yVal] = point.split(\",\").map(Number)\n    x.push(xVal)\n    y.push(yVal)\n  })\n\n  return { x, y }\n}\n\n/**\n * Parses a box selection object into separate x and y coordinates.\n *\n * The function takes a box selection object as input. This object should contain the following\n * fields: x0, x1, y0, y1. These fields represent the x and y coordinates of the box selection\n * in the plotly chart.\n *\n * Example Input:\n * {\n *   x0: 0.1,\n *   x1: 0.2,\n *   y0: 0.3,\n *   y1: 0.4\n * }\n *\n * Example Output:\n * {\n *   x: [0.1, 0.2],\n *   y: [0.3, 0.4]\n * }\n *\n * @param {Object} selection - The box selection object to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseBoxSelection(selection: any): SelectionRange {\n  const hasRequiredFields =\n    \"x0\" in selection &&\n    \"x1\" in selection &&\n    \"y0\" in selection &&\n    \"y1\" in selection\n\n  if (!hasRequiredFields) {\n    return { x: [], y: [] }\n  }\n\n  const x: number[] = [selection.x0, selection.x1]\n  const y: number[] = [selection.y0, selection.y1]\n  return { x, y }\n}\n\n/**\n * Apply theming to the Plotly figure.\n *\n * @param plotlyFigure The Plotly figure to apply theming to\n * @param chartTheme The theme of the chart (streamlit or empty string)\n * @param theme The current theme of the app\n * @returns The Plotly figure with theming applied\n */\nexport function applyTheming(\n  plotlyFigure: PlotlyFigureType,\n  chartTheme: string,\n  theme: EmotionTheme\n): PlotlyFigureType {\n  const spec = JSON.parse(\n    replaceTemporaryColors(JSON.stringify(plotlyFigure), theme, chartTheme)\n  )\n  if (chartTheme === \"streamlit\") {\n    applyStreamlitTheme(spec, theme)\n  } else {\n    // Apply minor theming improvements to work better with Streamlit\n    spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n  }\n  return spec\n}\n\n/**\n * Handles the selection event from Plotly and sends the selection state to the backend.\n * The selection state is sent as a stringified JSON object.\n *\n * @param event The Plotly selection event\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function handleSelection(\n  event: Readonly<Plotly.PlotSelectionEvent>,\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  if (!event) {\n    return\n  }\n\n  const selectionState: PlotlyWidgetState = {\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  // Use a set for point indices since all numbers should be unique:\n  const selectedPointIndices = new Set<number>()\n  const selectedBoxes: PlotlySelection[] = []\n  const selectedLassos: PlotlySelection[] = []\n  const selectedPoints: Array<any> = []\n\n  // event.selections doesn't show up in the PlotSelectionEvent\n  // @ts-expect-error\n  const { selections, points } = event\n\n  if (points) {\n    points.forEach(function (point: any) {\n      selectedPoints.push({\n        ...point,\n        legendgroup: point.data.legendgroup || undefined,\n        // Remove data and full data as they have been deemed to be unnecessary data overhead\n        data: undefined,\n        fullData: undefined,\n      })\n      if (notNullOrUndefined(point.pointIndex)) {\n        selectedPointIndices.add(point.pointIndex)\n      }\n\n      // If pointIndices is present (e.g. selection on histogram chart),\n      // add all of them to the set\n      if (\n        notNullOrUndefined(point.pointIndices) &&\n        point.pointIndices.length > 0\n      ) {\n        point.pointIndices.forEach((item: number) =>\n          selectedPointIndices.add(item)\n        )\n      }\n    })\n  }\n\n  if (selections) {\n    selections.forEach((selection: any) => {\n      // box selection\n      if (selection.type === \"rect\") {\n        const xAndy = parseBoxSelection(selection)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedBoxes.push(returnSelection)\n      }\n      // lasso selection\n      if (selection.type === \"path\") {\n        const xAndy = parseLassoPath(selection.path)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedLassos.push(returnSelection)\n      }\n    })\n  }\n\n  selectionState.selection.point_indices = Array.from(selectedPointIndices)\n  selectionState.selection.points = selectedPoints.map((point: any) =>\n    keysToSnakeCase(point)\n  )\n\n  selectionState.selection.box = selectedBoxes\n  selectionState.selection.lasso = selectedLassos\n\n  if (\n    selectionState.selection.box.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  ) {\n    // If box selection is not activated, we don't want\n    // to send any box selection related updates to the frontend\n    return\n  }\n\n  if (\n    selectionState.selection.lasso.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  ) {\n    // If lasso selection is not activated, we don't want\n    // to send any lasso selection related updates to the frontend\n    return\n  }\n\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(selectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\n/**\n * Sends an empty selection state to the backend.\n * This is used to reset the selection state in the widget.\n *\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function sendEmptySelection(\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  const emptySelectionState: PlotlyWidgetState = {\n    // We use snake case here since this is the widget state\n    // that is sent and used in the backend. Therefore, it should\n    // conform with the Python naming conventions.\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(emptySelectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\nexport interface PlotlyChartProps {\n  width: number\n  element: PlotlyChartProto\n  height?: number\n  widgetMgr: WidgetStateManager\n  disabled: boolean\n  fragmentId?: string\n  isFullScreen: boolean\n  expand?: () => void\n  collapse?: () => void\n  disableFullscreenMode?: boolean\n}\n\nexport function PlotlyChart({\n  element,\n  width,\n  height,\n  widgetMgr,\n  disabled,\n  fragmentId,\n  isFullScreen,\n  expand,\n  collapse,\n  disableFullscreenMode,\n}: Readonly<PlotlyChartProps>): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  // Load the initial figure spec from the element message\n  const initialFigureSpec = useMemo<PlotlyFigureType>(() => {\n    if (!element.spec) {\n      return {\n        layout: {},\n        data: [],\n        frames: undefined,\n      }\n    }\n\n    return JSON.parse(element.spec)\n    // We want to reload the initialFigureSpec object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [element.id, element.spec])\n\n  const [plotlyFigure, setPlotlyFigure] = useState<PlotlyFigureType>(() => {\n    // If there was already a state with a figure using the same id,\n    // use that to recover the state. This happens in some situations\n    // where a component un-mounts and mounts again.\n    const initialFigureState = widgetMgr.getElementState(element.id, \"figure\")\n    if (initialFigureState) {\n      return initialFigureState\n    }\n    return applyTheming(initialFigureSpec, element.theme, theme)\n  })\n\n  const isSelectionActivated = element.selectionMode.length > 0 && !disabled\n  const isLassoSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  const isBoxSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  const isPointsSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.POINTS)\n\n  const plotlyConfig = useMemo(() => {\n    if (!element.config) {\n      // If there is no config, return an empty object\n      return {}\n    }\n\n    const config = JSON.parse(element.config)\n\n    // Customize the plotly toolbar:\n    if (!disableFullscreenMode) {\n      // Add a fullscreen button to the plotly toolbar:\n      config.modeBarButtonsToAdd = [\n        {\n          name: isFullScreen ? \"Close fullscreen\" : \"Fullscreen\",\n          icon: isFullScreen\n            ? FULLSCREEN_COLLAPSE_ICON\n            : FULLSCREEN_EXPAND_ICON,\n          click: () => {\n            if (isFullScreen && collapse) {\n              collapse()\n            } else if (expand) {\n              expand()\n            }\n          },\n        },\n        ...(config.modeBarButtonsToAdd ?? []),\n      ]\n    }\n\n    if (!config.modeBarButtonsToRemove) {\n      // Only modify the mode bar buttons if it's not already set\n      // in the config provided by the user.\n\n      // Hide the logo by default\n      config.displaylogo = false\n\n      const modeBarButtonsToRemove = [\"sendDataToCloud\"]\n\n      if (!isSelectionActivated) {\n        // Remove lasso & select buttons in read-only charts:\n        modeBarButtonsToRemove.push(\"lasso2d\", \"select2d\")\n      } else {\n        if (!isLassoSelectionActivated) {\n          // Remove the lasso button if lasso selection is not activated\n          modeBarButtonsToRemove.push(\"lasso2d\")\n        }\n\n        if (!isBoxSelectionActivated) {\n          // Remove the box select button if box selection is not activated\n          modeBarButtonsToRemove.push(\"select2d\")\n        }\n      }\n\n      config.modeBarButtonsToRemove = modeBarButtonsToRemove\n    }\n    return config\n    // We want to reload the plotlyConfig object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    element.config,\n    isFullScreen,\n    disableFullscreenMode,\n    isSelectionActivated,\n    isLassoSelectionActivated,\n    isBoxSelectionActivated,\n    collapse,\n    expand,\n  ])\n\n  useEffect(() => {\n    // If the theme changes, we need to reapply the theming to the figure\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      return applyTheming(prevState, element.theme, theme)\n    })\n  }, [element.id, theme, element.theme])\n\n  useEffect(() => {\n    let updatedClickMode: typeof initialFigureSpec.layout.clickmode =\n      initialFigureSpec.layout.clickmode\n    let updatedHoverMode: typeof initialFigureSpec.layout.hovermode =\n      initialFigureSpec.layout.hovermode\n    let updatedDragMode: typeof initialFigureSpec.layout.dragmode =\n      initialFigureSpec.layout.dragmode\n\n    if (disabled) {\n      updatedClickMode = \"none\"\n      updatedDragMode = \"pan\"\n    } else if (isSelectionActivated) {\n      if (!initialFigureSpec.layout.clickmode) {\n        // If the user has already set the clickmode, we don't want to override it here.\n        // Otherwise, we are selecting the best clickmode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // https://plotly.com/javascript/reference/layout/#layout-clickmode\n          // This allows single point selections and shift click to add / remove selections\n          updatedClickMode = \"event+select\"\n        } else {\n          // If points selection is not activated, we set the clickmode to none (no single item clicks)\n          updatedClickMode = \"none\"\n        }\n      }\n\n      if (!initialFigureSpec.layout.hovermode) {\n        // If the user has already set the hovermode, we don't want to override it here.\n        updatedHoverMode = \"closest\"\n      }\n\n      if (!initialFigureSpec.layout.dragmode) {\n        // If the user has already set the dragmode, we don't want to override it here.\n        // If not, we are selecting the best drag mode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // Pan drag mode has priority in case points selection is activated\n          updatedDragMode = \"pan\"\n        } else if (isBoxSelectionActivated) {\n          // Configure select (box selection) as the activated drag mode:\n          updatedDragMode = \"select\"\n        } else if (isLassoSelectionActivated) {\n          // Configure lasso (lasso selection) as the activated drag mode:\n          updatedDragMode = \"lasso\"\n        } else {\n          updatedDragMode = \"pan\"\n        }\n      }\n    }\n\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      if (\n        prevState.layout.clickmode === updatedClickMode &&\n        prevState.layout.hovermode === updatedHoverMode &&\n        prevState.layout.dragmode === updatedDragMode\n      ) {\n        // Nothing has changed, just return the previous state\n        return prevState\n      }\n\n      return {\n        ...prevState,\n        layout: {\n          ...prevState.layout,\n          clickmode: updatedClickMode,\n          hovermode: updatedHoverMode,\n          dragmode: updatedDragMode,\n        },\n      }\n    })\n    // We want to reload these options whenever the element id changes\n    // or the selection modes change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    isSelectionActivated,\n    isPointsSelectionActivated,\n    isBoxSelectionActivated,\n    isLassoSelectionActivated,\n    disabled,\n  ])\n\n  let calculatedWidth =\n    width === -1\n      ? // In some situations - e.g. initial loading of tabs - the width is set to -1\n        // before its able to determine the real width. We want to keep the previous\n        // width in this case.\n        plotlyFigure.layout?.width\n      : Math.max(\n          element.useContainerWidth\n            ? width\n            : Math.min(initialFigureSpec.layout.width ?? width, width),\n          // Apply a min width to prevent the chart running into issues with negative\n          // width values if the browser window is too small:\n          MIN_WIDTH\n        )\n\n  let calculatedHeight = initialFigureSpec.layout.height\n\n  if (isFullScreen) {\n    calculatedWidth = width\n    calculatedHeight = height\n  }\n\n  if (\n    plotlyFigure.layout.height !== calculatedHeight ||\n    plotlyFigure.layout.width !== calculatedWidth\n  ) {\n    // Update the figure with the new height and width (if they have changed)\n    setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n      return {\n        ...prevFigure,\n        layout: {\n          ...prevFigure.layout,\n          height: calculatedHeight,\n          width: calculatedWidth,\n        },\n      }\n    })\n  }\n\n  /**\n   * Callback to handle selections on the plotly chart.\n   */\n  const handleSelectionCallback = useCallback(\n    (event: Readonly<Plotly.PlotSelectionEvent>): void => {\n      handleSelection(event, widgetMgr, element, fragmentId)\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  /**\n   * Callback resets selections in the chart and\n   * sends out an empty selection state.\n   */\n  const resetSelectionsCallback = useCallback(\n    (resetSelectionInFigure = true): void => {\n      sendEmptySelection(widgetMgr, element, fragmentId)\n\n      if (resetSelectionInFigure) {\n        // We need to do this reset with a short timeout, because otherwise\n        // the onUpdate callback seems to overwrite the selection state\n        // that we set here. The timeout will make sure that this is executed\n        // after the onUpdate callback.\n        setTimeout(() => {\n          // Reset the selection info within the plotly figure\n          setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n            return {\n              ...prevFigure,\n              data: prevFigure.data.map((trace: any) => {\n                return {\n                  ...trace,\n                  // Set to null to clear the selection an empty\n                  // array here would still show everything as opaque\n                  selectedpoints: null,\n                }\n              }),\n              layout: {\n                ...prevFigure.layout,\n                // selections is not part of the plotly typing:\n                selections: [],\n              },\n            }\n          })\n        }, 50)\n      }\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  // This is required for the form clearing functionality:\n  useEffect(() => {\n    if (!element.formId || !isSelectionActivated) {\n      // We don't need the form clear functionality if its not in a form\n      // or if selections are not activated.\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    // On form clear, reset the selections (in chart & widget state)\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetSelectionsCallback\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [\n    element.formId,\n    widgetMgr,\n    isSelectionActivated,\n    resetSelectionsCallback,\n  ])\n\n  useEffect(() => {\n    if (!isSelectionActivated) {\n      return\n    }\n    // The point selection during the lasso or box selection seems\n    // to be a bit buggy. Sometimes, points gets unselected without\n    // triggering an onDeselect event.\n    // Therefore, we are deactivating the event+select clickmode\n    // if the dragmode is set to select or lasso.\n    let clickmode: \"event+select\" | \"event\" | \"none\"\n    if (\n      plotlyFigure.layout?.dragmode === \"select\" ||\n      plotlyFigure.layout?.dragmode === \"lasso\"\n    ) {\n      clickmode = \"event\"\n    } else {\n      // Reset to either none or event+select based on if points selection mode\n      // is activated or not.\n      clickmode = isPointsSelectionActivated ? \"event+select\" : \"none\"\n    }\n\n    if (plotlyFigure.layout?.clickmode !== clickmode) {\n      setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n        return {\n          ...prevFigure,\n          layout: {\n            ...prevFigure.layout,\n            clickmode: clickmode,\n          },\n        }\n      })\n    }\n    // We only want to trigger this effect if the dragmode changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plotlyFigure.layout?.dragmode])\n\n  return (\n    <div className=\"stPlotlyChart\" data-testid=\"stPlotlyChart\">\n      <Plot\n        key={isFullScreen ? \"fullscreen\" : \"original\"}\n        data={plotlyFigure.data}\n        layout={plotlyFigure.layout}\n        config={plotlyConfig}\n        frames={plotlyFigure.frames ?? undefined}\n        style={{\n          // Hide the plotly chart if the width is not defined yet\n          // to prevent flickering issues.\n          visibility:\n            plotlyFigure.layout?.width === undefined ? \"hidden\" : undefined,\n        }}\n        onSelected={isSelectionActivated ? handleSelectionCallback : () => {}}\n        // Double click is needed to make it easier to the user to\n        // reset the selection. The default handling can be a bit annoying\n        // sometimes.\n        onDoubleClick={\n          isSelectionActivated ? () => resetSelectionsCallback() : undefined\n        }\n        onDeselect={\n          isSelectionActivated\n            ? () => {\n                // Plotly is also resetting the UI state already for\n                // deselect events. So, we don't need to do it on our side.\n                // Thats why the flag is false.\n                resetSelectionsCallback(false)\n              }\n            : undefined\n        }\n        onInitialized={figure => {\n          widgetMgr.setElementState(element.id, \"figure\", figure)\n        }}\n        // Update the figure state on every change to the figure itself:\n        onUpdate={figure => {\n          // Save the updated figure state to allow it to be recovered\n          widgetMgr.setElementState(element.id, \"figure\", figure)\n          setPlotlyFigure(figure)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default withFullScreenWrapper(PlotlyChart, true)\n"],"mappings":"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"}