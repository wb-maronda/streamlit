{"version":3,"file":"TextElement.test.js","names":["React","fireEvent","screen","render","Text","TextProto","TextElement","jsx","_jsx","getProps","elementProps","arguments","length","undefined","element","create","body","width","describe","it","props","textElement","getByTestId","expect","toBeInTheDocument","getByText","toHaveClass","help","tooltip","mouseOver","helpText","findAllByText","textContent","toBe"],"sources":["../../../../src/components/elements/TextElement/TextElement.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport \"@testing-library/jest-dom\"\nimport { fireEvent, screen } from \"@testing-library/react\"\n\nimport { render } from \"@streamlit/lib/src/test_util\"\nimport { Text as TextProto } from \"@streamlit/lib/src/proto\"\n\nimport TextElement, { TextProps } from \"./TextElement\"\n\nconst getProps = (elementProps: Partial<TextProto> = {}): TextProps => ({\n  element: TextProto.create({\n    body: \"some plain text\",\n    ...elementProps,\n  }),\n  width: 100,\n})\n\ndescribe(\"TextElement element\", () => {\n  it(\"renders preformatted text as expected\", () => {\n    const props = getProps()\n    render(<TextElement {...props} />)\n\n    const textElement = screen.getByTestId(\"stText\")\n    expect(textElement).toBeInTheDocument()\n    expect(screen.getByText(\"some plain text\")).toBeInTheDocument()\n    expect(textElement).toHaveClass(\"stText\")\n  })\n\n  it(\"renders text with help tooltip\", async () => {\n    const props = getProps({ help: \"help text\" })\n    render(<TextElement {...props} />)\n    const tooltip = screen.getByTestId(\"stTooltipHoverTarget\")\n    expect(tooltip).toBeInTheDocument()\n    fireEvent.mouseOver(tooltip)\n\n    const helpText = await screen.findAllByText(\"help text\")\n    expect(helpText[0].textContent).toBe(\"help text\")\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,2BAA2B;AAClC,SAASC,SAAS,EAAEC,MAAM,QAAQ,wBAAwB;AAE1D,SAASC,MAAM;AACf,SAASC,IAAI,IAAIC,SAAS;AAE1B,OAAOC,WAAW;AAAoC,SAAAC,GAAA,IAAAC,IAAA;AAEtD,MAAMC,QAAQ,GAAG,SAAAA,CAAA;EAAA,IAACC,YAAgC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OAAiB;IACtEG,OAAO,EAAET,SAAS,CAACU,MAAM,CAAC;MACxBC,IAAI,EAAE,iBAAiB;MACvB,GAAGN;IACL,CAAC,CAAC;IACFO,KAAK,EAAE;EACT,CAAC;AAAA,CAAC;AAEFC,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EACpCC,EAAE,CAAC,uCAAuC,EAAE,MAAM;IAChD,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;IACxBN,MAAM,eAACK,IAAA,CAACF,WAAW;MAAA,GAAKc;IAAK,CAAG,CAAC,CAAC;IAElC,MAAMC,WAAW,GAAGnB,MAAM,CAACoB,WAAW,CAAC,QAAQ,CAAC;IAChDC,MAAM,CAACF,WAAW,CAAC,CAACG,iBAAiB,CAAC,CAAC;IACvCD,MAAM,CAACrB,MAAM,CAACuB,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;IAC/DD,MAAM,CAACF,WAAW,CAAC,CAACK,WAAW,CAAC,QAAQ,CAAC;EAC3C,CAAC,CAAC;EAEFP,EAAE,CAAC,gCAAgC,EAAE,YAAY;IAC/C,MAAMC,KAAK,GAAGX,QAAQ,CAAC;MAAEkB,IAAI,EAAE;IAAY,CAAC,CAAC;IAC7CxB,MAAM,eAACK,IAAA,CAACF,WAAW;MAAA,GAAKc;IAAK,CAAG,CAAC,CAAC;IAClC,MAAMQ,OAAO,GAAG1B,MAAM,CAACoB,WAAW,CAAC,sBAAsB,CAAC;IAC1DC,MAAM,CAACK,OAAO,CAAC,CAACJ,iBAAiB,CAAC,CAAC;IACnCvB,SAAS,CAAC4B,SAAS,CAACD,OAAO,CAAC;IAE5B,MAAME,QAAQ,GAAG,MAAM5B,MAAM,CAAC6B,aAAa,CAAC,WAAW,CAAC;IACxDR,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;EACnD,CAAC,CAAC;AACJ,CAAC,CAAC"}