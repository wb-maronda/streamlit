{"version":3,"file":"TextElement.test.js","names":["React","render","Text","TextProto","TextElement","fireEvent","screen","jsx","_jsx","getProps","elementProps","arguments","length","undefined","element","create","body","width","describe","it","props","expect","getByText","toBeInTheDocument","help","tooltip","getByTestId","mouseOver","helpText","findAllByText","textContent","toBe"],"sources":["../../../../src/components/elements/TextElement/TextElement.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { render } from \"@streamlit/lib/src/test_util\"\nimport { Text as TextProto } from \"@streamlit/lib/src/proto\"\nimport TextElement, { TextProps } from \"./TextElement\"\nimport \"@testing-library/jest-dom\"\nimport { fireEvent, screen } from \"@testing-library/react\"\n\nconst getProps = (elementProps: Partial<TextProto> = {}): TextProps => ({\n  element: TextProto.create({\n    body: \"some plain text\",\n    ...elementProps,\n  }),\n  width: 100,\n})\n\ndescribe(\"TextElement element\", () => {\n  it(\"renders preformatted text as expected\", () => {\n    const props = getProps()\n    render(<TextElement {...props} />)\n    expect(screen.getByText(\"some plain text\")).toBeInTheDocument()\n  })\n\n  it(\"renders text with help tooltip\", async () => {\n    const props = getProps({ help: \"help text\" })\n    render(<TextElement {...props} />)\n    const tooltip = screen.getByTestId(\"stTooltipHoverTarget\")\n    expect(tooltip).toBeInTheDocument()\n    fireEvent.mouseOver(tooltip)\n\n    const helpText = await screen.findAllByText(\"help text\")\n    expect(helpText[0].textContent).toBe(\"help text\")\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM;AACf,SAASC,IAAI,IAAIC,SAAS;AAC1B,OAAOC,WAAW;AAClB,OAAO,2BAA2B;AAClC,SAASC,SAAS,EAAEC,MAAM,QAAQ,wBAAwB;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAE1D,MAAMC,QAAQ,GAAG,SAAAA,CAAA;EAAA,IAACC,YAAgC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OAAiB;IACtEG,OAAO,EAAEX,SAAS,CAACY,MAAM,CAAC;MACxBC,IAAI,EAAE,iBAAiB;MACvB,GAAGN;IACL,CAAC,CAAC;IACFO,KAAK,EAAE;EACT,CAAC;AAAA,CAAC;AAEFC,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EACpCC,EAAE,CAAC,uCAAuC,EAAE,MAAM;IAChD,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;IACxBR,MAAM,eAACO,IAAA,CAACJ,WAAW;MAAA,GAAKgB;IAAK,CAAG,CAAC,CAAC;IAClCC,MAAM,CAACf,MAAM,CAACgB,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACjE,CAAC,CAAC;EAEFJ,EAAE,CAAC,gCAAgC,EAAE,YAAY;IAC/C,MAAMC,KAAK,GAAGX,QAAQ,CAAC;MAAEe,IAAI,EAAE;IAAY,CAAC,CAAC;IAC7CvB,MAAM,eAACO,IAAA,CAACJ,WAAW;MAAA,GAAKgB;IAAK,CAAG,CAAC,CAAC;IAClC,MAAMK,OAAO,GAAGnB,MAAM,CAACoB,WAAW,CAAC,sBAAsB,CAAC;IAC1DL,MAAM,CAACI,OAAO,CAAC,CAACF,iBAAiB,CAAC,CAAC;IACnClB,SAAS,CAACsB,SAAS,CAACF,OAAO,CAAC;IAE5B,MAAMG,QAAQ,GAAG,MAAMtB,MAAM,CAACuB,aAAa,CAAC,WAAW,CAAC;IACxDR,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;EACnD,CAAC,CAAC;AACJ,CAAC,CAAC"}