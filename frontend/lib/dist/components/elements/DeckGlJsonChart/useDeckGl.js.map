{"version":3,"file":"useDeckGl.js","names":["useCallback","useEffect","useMemo","useState","JSON5","isEqual","parseToRgba","useStWidthHeight","useBasicWidgetClientState","jsonConverter","getContextualFillColor","LAYER_TYPE_TO_FILL_FUNCTION","DEFAULT_DECK_GL_HEIGHT","EMPTY_STATE","selection","indices","objects","interpolate","info","body","matchedVariables","match","forEach","variable","substring","length","object","hasOwnProperty","replace","properties","getDefaultState","widgetMgr","element","id","initialFigureState","getElementState","getStateFromWidgetMgr","stringValue","getStringValue","currState","parse","updateWidgetMgrState","vws","fragmentId","setStringValue","JSON","stringify","value","fromUi","useDeckGl","props","height","propsHeight","isFullScreen","propsIsFullScreen","isLightTheme","theme","width","propsWidth","selectionMode","allSelectionModes","tooltip","useContainerWidth","shouldUseContainerWidth","data","setSelection","viewState","setViewState","bearing","pitch","zoom","container","heightFallback","initialViewState","setInitialViewState","isSelectionModeActivated","undefined","hasActiveSelection","Object","keys","parsedPydeckJson","freeze","json","deck","copy","mapStyle","assign","layers","anyLayersHaveSelection","values","some","layer","anyLayersHavePickableDefined","hasOwn","map","Array","isArray","pickable","layerId","selectedIndices","fillFunctions","clonedLayer","fillFunction","updateTriggers","shouldUseOriginalFillFunction","originalFillFunction","selectedColor","colors","primary","unselectedColor","gray20","newFillFunction","objectInfo","isSelected","includes","index","views","convert","diff","reduce","key","createTooltip","parsedTooltip","html","text","onViewStateChange","_ref"],"sources":["../../../../src/components/elements/DeckGlJsonChart/useDeckGl.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport JSON5 from \"json5\"\nimport { PickingInfo } from \"@deck.gl/core/typed\"\nimport isEqual from \"lodash/isEqual\"\nimport { ViewStateChangeParameters } from \"@deck.gl/core/typed/controllers/controller\"\nimport { TooltipContent } from \"@deck.gl/core/typed/lib/tooltip\"\nimport { parseToRgba } from \"color2k\"\n\nimport { useStWidthHeight } from \"@streamlit/lib/src/hooks/useStWidthHeight\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport {\n  useBasicWidgetClientState,\n  ValueWSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nimport type {\n  DeckGlElementState,\n  DeckGLProps,\n  DeckObject,\n  ParsedDeckGlConfig,\n} from \"./types\"\nimport { jsonConverter } from \"./utils/jsonConverter\"\nimport {\n  FillFunction,\n  getContextualFillColor,\n  LAYER_TYPE_TO_FILL_FUNCTION,\n} from \"./utils/colors\"\n\ntype UseDeckGlShape = {\n  createTooltip: (info: PickingInfo | null) => TooltipContent\n  data: DeckGlElementState\n  deck: DeckObject\n  hasActiveSelection: boolean\n  height: number | string\n  isSelectionModeActivated: boolean\n  onViewStateChange: (params: ViewStateChangeParameters) => void\n  selectionMode: DeckGlJsonChartProto.SelectionMode | undefined\n  setSelection: React.Dispatch<\n    React.SetStateAction<ValueWSource<DeckGlElementState> | null>\n  >\n  viewState: Record<string, unknown>\n  width: number | string\n}\n\nexport type UseDeckGlProps = Omit<DeckGLProps, \"mapboxToken\"> & {\n  isLightTheme: boolean\n  theme: EmotionTheme\n}\n\nconst DEFAULT_DECK_GL_HEIGHT = 500\n\nexport const EMPTY_STATE: DeckGlElementState = {\n  selection: {\n    indices: {},\n    objects: {},\n  },\n}\n\n/**\n * Interpolates variables within a string using values from a PickingInfo object.\n *\n * This function searches for placeholders in the format `{variable}` within the provided\n * string `body` and replaces them with corresponding values from the `info` object.\n * It first checks if the variable exists directly on `info.object`, and if not, it checks\n * within `info.object.properties`.\n *\n * @param {PickingInfo} info - The object containing the data to interpolate into the string.\n * @param {string} body - The string containing placeholders in the format `{variable}`.\n * @returns {string} - The interpolated string with placeholders replaced by actual values.\n */\nconst interpolate = (info: PickingInfo, body: string): string => {\n  const matchedVariables = body.match(/{(.*?)}/g)\n  if (matchedVariables) {\n    matchedVariables.forEach((match: string) => {\n      const variable = match.substring(1, match.length - 1)\n\n      if (info.object.hasOwnProperty(variable)) {\n        body = body.replace(match, info.object[variable])\n      } else if (\n        info.object.hasOwnProperty(\"properties\") &&\n        info.object.properties.hasOwnProperty(variable)\n      ) {\n        body = body.replace(match, info.object.properties[variable])\n      }\n    })\n  }\n  return body\n}\n\nfunction getDefaultState(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const initialFigureState = widgetMgr.getElementState(element.id, \"selection\")\n\n  return initialFigureState ?? EMPTY_STATE\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const stringValue = widgetMgr.getStringValue(element)\n  const currState: DeckGlElementState | null = stringValue\n    ? JSON5.parse(stringValue)\n    : null\n\n  return currState ?? EMPTY_STATE\n}\n\nfunction updateWidgetMgrState(\n  element: DeckGlJsonChartProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWSource<DeckGlElementState>,\n  fragmentId?: string\n): void {\n  if (!element.id) {\n    return\n  }\n\n  widgetMgr.setStringValue(\n    element,\n    JSON.stringify(vws.value),\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nexport const useDeckGl = (props: UseDeckGlProps): UseDeckGlShape => {\n  const {\n    element,\n    fragmentId,\n    height: propsHeight,\n    isFullScreen: propsIsFullScreen,\n    isLightTheme,\n    theme,\n    widgetMgr,\n    width: propsWidth,\n  } = props\n  const {\n    selectionMode: allSelectionModes,\n    tooltip,\n    useContainerWidth: shouldUseContainerWidth,\n  } = element\n  const isFullScreen = propsIsFullScreen ?? false\n\n  const [data, setSelection] = useBasicWidgetClientState<\n    DeckGlElementState,\n    DeckGlJsonChartProto\n  >({\n    element,\n    getDefaultState,\n    getStateFromWidgetMgr,\n    updateWidgetMgrState,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const [viewState, setViewState] = useState<Record<string, unknown>>({\n    bearing: 0,\n    pitch: 0,\n    zoom: 11,\n  })\n\n  const { height, width } = useStWidthHeight({\n    element,\n    isFullScreen,\n    shouldUseContainerWidth,\n    container: { height: propsHeight, width: propsWidth },\n    heightFallback:\n      (viewState.initialViewState as { height: number } | undefined)?.height ||\n      DEFAULT_DECK_GL_HEIGHT,\n  })\n\n  const [initialViewState, setInitialViewState] = useState<\n    Record<string, unknown>\n  >({})\n\n  /**\n   * Our proto for selectionMode is an array in order to support future-looking\n   * functionality. Currently, we only support 1 single selection mode, so we'll\n   * only use the first one (if it exists) to determine our selection mode.\n   *\n   * @see deck_gl_json_chart.py #parse_selection_mode\n   */\n  const selectionMode: DeckGlJsonChartProto.SelectionMode | undefined =\n    allSelectionModes[0]\n  const isSelectionModeActivated = selectionMode !== undefined\n\n  const hasActiveSelection =\n    isSelectionModeActivated && Object.keys(data.selection.indices).length > 0\n\n  const parsedPydeckJson = useMemo(() => {\n    return Object.freeze(JSON5.parse<ParsedDeckGlConfig>(element.json))\n    // Only parse JSON when transitioning to/from fullscreen, the json changes, or theme changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen, isLightTheme, element.json])\n\n  const deck = useMemo<DeckObject>(() => {\n    const copy = { ...parsedPydeckJson }\n\n    // If unset, use either the Mapbox light or dark style based on Streamlit's theme\n    // For Mapbox styles, see https://docs.mapbox.com/api/maps/styles/#mapbox-styles\n    if (!copy.mapStyle) {\n      copy.mapStyle = `mapbox://styles/mapbox/${\n        isLightTheme ? \"light\" : \"dark\"\n      }-v9`\n    }\n\n    // Set width and height based on the fullscreen state\n    if (isFullScreen) {\n      Object.assign(copy.initialViewState, { width, height })\n    } else {\n      if (!copy.initialViewState.height) {\n        copy.initialViewState.height = DEFAULT_DECK_GL_HEIGHT\n      }\n      if (shouldUseContainerWidth) {\n        copy.initialViewState.width = width\n      }\n    }\n\n    if (copy.layers) {\n      const anyLayersHaveSelection = Object.values(\n        data.selection.indices\n      ).some(layer => layer?.length)\n\n      const anyLayersHavePickableDefined = copy.layers.some(layer =>\n        Object.hasOwn(layer, \"pickable\")\n      )\n\n      copy.layers = copy.layers.map(layer => {\n        if (\n          !layer ||\n          Array.isArray(layer) ||\n          // If selection mode is not activated, do not make any additional changes to each layer\n          !isSelectionModeActivated\n        ) {\n          return layer\n        }\n\n        if (!anyLayersHavePickableDefined) {\n          // If selection mode is activated and no layers have pickable defined,\n          // set pickable to true for every layer. This is something Streamlit\n          // does to help make map selection easier to work with out of the box.\n          layer.pickable = true\n        }\n\n        const layerId = `${layer.id || null}`\n        const selectedIndices = data?.selection?.indices?.[layerId] || []\n\n        const fillFunctions = LAYER_TYPE_TO_FILL_FUNCTION[layer[\"@@type\"]]\n\n        if (!fillFunctions) {\n          return layer\n        }\n\n        const clonedLayer = { ...layer }\n        fillFunctions.forEach(fillFunction => {\n          clonedLayer.updateTriggers = {\n            // Tell Deck.gl to recompute the fill color when the selection changes.\n            // Without this, objects in layers will have stale colors when selection changes.\n            // @see https://deck.gl/docs/api-reference/core/layer#updatetriggers\n            [fillFunction]: [\n              ...(clonedLayer.updateTriggers?.[fillFunction] || []),\n              selectedIndices,\n              anyLayersHaveSelection,\n            ],\n          }\n\n          const shouldUseOriginalFillFunction = !anyLayersHaveSelection\n\n          if (shouldUseOriginalFillFunction) {\n            // If we aren't changing the fill color, we don't need to change the fillFunction\n            return clonedLayer\n          }\n\n          const originalFillFunction = layer[fillFunction] as\n            | FillFunction\n            | undefined\n\n          // Fallback colors in case there are issues while parsing the colors for a given object\n          const selectedColor = parseToRgba(theme.colors.primary)\n          const unselectedColor = parseToRgba(theme.colors.gray20)\n\n          const newFillFunction: FillFunction = (object, objectInfo) => {\n            return getContextualFillColor({\n              isSelected: selectedIndices.includes(objectInfo.index),\n              object,\n              objectInfo,\n              originalFillFunction,\n              selectedColor,\n              unselectedColor,\n            })\n          }\n\n          clonedLayer[fillFunction] = newFillFunction\n        })\n\n        return clonedLayer\n      })\n    }\n\n    delete copy?.views // We are not using views. This avoids a console warning.\n\n    return jsonConverter.convert(copy)\n  }, [\n    data.selection.indices,\n    height,\n    isFullScreen,\n    isLightTheme,\n    isSelectionModeActivated,\n    parsedPydeckJson,\n    shouldUseContainerWidth,\n    theme.colors.gray20,\n    theme.colors.primary,\n    width,\n  ])\n\n  useEffect(() => {\n    // If the ViewState on the server has changed, apply the diff to the current state\n    if (!isEqual(deck.initialViewState, initialViewState)) {\n      const diff = Object.keys(deck.initialViewState).reduce(\n        (diff, key): any => {\n          // @ts-expect-error\n          if (deck.initialViewState[key] === initialViewState[key]) {\n            return diff\n          }\n\n          return {\n            ...diff,\n            // @ts-expect-error\n            [key]: deck.initialViewState[key],\n          }\n        },\n        {}\n      )\n\n      setViewState({ ...viewState, ...diff })\n      setInitialViewState(deck.initialViewState)\n    }\n  }, [deck.initialViewState, initialViewState, viewState])\n\n  const createTooltip = useCallback(\n    (info: PickingInfo | null): TooltipContent => {\n      if (!info || !info.object || !tooltip) {\n        return null\n      }\n\n      const parsedTooltip = JSON5.parse(tooltip)\n\n      if (parsedTooltip.html) {\n        parsedTooltip.html = interpolate(info, parsedTooltip.html)\n      } else {\n        parsedTooltip.text = interpolate(info, parsedTooltip.text)\n      }\n\n      return parsedTooltip\n    },\n    [tooltip]\n  )\n\n  const onViewStateChange = useCallback(\n    ({ viewState }: ViewStateChangeParameters) => {\n      setViewState(viewState)\n    },\n    [setViewState]\n  )\n\n  return {\n    createTooltip,\n    data,\n    deck,\n    hasActiveSelection,\n    height,\n    isSelectionModeActivated,\n    onViewStateChange,\n    selectionMode,\n    setSelection,\n    viewState,\n    width,\n  }\n}\n"],"mappings":"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"}