{"version":3,"file":"colors.js","names":["layers","geoLayers","meshLayers","jsonConverter","LAYER_TYPE_TO_FILL_FUNCTION","GeohashLayer","layerName","H3ClusterLayer","H3HexagonLayer","MVTLayer","QuadkeyLayer","S2Layer","TripsLayer","ArcLayer","ColumnLayer","GeoJsonLayer","IconLayer","LineLayer","PathLayer","PointCloudLayer","PolygonLayer","ScatterplotLayer","SolidPolygonLayer","TextLayer","ScenegraphLayer","SimpleMeshLayer","getOriginalColor","_ref","object","objectInfo","originalFillFunction","originalColor","Array","isArray","startsWith","evaluated","convert","getOriginalColorWithAppliedOpacity","_ref2","isSelected","opacity","calculatedOpacity","Math","max","min","getContextualFillColor","_ref3","selectedColor","selectedOpacity","unselectedColor","unselectedOpacity","floor"],"sources":["../../../../../src/components/elements/DeckGlJsonChart/utils/colors.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as layers from \"@deck.gl/layers/typed\"\nimport * as geoLayers from \"@deck.gl/geo-layers/typed\"\nimport * as meshLayers from \"@deck.gl/mesh-layers/typed\"\n\nimport { jsonConverter } from \"./jsonConverter\"\n\n/**\n * @file Utilities for determining fill colors for layers based on their\n *      selection state and the layer's selection color mode.\n */\n\n/**\n * Maps the \"@@type\" of a layer to the corresponding fill functions.\n *\n * Note that this mapping is not exhaustive and only includes the layers that we\n * can actually change the color of.\n */\nexport const LAYER_TYPE_TO_FILL_FUNCTION = {\n  [geoLayers.GeohashLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3ClusterLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3HexagonLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.MVTLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.QuadkeyLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.S2Layer.layerName]: [\"getFillColor\"],\n  [geoLayers.TripsLayer.layerName]: [\"getColor\"],\n  [layers.ArcLayer.layerName]: [\"getTargetColor\", \"getSourceColor\"],\n  [layers.ColumnLayer.layerName]: [\"getFillColor\"],\n  [layers.GeoJsonLayer.layerName]: [\"getFillColor\"],\n  [layers.IconLayer.layerName]: [\"getColor\"],\n  [layers.LineLayer.layerName]: [\"getColor\"],\n  [layers.PathLayer.layerName]: [\"getColor\"],\n  [layers.PointCloudLayer.layerName]: [\"getColor\"],\n  [layers.PolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.ScatterplotLayer.layerName]: [\"getFillColor\"],\n  [layers.SolidPolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.TextLayer.layerName]: [\"getColor\"],\n  [meshLayers.ScenegraphLayer.layerName]: [\"getColor\"],\n  [meshLayers.SimpleMeshLayer.layerName]: [\"getColor\"],\n}\n\ntype SerializedColorValue = string | number\nexport type SerializedColorArray = [\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?\n]\n\ntype ObjectCallbackShape<T = unknown> = {\n  object: T\n  objectInfo: { index: number }\n}\n\nexport type FillFunction<T = unknown> = (\n  object: ObjectCallbackShape<T>[\"object\"],\n  objectInfo: ObjectCallbackShape<T>[\"objectInfo\"]\n) => SerializedColorArray | SerializedColorValue\n\ntype FillFunctionArgs<T = unknown> = ObjectCallbackShape<T> & {\n  originalFillFunction: FillFunction<T> | undefined\n}\n\n/**\n * Retrieves the original color in a standardized format by evaluating functions\n * if necessary.\n */\nconst getOriginalColor = ({\n  object,\n  objectInfo,\n  originalFillFunction,\n}: FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor =\n    typeof originalFillFunction === \"function\"\n      ? originalFillFunction(object, objectInfo)\n      : originalFillFunction\n\n  if (Array.isArray(originalColor)) {\n    return [\n      originalColor[0] || 0,\n      originalColor[1] || 0,\n      originalColor[2] || 0,\n      originalColor[3] || 255,\n    ]\n  }\n\n  if (typeof originalColor === \"string\" && originalColor.startsWith(\"@@=\")) {\n    // @see https://deck.gl/docs/api-reference/json/conversion-reference#functions-and-using-the--prefix\n\n    const evaluated = jsonConverter\n      .convert({ originalColor })\n      .originalColor(object)\n\n    return [\n      evaluated[0] || 0,\n      evaluated[1] || 0,\n      evaluated[2] || 0,\n      evaluated[3] || 255,\n    ]\n  }\n\n  return null\n}\n\n/**\n * Calculates the original color with the applied opacity based on the selection\n * mode.\n *\n * @param {boolean} isSelected - Indicates if the object is selected.\n * @param {number} opacity - The opacity to apply.\n * @param {object} object - The object for which the color is being calculated.\n * @param {object} objectInfo - Additional information about the object.\n * @param {Function} originalFillFunction - The function to get the original\n * fill color.\n * @returns {SerializedColorArray | null} The color with the applied opacity or\n * null if the original color is not available.\n */\nconst getOriginalColorWithAppliedOpacity = ({\n  isSelected,\n  object,\n  objectInfo,\n  opacity,\n  originalFillFunction,\n}: {\n  isSelected: boolean\n  opacity: number\n} & FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor = getOriginalColor({\n    object,\n    objectInfo,\n    originalFillFunction,\n  })\n\n  if (!originalColor) {\n    return null\n  }\n\n  let calculatedOpacity = 0\n\n  if (isSelected) {\n    // Some layers will have objects where the opacity is lower than the default\n    // selected opacity In this case, we want to use the higher opacity so that\n    // the differentiation between selected and unselected objects is more\n    // pronounced\n    calculatedOpacity = Math.max(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  } else {\n    // Some layers will have objects where the opacity is lower than the default\n    // unselected opacity In this case, we want to use the lower opacity so that\n    // we aren't raising the visibility of objects unnecessarily\n    calculatedOpacity = Math.min(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  }\n\n  return [\n    originalColor[0] || 0,\n    originalColor[1] || 0,\n    originalColor[2] || 0,\n    calculatedOpacity,\n  ]\n}\n\n/**\n * Determines the fill color for an object based on its selection state and the\n * layer's selection color mode.\n */\nexport const getContextualFillColor = ({\n  isSelected,\n  object,\n  objectInfo,\n  originalFillFunction,\n  selectedColor,\n  selectedOpacity = 255,\n  unselectedColor,\n  unselectedOpacity = Math.floor(255 * 0.4),\n}: {\n  isSelected: boolean\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  selectedColor: SerializedColorArray\n  /** How much opacity should be applied to the selected item. Defaults to 100% */\n  selectedOpacity?: number\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  unselectedColor: SerializedColorArray\n  /** How much opacity should be applied to the not selected items. Defaults to 40% */\n  unselectedOpacity?: number\n} & FillFunctionArgs): SerializedColorArray | SerializedColorValue => {\n  if (isSelected) {\n    return (\n      getOriginalColorWithAppliedOpacity({\n        opacity: selectedOpacity,\n        isSelected: true,\n        object,\n        objectInfo,\n        originalFillFunction,\n      }) || selectedColor\n    )\n  }\n\n  return (\n    getOriginalColorWithAppliedOpacity({\n      opacity: unselectedOpacity,\n      isSelected: false,\n      object,\n      objectInfo,\n      originalFillFunction,\n    }) || unselectedColor\n  )\n}\n"],"mappings":"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"}