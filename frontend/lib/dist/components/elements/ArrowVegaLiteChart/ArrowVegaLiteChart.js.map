{"version":3,"file":"ArrowVegaLiteChart.js","names":["React","PureComponent","withTheme","embed","vega","expressionInterpreter","isEqual","debounce","isNullOrUndefined","notNullOrUndefined","logMessage","logWarning","withFullScreenWrapper","ensureError","FormClearHelper","dataIsAnAppendOfPrev","getDataArray","getDataArrays","getDataSets","getInlineData","applyStreamlitTheme","applyThemeDefaults","StyledVegaLiteChartContainer","jsx","_jsx","DEFAULT_DATA_NAME","BOTTOM_PADDING","DEBOUNCE_TIME_MS","prepareSpecForSelections","spec","params","forEach","param","includes","select","type","encodings","Object","keys","encoding","ArrowVegaLiteChart","constructor","arguments","vegaView","vegaFinalizer","defaultDataName","element","formClearHelper","state","error","undefined","finalizeView","generateSpec","el","theme","isFullScreen","width","height","props","JSON","parse","useContainerWidth","vegaLiteTheme","config","usermeta","embedOptions","vconcat","child","padding","bottom","datasets","Error","selectionMode","length","maybeConfigureSelections","widgetMgr","id","viewState","getElementState","setState","e","_index","addSignalListener","name","value","getState","data","_operator","some","mode","recurse","setElementState","processedSelection","vlPoint","or","currentWidgetState","getStringValue","updatedSelections","selection","setStringValue","stringify","fromUi","fragmentId","reset","emptySelectionState","currentWidgetStateStr","formId","manageFormClearListener","componentDidMount","createView","componentWillUnmount","componentDidUpdate","prevProps","prevElement","prevTheme","prevSpec","prevData","updateData","prevDataSets","dataSets","dataset","entries","datasetName","prevDataset","hasOwnProperty","resize","runAsync","numRows","remove","truthy","insert","dataRows","prevNumRows","dataColumns","prevNumCols","dimensions","numCols","options","ast","expr","tooltip","disableDefaultStyle","defaultStyle","forceActionsMenu","vgSpec","view","finalize","datasetNames","dataObj","render","className","ref","c"],"sources":["../../../../src/components/elements/ArrowVegaLiteChart/ArrowVegaLiteChart.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport embed from \"vega-embed\"\nimport * as vega from \"vega\"\nimport { SignalValue } from \"vega\"\nimport { expressionInterpreter } from \"vega-interpreter\"\nimport isEqual from \"lodash/isEqual\"\n\nimport {\n  debounce,\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { logMessage, logWarning } from \"@streamlit/lib/src/util/log\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\n\nimport \"@streamlit/lib/src/assets/css/vega-embed.css\"\nimport \"@streamlit/lib/src/assets/css/vega-tooltip.css\"\n\nimport {\n  dataIsAnAppendOfPrev,\n  getDataArray,\n  getDataArrays,\n  getDataSets,\n  getInlineData,\n  VegaLiteChartElement,\n} from \"./arrowUtils\"\nimport { applyStreamlitTheme, applyThemeDefaults } from \"./CustomTheme\"\nimport { StyledVegaLiteChartContainer } from \"./styled-components\"\n\nconst DEFAULT_DATA_NAME = \"source\"\n\n/**\n * Fix bug where Vega Lite was vertically-cropping the x-axis in some cases.\n */\nconst BOTTOM_PADDING = 20\n\n/**\n * Debounce time for triggering a widget state update\n * This prevents to rapid updates to the widget state.\n */\nconst DEBOUNCE_TIME_MS = 150\n\n/** This is the state that is sent to the backend\n * This needs to be the same structure that is also defined\n * in the Python code.\n */\nexport interface VegaLiteState {\n  selection: Record<string, any>\n}\n\ninterface Props {\n  element: VegaLiteChartElement\n  theme: EmotionTheme\n  width: number\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\nexport interface PropsWithFullScreen extends Props {\n  height?: number\n  isFullScreen: boolean\n}\n\ninterface State {\n  error?: Error\n}\n\n/**\n * Prepares the vega-lite spec for selections by transforming the select parameters\n * to a full object specification and by automatically adding encodings (if missing)\n * to point selections.\n *\n * The changes are applied in-place to the spec object.\n *\n * @param spec The Vega-Lite specification of the chart.\n */\nexport function prepareSpecForSelections(spec: any): void {\n  if (\"params\" in spec && \"encoding\" in spec) {\n    spec.params.forEach((param: any) => {\n      if (!(\"select\" in param)) {\n        // We are only interested in transforming select parameters.\n        // Other parameters are skipped.\n        return\n      }\n\n      if ([\"interval\", \"point\"].includes(param.select)) {\n        // The select object can be either a single string (short-hand) specifying\n        // \"interval\" or \"point\" or an object that can contain additional\n        // properties as defined here: https://vega.github.io/vega-lite/docs/selection.html\n        // We convert the short-hand notation to the full object specification,\n        // so that we can attach additional properties to this below.\n        param.select = {\n          type: param.select,\n        }\n      }\n\n      if (!(\"type\" in param.select)) {\n        // The type property is required in the spec.\n        // But we check anyways and skip all parameters that don't have it.\n        return\n      }\n\n      if (\n        param.select.type === \"point\" &&\n        !(\"encodings\" in param.select) &&\n        isNullOrUndefined(param.select.encodings)\n      ) {\n        // If encodings are not specified by the user, we add all the encodings from\n        // the chart to the selection parameter. This is required so that points\n        // selections are correctly resolved to a PointSelection and not an IndexSelection:\n        // https://github.com/altair-viz/altair/issues/3285#issuecomment-1858860696\n        param.select.encodings = Object.keys(spec.encoding)\n      }\n    })\n  }\n}\n\nexport class ArrowVegaLiteChart extends PureComponent<\n  PropsWithFullScreen,\n  State\n> {\n  /**\n   * The Vega view object\n   */\n  private vegaView?: vega.View\n\n  /**\n   * Finalizer for the embedded vega object. Must be called to dispose\n   * of the vegaView when it's no longer used.\n   */\n  private vegaFinalizer?: () => void\n\n  /**\n   * The default data name to add to.\n   */\n  private defaultDataName = DEFAULT_DATA_NAME\n\n  /**\n   * The html element we attach the Vega view to.\n   */\n  private element: HTMLDivElement | null = null\n\n  /**\n   * Helper to manage form clear listeners.\n   * This is used to reset the selection state when the form is cleared.\n   */\n  private readonly formClearHelper = new FormClearHelper()\n\n  readonly state = {\n    error: undefined,\n  }\n\n  public async componentDidMount(): Promise<void> {\n    try {\n      await this.createView()\n    } catch (e) {\n      const error = ensureError(e)\n      this.setState({ error })\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.finalizeView()\n  }\n\n  /**\n   * Finalize the view so it can be garbage collected. This should be done\n   * when a new view is created, and when the component unmounts.\n   */\n  private finalizeView = (): any => {\n    if (this.vegaFinalizer) {\n      this.vegaFinalizer()\n    }\n    this.vegaFinalizer = undefined\n    this.vegaView = undefined\n  }\n\n  public async componentDidUpdate(\n    prevProps: PropsWithFullScreen\n  ): Promise<void> {\n    const { element: prevElement, theme: prevTheme } = prevProps\n    const { element, theme } = this.props\n\n    const prevSpec = prevElement.spec\n    const { spec } = element\n\n    if (\n      !this.vegaView ||\n      prevSpec !== spec ||\n      prevTheme !== theme ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.element.vegaLiteTheme !== this.props.element.vegaLiteTheme ||\n      !isEqual(\n        prevProps.element.selectionMode,\n        this.props.element.selectionMode\n      )\n    ) {\n      logMessage(\"Vega spec changed.\")\n      try {\n        await this.createView()\n      } catch (e) {\n        const error = ensureError(e)\n\n        this.setState({ error })\n      }\n      return\n    }\n\n    const prevData = prevElement.data\n    const { data } = element\n\n    if (prevData || data) {\n      this.updateData(this.defaultDataName, prevData, data)\n    }\n\n    const prevDataSets = getDataSets(prevElement) || {}\n    const dataSets = getDataSets(element) || {}\n\n    for (const [name, dataset] of Object.entries(dataSets)) {\n      const datasetName = name || this.defaultDataName\n      const prevDataset = prevDataSets[datasetName]\n\n      this.updateData(datasetName, prevDataset, dataset)\n    }\n\n    // Remove all datasets that are in the previous but not the current datasets.\n    for (const name of Object.keys(prevDataSets)) {\n      if (!dataSets.hasOwnProperty(name) && name !== this.defaultDataName) {\n        this.updateData(name, null, null)\n      }\n    }\n\n    this.vegaView.resize().runAsync()\n  }\n\n  public generateSpec = (): any => {\n    const { element: el, theme, isFullScreen, width, height } = this.props\n    const spec = JSON.parse(el.spec)\n    const { useContainerWidth } = el\n    if (el.vegaLiteTheme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n    } else if (spec.usermeta?.embedOptions?.theme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n      // Remove the theme from the usermeta so it doesn't get picked up by vega embed.\n      spec.usermeta.embedOptions.theme = undefined\n    } else {\n      // Apply minor theming improvements to work better with Streamlit\n      spec.config = applyThemeDefaults(spec.config, theme)\n    }\n\n    if (isFullScreen) {\n      spec.width = width\n      spec.height = height\n\n      if (\"vconcat\" in spec) {\n        spec.vconcat.forEach((child: any) => {\n          child.width = width\n        })\n      }\n    } else if (useContainerWidth) {\n      spec.width = width\n\n      if (\"vconcat\" in spec) {\n        spec.vconcat.forEach((child: any) => {\n          child.width = width\n        })\n      }\n    }\n\n    if (!spec.padding) {\n      spec.padding = {}\n    }\n\n    if (isNullOrUndefined(spec.padding.bottom)) {\n      spec.padding.bottom = BOTTOM_PADDING\n    }\n\n    if (spec.datasets) {\n      throw new Error(\"Datasets should not be passed as part of the spec\")\n    }\n\n    if (el.selectionMode.length > 0) {\n      prepareSpecForSelections(spec)\n    }\n    return spec\n  }\n\n  /**\n   * Update the dataset in the Vega view. This method tried to minimize changes\n   * by automatically creating and applying diffs.\n   *\n   * @param name The name of the dataset.\n   * @param prevData The dataset before the update.\n   * @param data The dataset to use for the update.\n   */\n  private updateData(\n    name: string,\n    prevData: Quiver | null,\n    data: Quiver | null\n  ): void {\n    if (!this.vegaView) {\n      throw new Error(\"Chart has not been drawn yet\")\n    }\n\n    if (!data || data.data.numRows === 0) {\n      // The new data is empty, so we remove the dataset from the\n      // chart view if the named dataset exists.\n      try {\n        this.vegaView.remove(name, vega.truthy)\n      } finally {\n        return\n      }\n    }\n\n    if (!prevData || prevData.data.numRows === 0) {\n      // The previous data was empty, so we just insert the new data.\n      this.vegaView.insert(name, getDataArray(data))\n      return\n    }\n\n    const { dataRows: prevNumRows, dataColumns: prevNumCols } =\n      prevData.dimensions\n    const { dataRows: numRows, dataColumns: numCols } = data.dimensions\n\n    // Check if dataframes have same \"shape\" but the new one has more rows.\n    if (\n      dataIsAnAppendOfPrev(\n        prevData,\n        prevNumRows,\n        prevNumCols,\n        data,\n        numRows,\n        numCols\n      )\n    ) {\n      if (prevNumRows < numRows) {\n        // Insert the new rows.\n        this.vegaView.insert(name, getDataArray(data, prevNumRows))\n      }\n    } else {\n      // Clean the dataset and insert from scratch.\n      this.vegaView.data(name, getDataArray(data))\n      logMessage(\n        `Had to clear the ${name} dataset before inserting data through Vega view.`\n      )\n    }\n  }\n\n  /**\n   * Configure the selections for this chart if the chart has selections enabled.\n   */\n  private maybeConfigureSelections = (): void => {\n    if (this.vegaView === undefined) {\n      // This check is mainly to make the type checker happy.\n      // this.vegaView is guaranteed to be defined here.\n      return\n    }\n\n    const { widgetMgr, element } = this.props\n\n    if (!element?.id || element.selectionMode.length === 0) {\n      // To configure selections, it needs to be activated and\n      // the element ID must be set.\n      return\n    }\n\n    // Try to load the previous state of the chart from the element state.\n    // This is useful to restore the selection state when the component is re-mounted\n    // or when its put into fullscreen mode.\n    const viewState = widgetMgr.getElementState(\n      this.props.element.id,\n      \"viewState\"\n    )\n    if (notNullOrUndefined(viewState)) {\n      try {\n        this.vegaView = this.vegaView.setState(viewState)\n      } catch (e) {\n        logWarning(\"Failed to restore view state\", e)\n      }\n    }\n\n    // Add listeners for all selection events. Find out more here:\n    // https://vega.github.io/vega/docs/api/view/#view_addSignalListener\n    element.selectionMode.forEach((param, _index) => {\n      this.vegaView?.addSignalListener(\n        param,\n        debounce(DEBOUNCE_TIME_MS, (name: string, value: SignalValue) => {\n          // Store the current chart selection state with the widget manager so that it\n          // can be used for restoring the state when the component unmounted and\n          // created again. This can happen when elements are added before it within\n          // the delta path. The viewState is only stored in the frontend, and not\n          // synced to the backend.\n          const viewState = this.vegaView?.getState({\n            // There are also `signals` data, but I believe its\n            // not relevant for restoring the selection state.\n            data: (name?: string, _operator?: any) => {\n              // Vega lite stores the selection state in a <param name>_store parameter\n              // under `data` that can be retrieved via the getState method.\n              // https://vega.github.io/vega/docs/api/view/#view_getState\n              return element.selectionMode.some(\n                mode => `${mode}_store` === name\n              )\n            },\n            // Don't include subcontext data since it will lead to exceptions\n            // when loading the state.\n            recurse: false,\n          })\n\n          if (notNullOrUndefined(viewState)) {\n            widgetMgr.setElementState(element.id, \"viewState\", viewState)\n          }\n\n          // If selection encodings are correctly specified, vega-lite will return\n          // a list of selected points within the vlPoint.or property:\n          // https://github.com/vega/altair/blob/f1b4e2c84da2fba220022c8a285cc8280f824ed8/altair/utils/selection.py#L50\n          // We want to just return this list of points instead of the entire object\n          // since the other parts of the selection object are not useful.\n          let processedSelection = value\n          if (\"vlPoint\" in value && \"or\" in value.vlPoint) {\n            processedSelection = value.vlPoint.or\n          }\n\n          // Get the current widget state\n          const currentWidgetState = JSON.parse(\n            widgetMgr.getStringValue(element as WidgetInfo) || \"{}\"\n          )\n\n          // Update the component-internal selection state\n          const updatedSelections = {\n            selection: {\n              ...(currentWidgetState?.selection || {}),\n              [name]: processedSelection || {},\n            } as VegaLiteState,\n          }\n\n          // Update the widget state if the selection state has changed\n          // compared to the last update. This selection state will be synced\n          // with the backend.\n          if (!isEqual(currentWidgetState, updatedSelections)) {\n            widgetMgr.setStringValue(\n              element as WidgetInfo,\n              JSON.stringify(updatedSelections),\n              {\n                fromUi: true,\n              },\n              this.props.fragmentId\n            )\n          }\n        })\n      )\n    })\n\n    /**\n     * Callback to reset the selection and update the widget state.\n     * This might also send the empty selection state to the backend.\n     */\n    const reset = (): void => {\n      const emptySelectionState: VegaLiteState = {\n        selection: {},\n      }\n      // Initialize all parameters defined in the selectionMode with an empty object.\n      this.props.element.selectionMode.forEach(param => {\n        emptySelectionState.selection[param] = {}\n      })\n      const currentWidgetStateStr = widgetMgr.getStringValue(\n        element as WidgetInfo\n      )\n      const currentWidgetState = currentWidgetStateStr\n        ? JSON.parse(currentWidgetStateStr)\n        : // If there wasn't any selection yet, the selection state\n          // is assumed to be empty.\n          emptySelectionState\n\n      if (!isEqual(currentWidgetState, emptySelectionState)) {\n        this.props.widgetMgr?.setStringValue(\n          this.props.element as WidgetInfo,\n          JSON.stringify(emptySelectionState),\n          {\n            fromUi: true,\n          },\n          this.props.fragmentId\n        )\n      }\n    }\n\n    // Add the form clear listener if we are in a form (formId defined)\n    if (this.props.element.formId) {\n      this.formClearHelper.manageFormClearListener(\n        this.props.widgetMgr,\n        this.props.element.formId,\n        reset\n      )\n    }\n  }\n\n  /**\n   * Create a new Vega view and add the data.\n   */\n  private async createView(): Promise<void> {\n    logMessage(\"Creating a new Vega view.\")\n\n    if (!this.element) {\n      throw Error(\"Element missing.\")\n    }\n\n    // Finalize the previous view so it can be garbage collected.\n    this.finalizeView()\n\n    const { element } = this.props\n    const spec = this.generateSpec()\n    const options = {\n      // Adds interpreter support for Vega expressions that is compliant with CSP\n      ast: true,\n      expr: expressionInterpreter,\n\n      // Disable default styles so that vega doesn't inject <style> tags in the\n      // DOM. We set these styles manually for finer control over them and to\n      // avoid inlining styles.\n      tooltip: { disableDefaultStyle: true },\n      defaultStyle: false,\n      forceActionsMenu: true,\n    }\n\n    const { vgSpec, view, finalize } = await embed(this.element, spec, options)\n\n    this.vegaView = view\n\n    this.maybeConfigureSelections()\n\n    this.vegaFinalizer = finalize\n\n    const datasets = getDataArrays(element)\n\n    // Heuristic to determine the default dataset name.\n    const datasetNames = datasets ? Object.keys(datasets) : []\n    if (datasetNames.length === 1) {\n      const [datasetName] = datasetNames\n      this.defaultDataName = datasetName\n    } else if (datasetNames.length === 0 && vgSpec.data) {\n      this.defaultDataName = DEFAULT_DATA_NAME\n    }\n\n    const dataObj = getInlineData(element)\n    if (dataObj) {\n      view.insert(this.defaultDataName, dataObj)\n    }\n    if (datasets) {\n      for (const [name, data] of Object.entries(datasets)) {\n        view.insert(name, data)\n      }\n    }\n\n    await view.runAsync()\n\n    // Fix bug where the \"...\" menu button overlaps with charts where width is\n    // set to -1 on first load.\n    this.vegaView.resize().runAsync()\n  }\n\n  public render(): JSX.Element {\n    if (this.state.error) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw this.state.error\n    }\n\n    return (\n      // Create the container Vega draws inside.\n      <StyledVegaLiteChartContainer\n        data-testid=\"stVegaLiteChart\"\n        className=\"stVegaLiteChart\"\n        useContainerWidth={this.props.element.useContainerWidth}\n        isFullScreen={this.props.isFullScreen}\n        ref={c => {\n          this.element = c\n        }}\n      />\n    )\n  }\n}\n\nexport default withTheme(withFullScreenWrapper(ArrowVegaLiteChart))\n"],"mappings":"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"}