{"version":3,"file":"arrowUtils.test.js","names":["CATEGORICAL","DATE","DATETIME","DATETIMETZ","FLOAT64","INT64","UINT64","RANGE","UNICODE","Quiver","getDataArray","describe","test","mockElement","data","q","expect","toEqual","Date","valueOf","c1","c2"],"sources":["../../../../src/components/elements/ArrowVegaLiteChart/arrowUtils.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CATEGORICAL,\n  DATE,\n  DATETIME,\n  DATETIMETZ,\n  FLOAT64,\n  INT64,\n  UINT64,\n  RANGE,\n  UNICODE,\n} from \"@streamlit/lib/src/mocks/arrow\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { getDataArray } from \"./arrowUtils\"\n\ndescribe(\"Types of dataframe indexes as x axis\", () => {\n  describe(\"Supported\", () => {\n    test(\"datetimetz\", () => {\n      const mockElement = { data: DATETIMETZ }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        {\n          \"(index)\": 978220800000,\n          \"2000-12-31 00:00:00\": new Date(\n            \"2020-01-02T05:00:00.000Z\"\n          ).valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\n            \"2020-10-20T05:00:00.000Z\"\n          ).valueOf(),\n        },\n        {\n          \"(index)\": 1009756800000,\n          \"2000-12-31 00:00:00\": new Date(\n            \"2020-01-02T05:00:00.000Z\"\n          ).valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\n            \"2020-10-20T05:00:00.000Z\"\n          ).valueOf(),\n        },\n      ])\n    })\n\n    test(\"date\", () => {\n      const mockElement = { data: DATE }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        {\n          \"(index)\": 978220800000,\n          \"2000-12-31 00:00:00\": new Date(\"2020-01-02T00:00:00\").valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\"2020-10-20T00:00:00\").valueOf(),\n        },\n        {\n          \"(index)\": 1009756800000,\n          \"2000-12-31 00:00:00\": new Date(\"2020-01-02T00:00:00\").valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\"2020-10-20T00:00:00\").valueOf(),\n        },\n      ])\n    })\n\n    test(\"datetime\", () => {\n      const mockElement = { data: DATETIME }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        {\n          \"(index)\": 978220800000,\n          \"2000-12-31 00:00:00\": new Date(\"2020-01-02T05:00:00\").valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\"2020-10-20T05:00:00\").valueOf(),\n        },\n        {\n          \"(index)\": 1009756800000,\n          \"2000-12-31 00:00:00\": new Date(\"2020-01-02T05:00:00\").valueOf(),\n          \"2001-12-31 00:00:00\": new Date(\"2020-10-20T05:00:00\").valueOf(),\n        },\n      ])\n    })\n\n    test(\"float64\", () => {\n      const mockElement = { data: FLOAT64 }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        { \"(index)\": 1.24, \"1.24\": 1.2, \"2.35\": 1.3 },\n        { \"(index)\": 2.35, \"1.24\": 1.4, \"2.35\": 1.5 },\n      ])\n    })\n\n    test(\"int64\", () => {\n      const mockElement = { data: INT64 }\n      const q = new Quiver(mockElement)\n      expect(getDataArray(q)).toEqual([\n        {\n          \"(index)\": 1,\n          \"1\": 0,\n          \"2\": 1,\n        },\n        {\n          \"(index)\": 2,\n          \"1\": 2,\n          \"2\": 3,\n        },\n      ])\n    })\n\n    test(\"range\", () => {\n      const mockElement = { data: RANGE }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        { \"(index)\": 0, \"0\": \"foo\", \"1\": \"1\" },\n        { \"(index)\": 1, \"0\": \"bar\", \"1\": \"2\" },\n      ])\n    })\n\n    test(\"uint64\", () => {\n      const mockElement = { data: UINT64 }\n      const q = new Quiver(mockElement)\n      expect(getDataArray(q)).toEqual([\n        {\n          \"(index)\": 1,\n          \"1\": 1,\n          \"2\": 2,\n        },\n        {\n          \"(index)\": 2,\n          \"1\": 3,\n          \"2\": 4,\n        },\n      ])\n    })\n  })\n\n  describe(\"Unsupported\", () => {\n    test(\"categorical\", () => {\n      const mockElement = { data: CATEGORICAL }\n      const q = new Quiver(mockElement)\n      expect(getDataArray(q)).toEqual([\n        { c1: \"foo\", c2: 100 },\n        { c1: \"bar\", c2: 200 },\n      ])\n    })\n\n    test(\"unicode\", () => {\n      const mockElement = { data: UNICODE }\n      const q = new Quiver(mockElement)\n\n      expect(getDataArray(q)).toEqual([\n        { c1: \"foo\", c2: \"1\" },\n        { c1: \"bar\", c2: \"2\" },\n      ])\n    })\n  })\n})\n"],"mappings":"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"}