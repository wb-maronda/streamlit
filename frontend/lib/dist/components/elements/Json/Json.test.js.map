{"version":3,"file":"Json.test.js","names":["React","screen","render","Json","JsonProto","themeUtils","jsx","_jsx","getProps","elementProps","arguments","length","undefined","element","create","body","width","describe","afterEach","jest","restoreAllMocks","it","props","expect","getByTestId","toBeInTheDocument","spyOn","mockReturnValue","getByText","toHaveStyle"],"sources":["../../../../src/components/elements/Json/Json.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport \"@testing-library/jest-dom\"\nimport { screen } from \"@testing-library/react\"\nimport { render } from \"@streamlit/lib/src/test_util\"\nimport { Json as JsonProto } from \"@streamlit/lib/src/proto\"\nimport * as themeUtils from \"@streamlit/lib/src/theme/utils\"\nimport Json, { JsonProps } from \"./Json\"\n\nconst getProps = (elementProps: Partial<JsonProto> = {}): JsonProps => ({\n  element: JsonProto.create({\n    body:\n      '{ \"proper\": [1,2,3],' +\n      '  \"nested\": { \"thing1\": \"cat\", \"thing2\": \"hat\" },' +\n      '  \"json\": \"structure\" }',\n    ...elementProps,\n  }),\n  width: 100,\n})\n\ndescribe(\"JSON element\", () => {\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  it(\"renders json as expected\", () => {\n    const props = getProps()\n    render(<Json {...props} />)\n    expect(screen.getByTestId(\"stJson\")).toBeInTheDocument()\n  })\n\n  it(\"should show an error with invalid JSON\", () => {\n    const props = getProps({ body: \"invalid JSON\" })\n    render(<Json {...props} />)\n    expect(screen.getByTestId(\"stNotification\")).toBeInTheDocument()\n  })\n\n  it(\"renders json with NaN and infinity values\", () => {\n    const props = getProps({\n      body: `{\n      \"numbers\":[ -1e27, NaN, Infinity, -Infinity, 2.2822022,-2.2702775],\n    }`,\n    })\n    render(<Json {...props} />)\n    expect(screen.getByTestId(\"stJson\")).toBeInTheDocument()\n  })\n\n  describe(\"getJsonTheme\", () => {\n    it(\"picks a reasonable theme when the background is light\", () => {\n      // <Json> uses `hasLightBackgroundColor` to test whether our theme\n      // is \"light\" or \"dark\". Mock the return value for the test.\n      jest.spyOn(themeUtils, \"hasLightBackgroundColor\").mockReturnValue(true)\n\n      render(<Json {...getProps()} />)\n      // checks resulting json coloration based on theme passed\n      expect(screen.getByText(\"}\")).toHaveStyle(\"color: rgb(0, 43, 54)\")\n    })\n\n    it(\"picks a reasonable theme when the background is dark\", () => {\n      // <Json> uses `hasLightBackgroundColor` to test whether our theme\n      // is \"light\" or \"dark\". Mock the return value for the test.\n      jest.spyOn(themeUtils, \"hasLightBackgroundColor\").mockReturnValue(false)\n      render(<Json {...getProps()} />)\n      expect(screen.getByText(\"}\")).toHaveStyle(\"color: rgb(249, 248, 245)\")\n    })\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,2BAA2B;AAClC,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,MAAM;AACf,SAASC,IAAI,IAAIC,SAAS;AAC1B,OAAO,KAAKC,UAAU;AACtB,OAAOF,IAAI;AAA6B,SAAAG,GAAA,IAAAC,IAAA;AAExC,MAAMC,QAAQ,GAAG,SAAAA,CAAA;EAAA,IAACC,YAAgC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OAAiB;IACtEG,OAAO,EAAET,SAAS,CAACU,MAAM,CAAC;MACxBC,IAAI,EACF,sBAAsB,GACtB,mDAAmD,GACnD,yBAAyB;MAC3B,GAAGN;IACL,CAAC,CAAC;IACFO,KAAK,EAAE;EACT,CAAC;AAAA,CAAC;AAEFC,QAAQ,CAAC,cAAc,EAAE,MAAM;EAC7BC,SAAS,CAAC,MAAM;IACdC,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC,CAAC;EAEFC,EAAE,CAAC,0BAA0B,EAAE,MAAM;IACnC,MAAMC,KAAK,GAAGd,QAAQ,CAAC,CAAC;IACxBN,MAAM,eAACK,IAAA,CAACJ,IAAI;MAAA,GAAKmB;IAAK,CAAG,CAAC,CAAC;IAC3BC,MAAM,CAACtB,MAAM,CAACuB,WAAW,CAAC,QAAQ,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFJ,EAAE,CAAC,wCAAwC,EAAE,MAAM;IACjD,MAAMC,KAAK,GAAGd,QAAQ,CAAC;MAAEO,IAAI,EAAE;IAAe,CAAC,CAAC;IAChDb,MAAM,eAACK,IAAA,CAACJ,IAAI;MAAA,GAAKmB;IAAK,CAAG,CAAC,CAAC;IAC3BC,MAAM,CAACtB,MAAM,CAACuB,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAClE,CAAC,CAAC;EAEFJ,EAAE,CAAC,2CAA2C,EAAE,MAAM;IACpD,MAAMC,KAAK,GAAGd,QAAQ,CAAC;MACrBO,IAAI;IAGN,CAAC,CAAC;IACFb,MAAM,eAACK,IAAA,CAACJ,IAAI;MAAA,GAAKmB;IAAK,CAAG,CAAC,CAAC;IAC3BC,MAAM,CAACtB,MAAM,CAACuB,WAAW,CAAC,QAAQ,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFR,QAAQ,CAAC,cAAc,EAAE,MAAM;IAC7BI,EAAE,CAAC,uDAAuD,EAAE,MAAM;MAChE;MACA;MACAF,IAAI,CAACO,KAAK,CAACrB,UAAU,EAAE,yBAAyB,CAAC,CAACsB,eAAe,CAAC,IAAI,CAAC;MAEvEzB,MAAM,eAACK,IAAA,CAACJ,IAAI;QAAA,GAAKK,QAAQ,CAAC;MAAC,CAAG,CAAC,CAAC;MAChC;MACAe,MAAM,CAACtB,MAAM,CAAC2B,SAAS,CAAC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,uBAAuB,CAAC;IACpE,CAAC,CAAC;IAEFR,EAAE,CAAC,sDAAsD,EAAE,MAAM;MAC/D;MACA;MACAF,IAAI,CAACO,KAAK,CAACrB,UAAU,EAAE,yBAAyB,CAAC,CAACsB,eAAe,CAAC,KAAK,CAAC;MACxEzB,MAAM,eAACK,IAAA,CAACJ,IAAI;QAAA,GAAKK,QAAQ,CAAC;MAAC,CAAG,CAAC,CAAC;MAChCe,MAAM,CAACtB,MAAM,CAAC2B,SAAS,CAAC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,2BAA2B,CAAC;IACxE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}