{"version":3,"file":"utils.test.js","names":["ElementNode","ScriptRunState","convertKeyToClassName","getKeyFromId","isElementStale","describe","node","it","expect","RERUN_REQUESTED","toBe","RUNNING","states","NOT_RUNNING","STOP_REQUESTED","COMPILATION_ERROR","forEach","s","testCases","input","undefined","expected","test","each","_ref","_ref2"],"sources":["../../../../src/components/core/Block/utils.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ElementNode } from \"@streamlit/lib/src/AppNode\"\nimport { ScriptRunState } from \"@streamlit/lib/src/ScriptRunState\"\n\nimport { convertKeyToClassName, getKeyFromId, isElementStale } from \"./utils\"\n\ndescribe(\"isElementStale\", () => {\n  const node = new ElementNode(\n    // @ts-expect-error\n    null,\n    null,\n    \"myScriptRunId\",\n    \"activeScriptHash\",\n    \"myFragmentId\"\n  )\n\n  it(\"returns true if scriptRunState is RERUN_REQUESTED\", () => {\n    expect(\n      isElementStale(\n        node,\n        ScriptRunState.RERUN_REQUESTED,\n        \"someScriptRunId\",\n        []\n      )\n    ).toBe(true)\n  })\n\n  // When running in a fragment, the only elements that should be set to stale\n  // are those belonging to the fragment that's currently running and only if the script run id is different.\n  // If the script run id is the same, the element has just been updated and is not stale.\n  it(\"if running and currentFragmentId is set, compares with node's fragmentId and scriptrunId\", () => {\n    expect(\n      isElementStale(node, ScriptRunState.RUNNING, \"myScriptRunId\", [\n        \"myFragmentId\",\n      ])\n    ).toBe(false)\n\n    expect(\n      isElementStale(node, ScriptRunState.RUNNING, \"otherScriptRunId\", [\n        \"myFragmentId\",\n      ])\n    ).toBe(true)\n\n    expect(\n      isElementStale(node, ScriptRunState.RUNNING, \"myScriptRunId\", [\n        \"someFragmentId\",\n        \"someOtherFragmentId\",\n      ])\n    ).toBe(false)\n  })\n\n  // When not running in a fragment, all elements from script runs aside from\n  // the current one should be set to stale.\n  it(\"if running and currentFragmentId is not set, compares with node's scriptRunId\", () => {\n    expect(\n      isElementStale(node, ScriptRunState.RUNNING, \"someOtherScriptRunId\", [])\n    ).toBe(true)\n\n    expect(\n      isElementStale(node, ScriptRunState.RUNNING, \"myScriptRunId\", [])\n    ).toBe(false)\n  })\n\n  it(\"returns false for all other script run states\", () => {\n    const states = [\n      ScriptRunState.NOT_RUNNING,\n      ScriptRunState.STOP_REQUESTED,\n      ScriptRunState.COMPILATION_ERROR,\n    ]\n    states.forEach(s => {\n      expect(isElementStale(node, s, \"someOtherScriptRunId\", [])).toBe(false)\n    })\n  })\n})\n\ndescribe(\"convertKeyToClassName\", () => {\n  const testCases = [\n    { input: undefined, expected: \"\" },\n    { input: null, expected: \"\" },\n    { input: \"\", expected: \"\" },\n    { input: \"helloWorld\", expected: \"st-key-helloWorld\" },\n    { input: \"hello world!\", expected: \"st-key-hello-world-\" },\n    { input: \"123Start\", expected: \"st-key-123Start\" },\n    { input: \"My_Class-Name\", expected: \"st-key-My_Class-Name\" },\n    {\n      input: \"invalid#characters$here\",\n      expected: \"st-key-invalid-characters-here\",\n    },\n    { input: \"another$Test_case\", expected: \"st-key-another-Test_case\" },\n  ]\n\n  test.each(testCases)(\n    \"converts $input to $expected\",\n    ({ input, expected }) => {\n      expect(convertKeyToClassName(input)).toBe(expected)\n    }\n  )\n})\n\ndescribe(\"getKeyFromId\", () => {\n  const testCases = [\n    {\n      input: \"\",\n      expected: undefined,\n    },\n    {\n      input: undefined,\n      expected: undefined,\n    },\n    {\n      input: \"$ID-899e9b72e1539f21f8e82565d36609d0-foo\",\n      expected: undefined,\n    },\n    {\n      input: \"$$ID-899e9b72e1539f21f8e82565d36609d0-None\",\n      expected: undefined,\n    },\n    { input: \"helloWorld\", expected: undefined },\n    {\n      input: \"$$ID-899e9b72e1539f21f8e82565d36609d0-first container\",\n      expected: \"first container\",\n    },\n    {\n      input: \"$$ID-foo-bar\",\n      expected: \"bar\",\n    },\n  ]\n\n  test.each(testCases)(\n    \"extracts the key from $input\",\n    ({ input, expected }) => {\n      expect(getKeyFromId(input)).toBe(expected)\n    }\n  )\n})\n"],"mappings":"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"}