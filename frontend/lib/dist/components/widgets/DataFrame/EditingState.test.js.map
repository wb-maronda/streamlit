{"version":3,"file":"EditingState.test.js","names":["GridCellKind","TextColumn","EditingState","MOCK_TEXT_CELL_1","kind","Text","displayData","data","allowOverlay","MOCK_TEXT_CELL_2","MOCK_TEXT_MISSING_CELL","isMissingValue","describe","it","NUM_OF_ROWS","editingState","setCell","expect","getCell","toEqual","undefined","rowCells","Map","set","addRow","getNumRows","isAddedRow","deleteRow","getOriginalRowIndex","LAST_ROW_ID","deleteRows","baseColumnProps","id","title","indexNumber","arrowType","pandas_type","numpy_type","isEditable","isRequired","isHidden","isIndex","isStretched","json","toJson","name","each","editingStateJson","MOCK_COLUMN_PROPS","MOCK_COLUMNS","fromJson"],"sources":["../../../../src/components/widgets/DataFrame/EditingState.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumnProps,\n  TextColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\nimport EditingState from \"./EditingState\"\n\nconst MOCK_TEXT_CELL_1: TextCell = {\n  kind: GridCellKind.Text,\n  displayData: \"foo\",\n  data: \"foo\",\n  allowOverlay: true,\n}\n\nconst MOCK_TEXT_CELL_2: TextCell = {\n  kind: GridCellKind.Text,\n  displayData: \"foo\",\n  data: \"foo\",\n  allowOverlay: true,\n}\n\nconst MOCK_TEXT_MISSING_CELL = {\n  kind: GridCellKind.Text,\n  displayData: \"\",\n  data: \"\",\n  isMissingValue: true,\n  allowOverlay: true,\n} as TextCell\n\ndescribe(\"EditingState class\", () => {\n  it(\"allows to set edited cells\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n    editingState.setCell(0, 0, MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(0, 0)).toEqual(MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(1, 1)).toEqual(undefined)\n\n    // Overwrite cell\n    editingState.setCell(0, 0, MOCK_TEXT_CELL_2)\n    expect(editingState.getCell(0, 0)).toEqual(MOCK_TEXT_CELL_2)\n  })\n\n  it(\"allows to add rows\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    const rowCells: Map<number, GridCell> = new Map()\n    rowCells.set(0, MOCK_TEXT_CELL_1)\n    rowCells.set(1, MOCK_TEXT_CELL_2)\n\n    // Add a row and check values\n    editingState.addRow(rowCells)\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS + 1)\n    expect(editingState.isAddedRow(2)).toEqual(false)\n    expect(editingState.isAddedRow(3)).toEqual(true)\n    expect(editingState.getCell(0, 3)).toEqual(MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(1, 3)).toEqual(MOCK_TEXT_CELL_2)\n\n    // Add another row\n    editingState.addRow(rowCells)\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS + 2)\n    expect(editingState.getCell(0, 4)).toEqual(MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(1, 4)).toEqual(MOCK_TEXT_CELL_2)\n  })\n\n  it(\"allows to delete a single row\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    // Delete first row\n    editingState.deleteRow(0)\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS - 1)\n\n    // The current row 0 should be the original row 1\n    expect(editingState.getOriginalRowIndex(0)).toEqual(1)\n  })\n\n  it(\"allows to add and delete multiple rows\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    const rowCells: Map<number, GridCell> = new Map()\n    rowCells.set(0, MOCK_TEXT_CELL_1)\n    rowCells.set(1, MOCK_TEXT_CELL_2)\n\n    // Add two rows\n    editingState.addRow(rowCells)\n    editingState.addRow(rowCells)\n    // Should have 5 rows\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS + 2)\n\n    // Delete one row\n    editingState.deleteRow(3)\n    // Should have 4 rows\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS + 1)\n    // Last row should be an edited row\n    let LAST_ROW_ID = editingState.getOriginalRowIndex(\n      editingState.getNumRows() - 1\n    )\n    expect(editingState.isAddedRow(LAST_ROW_ID)).toEqual(true)\n    expect(editingState.getCell(0, LAST_ROW_ID)).toEqual(MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(1, LAST_ROW_ID)).toEqual(MOCK_TEXT_CELL_2)\n\n    // Delete a row from existing data\n    editingState.deleteRow(0)\n    // Should have 3 rows\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS)\n\n    // Last row should be an edited row\n    LAST_ROW_ID = editingState.getOriginalRowIndex(\n      editingState.getNumRows() - 1\n    )\n    expect(editingState.isAddedRow(LAST_ROW_ID)).toEqual(true)\n    expect(editingState.getCell(0, LAST_ROW_ID)).toEqual(MOCK_TEXT_CELL_1)\n    expect(editingState.getCell(1, LAST_ROW_ID)).toEqual(MOCK_TEXT_CELL_2)\n\n    // Delete remaining rows via deleteRows\n    editingState.deleteRows([\n      editingState.getOriginalRowIndex(0),\n      editingState.getOriginalRowIndex(1),\n      editingState.getOriginalRowIndex(2),\n    ])\n    expect(editingState.getNumRows()).toEqual(0)\n  })\n\n  it(\"ignores rows with required empty values in toJson\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    const rowCells: Map<number, GridCell> = new Map()\n    rowCells.set(0, MOCK_TEXT_CELL_1)\n    rowCells.set(1, MOCK_TEXT_MISSING_CELL)\n\n    // Add a row and check values\n    editingState.addRow(rowCells)\n    expect(editingState.getNumRows()).toEqual(NUM_OF_ROWS + 1)\n\n    const baseColumnProps = {\n      id: \"column_1\",\n      title: \"column_1\",\n      indexNumber: 0,\n      arrowType: {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      isEditable: true,\n      isRequired: true,\n      isHidden: false,\n      isIndex: false,\n      isStretched: false,\n    } as BaseColumnProps\n\n    // Convert to JSON\n    const json = editingState.toJson([\n      TextColumn({\n        ...baseColumnProps,\n        indexNumber: 0,\n        id: \"column_1\",\n      }),\n      TextColumn({\n        ...baseColumnProps,\n        indexNumber: 1,\n        id: \"column_2\",\n      }),\n    ])\n\n    // Row should npt be included in the JSON:\n    expect(json).toEqual(\n      '{\"edited_rows\":{},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"converts editing state to JSON\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    // Edit a cell\n    editingState.setCell(0, 0, MOCK_TEXT_CELL_1)\n\n    // Add row\n    const rowCells: Map<number, GridCell> = new Map()\n    rowCells.set(0, MOCK_TEXT_CELL_1)\n    rowCells.set(1, MOCK_TEXT_CELL_2)\n    editingState.addRow(rowCells)\n\n    // Delete a row\n    editingState.deleteRow(1)\n\n    const baseColumnProps = {\n      id: \"column_1\",\n      name: \"column_1\",\n      title: \"column_1\",\n      indexNumber: 0,\n      arrowType: {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      isEditable: false,\n      isHidden: false,\n      isIndex: false,\n      isStretched: false,\n    } as BaseColumnProps\n\n    // Convert to JSON\n    const json = editingState.toJson([\n      TextColumn({\n        ...baseColumnProps,\n        indexNumber: 0,\n        id: \"column_1\",\n        name: \"column_1\",\n      }),\n      TextColumn({\n        ...baseColumnProps,\n        indexNumber: 1,\n        id: \"column_2\",\n        name: \"column_2\",\n      }),\n    ])\n\n    expect(json).toEqual(\n      '{\"edited_rows\":{\"0\":{\"column_1\":\"foo\"}},\"added_rows\":[{\"column_1\":\"foo\",\"column_2\":\"foo\"}],\"deleted_rows\":[1]}'\n    )\n  })\n\n  it.each([\n    [\n      `{\"edited_rows\":{\"0\":{\"column_1\":\"foo\"}},\"added_rows\":[{\"column_1\":\"foo\",\"column_2\":\"foo\"}],\"deleted_rows\":[1]}`,\n    ],\n    [`{\"edited_rows\":{},\"added_rows\":[],\"deleted_rows\":[]}`],\n    [\n      `{\"edited_rows\":{},\"added_rows\":[{\"column_1\":\"foo\",\"column_2\":\"foo\"}],\"deleted_rows\":[]}`,\n    ],\n    [`{\"edited_rows\":{},\"added_rows\":[],\"deleted_rows\":[1]}`],\n    [\n      `{\"edited_rows\":{\"0\":{\"column_1\":\"foo\"}},\"added_rows\":[],\"deleted_rows\":[]}`,\n    ],\n    [\n      `{\"edited_rows\":{\"0\":{\"_index\":\"foo\"}},\"added_rows\":[],\"deleted_rows\":[]}`,\n    ],\n  ])(\"converts JSON to editing state: %p\", (editingStateJson: string) => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    const MOCK_COLUMN_PROPS = {\n      id: \"column_1\",\n      name: \"column_1\",\n      title: \"column_1\",\n      indexNumber: 0,\n      arrowType: {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      isEditable: false,\n      isRequired: false,\n      isHidden: false,\n      isIndex: false,\n      isStretched: false,\n    } as BaseColumnProps\n\n    const MOCK_COLUMNS = [\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        isIndex: true,\n        indexNumber: 0,\n        id: \"index_col\",\n        name: \"index_col\",\n      }),\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        indexNumber: 1,\n        id: \"column_1\",\n        name: \"column_1\",\n      }),\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        indexNumber: 2,\n        id: \"column_2\",\n        name: \"column_2\",\n      }),\n    ]\n    editingState.fromJson(editingStateJson, MOCK_COLUMNS)\n    // Test again if the edits were applied correctly:\n    expect(editingState.toJson(MOCK_COLUMNS)).toEqual(editingStateJson)\n  })\n\n  it(\"ensure all cells of added rows are filled even if empty\", () => {\n    const NUM_OF_ROWS = 3\n    const editingState = new EditingState(NUM_OF_ROWS)\n\n    const MOCK_COLUMN_PROPS = {\n      id: \"column_1\",\n      name: \"column_1\",\n      title: \"column_1\",\n      indexNumber: 0,\n      arrowType: {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      isEditable: false,\n      isRequired: false,\n      isHidden: false,\n      isIndex: false,\n      isStretched: false,\n    } as BaseColumnProps\n\n    const MOCK_COLUMNS = [\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        isIndex: true,\n        indexNumber: 0,\n        id: \"index_col\",\n        name: \"index_col\",\n      }),\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        indexNumber: 1,\n        id: \"column_1\",\n        name: \"column_1\",\n      }),\n      TextColumn({\n        ...MOCK_COLUMN_PROPS,\n        indexNumber: 2,\n        id: \"column_2\",\n        name: \"column_2\",\n      }),\n    ]\n    editingState.fromJson(\n      `{\"edited_rows\":{},\"added_rows\":[{\"column_1\":\"foo\"}],\"deleted_rows\":[]}`,\n      MOCK_COLUMNS\n    )\n    // Should have the value from the JSON:\n    expect(editingState.getCell(1, 3)).toEqual(MOCK_COLUMNS[1].getCell(\"foo\"))\n    // Should have an empty cell since it wasn't specified in the JSON:\n    expect(editingState.getCell(2, 3)).toEqual(MOCK_COLUMNS[2].getCell(null))\n  })\n})\n"],"mappings":"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"}