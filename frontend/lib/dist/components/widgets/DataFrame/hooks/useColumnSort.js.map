{"version":3,"file":"useColumnSort.js","names":["React","useColumnSort","useGlideColumnSort","toGlideColumn","updateSortingHeader","columns","sort","undefined","map","column","id","title","direction","concat","numRows","getCellContent","setSort","useState","getCellContentSorted","getOriginalIndex","rows","updatedColumns","useMemo","sortColumn","useCallback","index","sortDirection","clickedColumn","mode","sortMode"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useColumnSort.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = React.useMemo(() => {\n    return updateSortingHeader(columns, sort)\n  }, [columns, sort])\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAOzB,SAASC,aAAa,IAAIC,kBAAkB,QAAQ,mCAAmC;AAEvF,SAEEC,aAAa;;AAGf;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAC1BC,OAAqB,EACrBC,IAAkC,EACpB;EACd,IAAIA,IAAI,KAAKC,SAAS,EAAE;IACtB,OAAOF,OAAO;EAChB;EACA,OAAOA,OAAO,CAACG,GAAG,CAACC,MAAM,IAAI;IAC3B,IAAIA,MAAM,CAACC,EAAE,KAAKJ,IAAI,CAACG,MAAM,CAACC,EAAE,EAAE;MAChC,OAAO;QACL,GAAGD,MAAM;QACTE,KAAK,EACHL,IAAI,CAACM,SAAS,KAAK,KAAK,aAAAC,MAAA,CAAQJ,MAAM,CAACE,KAAK,cAAAE,MAAA,CAAUJ,MAAM,CAACE,KAAK;MACtE,CAAC;IACH;IACA,OAAOF,MAAM;EACf,CAAC,CAAC;AACJ;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,aAAaA,CACpBa,OAAe,EACfT,OAAqB,EACrBU,cAAmE,EACjD;EAClB,MAAM,CAACT,IAAI,EAAEU,OAAO,CAAC,GAAGhB,KAAK,CAACiB,QAAQ,CAAmB,CAAC;EAE1D,MAAM;IAAEF,cAAc,EAAEG,oBAAoB;IAAEC;EAAiB,CAAC,GAC9DjB,kBAAkB,CAAC;IACjBG,OAAO,EAAEA,OAAO,CAACG,GAAG,CAACC,MAAM,IAAIN,aAAa,CAACM,MAAM,CAAC,CAAC;IACrDM,cAAc;IACdK,IAAI,EAAEN,OAAO;IACbR;EACF,CAAC,CAAC;EAEJ,MAAMe,cAAc,GAAGrB,KAAK,CAACsB,OAAO,CAAC,MAAM;IACzC,OAAOlB,mBAAmB,CAACC,OAAO,EAAEC,IAAI,CAAC;EAC3C,CAAC,EAAE,CAACD,OAAO,EAAEC,IAAI,CAAC,CAAC;EAEnB,MAAMiB,UAAU,GAAGvB,KAAK,CAACwB,WAAW,CACjCC,KAAa,IAAK;IACjB,IAAIC,aAAa,GAAG,KAAK;IACzB,MAAMC,aAAa,GAAGN,cAAc,CAACI,KAAK,CAAC;IAE3C,IAAInB,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACC,EAAE,KAAKiB,aAAa,CAACjB,EAAE,EAAE;MAC/C;MACA,IAAIJ,IAAI,CAACM,SAAS,KAAK,KAAK,EAAE;QAC5B;QACAc,aAAa,GAAG,MAAM;MACxB,CAAC,MAAM;QACL;QACAV,OAAO,CAACT,SAAS,CAAC;QAClB;MACF;IACF;IAEAS,OAAO,CAAC;MACNP,MAAM,EAAEN,aAAa,CAACwB,aAAa,CAAC;MACpCf,SAAS,EAAEc,aAAa;MACxBE,IAAI,EAAED,aAAa,CAACE;IACtB,CAAqB,CAAC;EACxB,CAAC,EACD,CAACvB,IAAI,EAAEe,cAAc,CACvB,CAAC;EAED,OAAO;IACLhB,OAAO,EAAEgB,cAAc;IACvBE,UAAU;IACVJ,gBAAgB;IAChBJ,cAAc,EAAEG;EAClB,CAAC;AACH;AAEA,eAAejB,aAAa"}