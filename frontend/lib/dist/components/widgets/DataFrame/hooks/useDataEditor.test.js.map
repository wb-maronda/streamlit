{"version":3,"file":"useDataEditor.test.js","names":["renderHook","CompactSelection","NumberColumn","TextColumn","EditingState","notNullOrUndefined","useDataEditor","MOCK_COLUMNS","id","name","title","indexNumber","arrowType","pandas_type","numpy_type","isEditable","isHidden","isIndex","isStretched","defaultValue","columnTypeOptions","max_chars","validate","INITIAL_NUM_ROWS","refreshCellsMock","jest","fn","syncEditsMock","updateNumRows","clearSelectionMock","getOriginalIndexMock","mockImplementation","index","getCellContentMock","_ref","col","column","kind","getCell","describe","beforeEach","clearAllMocks","it","editingState","current","result","onCellEdited","Error","columnToEdit","expect","toHaveBeenCalled","editedCell","toBe","getCellValue","toEqual","toJson","onPaste","cell1","cell2","not","toBeNull","getNumRows","onRowAppended","toHaveBeenCalledTimes","onDelete","deleteCellSelection","range","x","y","width","height","rows","empty","columns","toHaveBeenCalledWith","cell","deleteRowSelection","undefined","fromSingleSelection","validateCell","columnToValidate","invalidValue","validationResult","data","validValue","validResult"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useDataEditor.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { renderHook } from \"@testing-library/react-hooks\"\nimport {\n  CompactSelection,\n  GridSelection,\n  TextCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  NumberColumn,\n  TextColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport useDataEditor from \"./useDataEditor\"\n\nconst MOCK_COLUMNS: BaseColumn[] = [\n  NumberColumn({\n    id: \"column_1\",\n    name: \"column_1\",\n    title: \"column_1\",\n    indexNumber: 0,\n    arrowType: {\n      pandas_type: \"int64\",\n      numpy_type: \"int64\",\n    },\n    isEditable: true,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n  }),\n  TextColumn({\n    id: \"column_2\",\n    name: \"column_2\",\n    title: \"column_2\",\n    indexNumber: 1,\n    arrowType: {\n      pandas_type: \"unicode\",\n      numpy_type: \"object\",\n    },\n    isEditable: true,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n    defaultValue: \"foo\",\n    columnTypeOptions: {\n      max_chars: 10,\n      validate: \"^[a-zA-Z]+$\",\n    },\n  }),\n]\n\nconst INITIAL_NUM_ROWS = 3\nconst refreshCellsMock = jest.fn()\nconst syncEditsMock = jest.fn()\nconst updateNumRows = jest.fn()\nconst clearSelectionMock = jest.fn()\nconst getOriginalIndexMock = jest.fn().mockImplementation((index: number) => {\n  return index\n})\nconst getCellContentMock = jest\n  .fn()\n  .mockImplementation(([col]: readonly [number]) => {\n    const column = MOCK_COLUMNS[col]\n    if (column.kind === \"number\") {\n      return column.getCell(123)\n    }\n    return column.getCell(\"foo\")\n  })\n\ndescribe(\"useDataEditor hook\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n  it(\"allows to edit cells with onCellEdited\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onCellEdited !== \"function\") {\n      throw new Error(\"onCellEdited is expected to be a function\")\n    }\n\n    const columnToEdit = MOCK_COLUMNS[1]\n    result.current.onCellEdited(\n      [1, 0],\n      columnToEdit.getCell(\"bar\") as TextCell\n    )\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(getCellContentMock).toHaveBeenCalled()\n    const editedCell = editingState.current.getCell(1, 0)\n\n    expect(notNullOrUndefined(editedCell)).toBe(true)\n\n    // @ts-expect-error\n    expect(columnToEdit.getCellValue(editedCell)).toEqual(\"bar\")\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"0\":{\"column_2\":\"bar\"}},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"correctly handles indices on editing\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        [{ ...MOCK_COLUMNS[0], isIndex: true }, MOCK_COLUMNS[1]],\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onCellEdited !== \"function\") {\n      throw new Error(\"onCellEdited is expected to be a function\")\n    }\n\n    const columnToEdit = MOCK_COLUMNS[1]\n    result.current.onCellEdited(\n      [1, 0],\n      columnToEdit.getCell(\"bar\") as TextCell\n    )\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(getCellContentMock).toHaveBeenCalled()\n    const editedCell = editingState.current.getCell(1, 0)\n\n    expect(notNullOrUndefined(editedCell)).toBe(true)\n\n    // @ts-expect-error\n    expect(columnToEdit.getCellValue(editedCell)).toEqual(\"bar\")\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"0\":{\"column_2\":\"bar\"}},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"applies cell edits from pasted data via onPaste\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onPaste !== \"function\") {\n      throw new Error(\"onPaste is expected to be a function\")\n    }\n\n    // Paste in some data into the second row:\n    result.current.onPaste([0, 1], [[\"321\", \"bar\", \"baz\"]])\n\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(getCellContentMock).toHaveBeenCalled()\n\n    // Check edited data from first column\n    const cell1 = editingState.current.getCell(0, 1)\n    expect(notNullOrUndefined(cell1)).toBe(true)\n\n    // @ts-expect-error\n    expect(MOCK_COLUMNS[0].getCellValue(cell1)).toEqual(321)\n\n    // Check data from second column\n    const cell2 = editingState.current.getCell(1, 1)\n    expect(cell2).not.toBeNull()\n\n    // @ts-expect-error\n    expect(MOCK_COLUMNS[1].getCellValue(cell2)).toEqual(\"bar\")\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"1\":{\"column_1\":321,\"column_2\":\"bar\"}},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"adds new rows from pasted data via onPaste\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false, // activates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onPaste !== \"function\") {\n      throw new Error(\"onPaste is expected to be a function\")\n    }\n\n    // Paste in two rows into the last row\n    result.current.onPaste(\n      [0, INITIAL_NUM_ROWS - 1],\n      [\n        [\"321\", \"bar\", \"baz\"],\n        [\"432\", \"lorem\", \"ipsum\"],\n      ]\n    )\n\n    // This should have added one row:\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS + 1)\n\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(getCellContentMock).toHaveBeenCalled()\n\n    // Check with full editing state:\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"2\":{\"column_1\":321,\"column_2\":\"bar\"}},\"added_rows\":[{\"column_1\":432,\"column_2\":\"lorem\"}],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"doesn't add new rows from pasted data via onPaste if fixed num rows\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        true, // deactivate the addition of new rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onPaste !== \"function\") {\n      throw new Error(\"onPaste is expected to be a function\")\n    }\n\n    // Paste in two rows into the last row\n    result.current.onPaste(\n      [0, INITIAL_NUM_ROWS - 1],\n      [\n        [\"321\", \"bar\", \"baz\"],\n        [\"432\", \"lorem\", \"ipsum\"],\n      ]\n    )\n\n    // This should not have added any rows since fixedNumRows is true\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS)\n\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(getCellContentMock).toHaveBeenCalled()\n\n    // Check with full editing state:\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"2\":{\"column_1\":321,\"column_2\":\"bar\"}},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"allows to add new rows via onRowAppended\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false, // activates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onRowAppended !== \"function\") {\n      throw new Error(\"onRowAppended is expected to be a function\")\n    }\n\n    result.current.onRowAppended()\n\n    // This should have added one row\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS + 1)\n\n    expect(syncEditsMock).toHaveBeenCalled()\n  })\n\n  it(\"uses default values for new rows in onRowAppended\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false, // activates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onRowAppended !== \"function\") {\n      throw new Error(\"onRowAppended is expected to be a function\")\n    }\n\n    result.current.onRowAppended()\n\n    // Check with full editing state:\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{},\"added_rows\":[{\"column_2\":\"foo\"}],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"doesn't allow to add new rows via onRowAppended if fix num rows\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        true, // deactivates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onRowAppended !== \"function\") {\n      throw new Error(\"onRowAppended is expected to be a function\")\n    }\n\n    result.current.onRowAppended()\n\n    // Row addition is deactivated, this should not add any rows\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS)\n\n    expect(syncEditsMock).toHaveBeenCalledTimes(0)\n  })\n\n  it(\"allows to delete cell content via onDelete\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onDelete !== \"function\") {\n      throw new Error(\"onDelete is expected to be a function\")\n    }\n\n    // Mock selection to delete cell 0,0\n    const deleteCellSelection = {\n      current: {\n        range: { x: 0, y: 0, width: 1, height: 1 },\n      },\n      rows: CompactSelection.empty(),\n      columns: CompactSelection.empty(),\n    } as GridSelection\n\n    // Delete the cell content for 0,0 -> changes the value to null\n    result.current.onDelete(deleteCellSelection)\n\n    expect(syncEditsMock).toHaveBeenCalled()\n    expect(refreshCellsMock).toHaveBeenCalledWith([{ cell: [0, 0] }])\n\n    // The value of cell 0,0 should be null\n    const cell1 = editingState.current.getCell(0, 0)\n\n    expect(notNullOrUndefined(cell1)).toBe(true)\n\n    // @ts-expect-error\n    expect(MOCK_COLUMNS[0].getCellValue(cell1)).toEqual(null)\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      '{\"edited_rows\":{\"0\":{\"column_1\":null}},\"added_rows\":[],\"deleted_rows\":[]}'\n    )\n  })\n\n  it(\"allows to delete rows via onDelete\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false, // activates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onDelete !== \"function\") {\n      throw new Error(\"onDelete is expected to be a function\")\n    }\n\n    // Mock selection to delete row 1\n    const deleteRowSelection = {\n      current: undefined,\n      rows: CompactSelection.fromSingleSelection(1),\n      columns: CompactSelection.empty(),\n    } as GridSelection\n\n    // Delete the row\n    result.current.onDelete(deleteRowSelection)\n\n    // The number of rows should be one less\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS - 1)\n\n    expect(syncEditsMock).toHaveBeenCalled()\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      `{\"edited_rows\":{},\"added_rows\":[],\"deleted_rows\":[1]}`\n    )\n  })\n\n  it(\"doesn't allow to delete rows via onDelete if fix num rows\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        true, // deactivates addition & deletion of rows\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.onDelete !== \"function\") {\n      throw new Error(\"onDelete is expected to be a function\")\n    }\n\n    // Mock selection to delete row 1\n    const deleteRowSelection = {\n      current: undefined,\n      rows: CompactSelection.fromSingleSelection(1),\n      columns: CompactSelection.empty(),\n    } as GridSelection\n\n    // Delete the row\n    result.current.onDelete(deleteRowSelection)\n\n    // The number of rows should be same since row deletion is not allowed:\n    expect(editingState.current.getNumRows()).toEqual(INITIAL_NUM_ROWS)\n\n    expect(syncEditsMock).toHaveBeenCalledTimes(0)\n\n    // Check with full editing state\n    expect(editingState.current.toJson(MOCK_COLUMNS)).toEqual(\n      `{\"edited_rows\":{},\"added_rows\":[],\"deleted_rows\":[]}`\n    )\n  })\n\n  it(\"calls validateInput and returns false on invalid data.\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.validateCell !== \"function\") {\n      throw new Error(\"validateCell is expected to be a function\")\n    }\n\n    const columnToValidate = MOCK_COLUMNS[1]\n    const invalidValue = columnToValidate.getCell(\"12345\") as TextCell\n    const validationResult = result.current.validateCell(\n      [1, 0],\n      invalidValue,\n      columnToValidate.getCell(undefined)\n    )\n\n    expect(validationResult).toEqual(false)\n  })\n\n  it(\"calls validateInput and corrects invalid input.\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.validateCell !== \"function\") {\n      throw new Error(\"validateCell is expected to be a function\")\n    }\n\n    const columnToValidate = MOCK_COLUMNS[1]\n    const invalidValue = columnToValidate.getCell(\"abcdefghijk\") as TextCell\n    const validationResult = result.current.validateCell(\n      [1, 0],\n      invalidValue,\n      columnToValidate.getCell(undefined)\n    )\n    expect((validationResult as TextCell).data).toEqual(\"abcdefghij\")\n  })\n\n  it(\"calls validateInput and returns true on valid data.\", () => {\n    const editingState = {\n      current: new EditingState(INITIAL_NUM_ROWS),\n    }\n\n    const { result } = renderHook(() => {\n      return useDataEditor(\n        MOCK_COLUMNS,\n        false,\n        editingState,\n        getCellContentMock,\n        getOriginalIndexMock,\n        refreshCellsMock,\n        updateNumRows,\n        syncEditsMock,\n        clearSelectionMock\n      )\n    })\n\n    if (typeof result.current.validateCell !== \"function\") {\n      throw new Error(\"validateCell is expected to be a function\")\n    }\n\n    const columnToValidate = MOCK_COLUMNS[1]\n\n    const validValue = columnToValidate.getCell(\"abcde\") as TextCell\n    const validResult = result.current.validateCell(\n      [1, 0],\n      validValue,\n      columnToValidate.getCell(undefined)\n    )\n\n    expect(validResult).toEqual(true)\n  })\n})\n"],"mappings":"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"}