{"version":3,"file":"useSelectionHandler.test.js","names":["renderHook","act","CompactSelection","Arrow","ArrowProto","TextColumn","useSelectionHandler","syncSelectionStateMock","jest","fn","describe","beforeEach","clearAllMocks","it","result","create","selectionMode","SelectionMode","SINGLE_ROW","expect","current","isRowSelectionActivated","toEqual","isMultiRowSelectionActivated","isColumnSelectionActivated","isMultiColumnSelectionActivated","MULTI_ROW","SINGLE_COLUMN","MULTI_COLUMN","newGridSelection","columns","fromSingleSelection","rows","empty","undefined","processSelectionChange","isColumnSelected","isRowSelected","isCellSelected","gridSelection","toBeCalledTimes","clearSelection","cell","not","toBeCalled","firstGridSelection","secondGridSelection","arrowType","meta","numpy_type","pandas_type","id","name","indexNumber","isEditable","isHidden","isIndex","isStretched","title"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useSelectionHandler.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { renderHook, act } from \"@testing-library/react-hooks\"\nimport { CompactSelection } from \"@glideapps/glide-data-grid\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { TextColumn } from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\nimport useSelectionHandler from \"./useSelectionHandler\"\n\nconst syncSelectionStateMock = jest.fn()\n\ndescribe(\"useSelectionHandler hook\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it(\"detects single row selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [ArrowProto.SelectionMode.SINGLE_ROW],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(false)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(false)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(false)\n  })\n\n  it(\"detects multi row selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [ArrowProto.SelectionMode.MULTI_ROW],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(true)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(false)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(false)\n  })\n\n  it(\"detects single column selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [ArrowProto.SelectionMode.SINGLE_COLUMN],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(false)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(false)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(false)\n  })\n  it(\"detects multi column selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [ArrowProto.SelectionMode.MULTI_COLUMN],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(false)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(false)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(true)\n  })\n  it(\"detects mixed multi selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(true)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(true)\n  })\n  it(\"disables all selections if empty table\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        true,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(false)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(false)\n\n    expect(result.current.isColumnSelectionActivated).toEqual(false)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(false)\n  })\n  it(\"correctly processes and clears column selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(true)\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(true)\n\n    // Process a new selection with a single column selected:\n    const newGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.empty(),\n      current: undefined,\n    }\n\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(newGridSelection)\n    })\n\n    // Check that it detects a column to be selected:\n    expect(result.current.isColumnSelected).toEqual(true)\n\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(result.current.gridSelection).toEqual(newGridSelection)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    // Check that the selection can also be cleared again:\n    act(() => {\n      const { clearSelection } = result.current\n      clearSelection?.()\n    })\n\n    // Check that it clears the selection:\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(2)\n  })\n  it(\"correctly processes and clears row selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(true)\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(true)\n\n    // Process a new selection with a single row selected:\n    const newGridSelection = {\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.fromSingleSelection(0),\n      current: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(newGridSelection)\n    })\n\n    // Check that it detects a row to be selected:\n    expect(result.current.isRowSelected).toEqual(true)\n\n    expect(result.current.isColumnSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(result.current.gridSelection).toEqual(newGridSelection)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    // Check that the selection can also be cleared again:\n    act(() => {\n      const { clearSelection } = result.current\n      clearSelection?.()\n    })\n\n    // Check that it clears the selection:\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(2)\n  })\n  it(\"correctly processes and clears row+column selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    expect(result.current.isRowSelectionActivated).toEqual(true)\n    expect(result.current.isMultiRowSelectionActivated).toEqual(true)\n    expect(result.current.isColumnSelectionActivated).toEqual(true)\n    expect(result.current.isMultiColumnSelectionActivated).toEqual(true)\n\n    const newGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.fromSingleSelection(0),\n      current: undefined,\n    }\n\n    // Process a new selection with a row and column:\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(newGridSelection)\n    })\n\n    // Check that it detects a row+column to be selected:\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(result.current.gridSelection).toEqual(newGridSelection)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    // Check that the clear cell selections doesn't clear the row+column selection:\n    act(() => {\n      const { clearSelection } = result.current\n      // Keep column & row selections:\n      clearSelection?.(true, true)\n    })\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n    expect(result.current.isCellSelected).toEqual(false)\n    // This should not call syncSelectionState callback:\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    // Check that the selection can also be cleared again:\n    act(() => {\n      const { clearSelection } = result.current\n      clearSelection?.()\n    })\n\n    // Check that it clears the selection:\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(2)\n  })\n\n  it(\"correctly processes and clears cell selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    const newGridSelection = {\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: {\n        cell: [0, 0],\n      },\n    }\n    // Process a new cell selection:\n    act(() => {\n      const { processSelectionChange } = result.current\n      // @ts-expect-error\n      processSelectionChange?.(newGridSelection)\n    })\n\n    // Check that it detects a row+column to be selected:\n    expect(result.current.isCellSelected).toEqual(true)\n\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n\n    expect(result.current.gridSelection).toEqual(newGridSelection)\n\n    expect(syncSelectionStateMock).not.toBeCalled()\n\n    // Check that the clear cell selections doesn't clear the row+column selection:\n    act(() => {\n      const { clearSelection } = result.current\n      clearSelection?.(true, true)\n    })\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n    expect(result.current.isCellSelected).toEqual(false)\n    // This should not call syncSelectionState callback:\n    expect(syncSelectionStateMock).not.toBeCalled()\n  })\n  it(\"keeps row & column selection on cell selection changes\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    // Select a row+column:\n    const firstGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.fromSingleSelection(0),\n      cell: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(firstGridSelection)\n    })\n\n    // Check that it detects a row+column to be selected:\n    expect(result.current.isCellSelected).toEqual(false)\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    const secondGridSelection = {\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: {\n        cell: [0, 0],\n      },\n    }\n    // Select a cell:\n    act(() => {\n      const { processSelectionChange } = result.current\n      // @ts-expect-error\n      processSelectionChange?.(secondGridSelection)\n    })\n\n    // Row+column selection should be kept:\n    expect(result.current.isCellSelected).toEqual(true)\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n\n    // This should not call syncSelectionState callback:\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n  })\n  it(\"keeps row selection on column selection changes\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    // Select only a row:\n    const firstGridSelection = {\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.fromSingleSelection(0),\n      cell: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(firstGridSelection)\n    })\n\n    // Only a row should be selected:\n    expect(result.current.isCellSelected).toEqual(false)\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(false)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    const secondGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.empty(),\n      cell: undefined,\n    }\n    // Select a column\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(secondGridSelection)\n    })\n\n    // Row selection is kept in addition to the new column selection:\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n    expect(result.current.isCellSelected).toEqual(false)\n\n    expect(syncSelectionStateMock).toBeCalledTimes(2)\n  })\n  it(\"keeps column selection on row selection changes\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [],\n        syncSelectionStateMock\n      )\n    )\n\n    // Select only a column:\n    const firstGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.empty(),\n      cell: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(firstGridSelection)\n    })\n\n    // Only a column should be selected:\n    expect(result.current.isCellSelected).toEqual(false)\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(true)\n    expect(syncSelectionStateMock).toBeCalledTimes(1)\n\n    // Select a row:\n    const secondGridSelection = {\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.fromSingleSelection(0),\n      cell: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(secondGridSelection)\n    })\n\n    // Column selection is kept in addition to the new row selection:\n    expect(result.current.isRowSelected).toEqual(true)\n    expect(result.current.isColumnSelected).toEqual(true)\n    expect(result.current.isCellSelected).toEqual(false)\n    expect(syncSelectionStateMock).toBeCalledTimes(2)\n  })\n\n  it(\"ignores index column selection\", () => {\n    const { result } = renderHook(() =>\n      useSelectionHandler(\n        ArrowProto.create({\n          selectionMode: [\n            ArrowProto.SelectionMode.MULTI_ROW,\n            ArrowProto.SelectionMode.MULTI_COLUMN,\n          ],\n        }),\n        false,\n        false,\n        [\n          // Configure 1 index column\n          TextColumn({\n            arrowType: {\n              meta: null,\n              numpy_type: \"object\",\n              pandas_type: \"unicode\",\n            },\n            id: \"index-0\",\n            name: \"\",\n            indexNumber: 0,\n            isEditable: true,\n            isHidden: false,\n            isIndex: true,\n            isStretched: false,\n            title: \"\",\n          }),\n        ],\n        syncSelectionStateMock\n      )\n    )\n\n    // Select the index column:\n    const firstGridSelection = {\n      columns: CompactSelection.fromSingleSelection(0),\n      rows: CompactSelection.empty(),\n      cell: undefined,\n    }\n    act(() => {\n      const { processSelectionChange } = result.current\n      processSelectionChange?.(firstGridSelection)\n    })\n\n    // Nothing should have been selected since the index column is ignored:\n    expect(result.current.isCellSelected).toEqual(false)\n    expect(result.current.isRowSelected).toEqual(false)\n    expect(result.current.isColumnSelected).toEqual(false)\n  })\n})\n"],"mappings":"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"}