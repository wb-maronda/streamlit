{"version":3,"file":"useColumnSizer.js","names":["React","useState","useColumnSizer","columns","columnSizes","setColumnSizes","Map","onColumnResize","useCallback","column","_newSize","_colIndex","newSizeWithGrow","id","set","sizedColumns","useMemo","map","has","get","undefined","width","grow"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useColumnSizer.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  const sizedColumns = React.useMemo(() => {\n    return columns.map(column => {\n      if (\n        column.id &&\n        columnSizes.has(column.id) &&\n        columnSizes.get(column.id) !== undefined\n      ) {\n        return {\n          ...column,\n          width: columnSizes.get(column.id),\n          // Deactivate grow whenever a column gets manually resized\n          grow: 0,\n        } as GridColumn\n      }\n      return column\n    })\n  }, [columns, columnSizes])\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAMvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAqB,EAAqB;EAChE;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAC5C,MAAM,IAAIK,GAAG,CAAC,CAChB,CAAC;EAED,MAAMC,cAAc,GAAGP,KAAK,CAACQ,WAAW,CACtC,CACEC,MAAkB,EAClBC,QAAgB,EAChBC,SAAiB,EACjBC,eAAuB,KACpB;IACH,IAAIH,MAAM,CAACI,EAAE,EAAE;MACbR,cAAc,CAAC,IAAIC,GAAG,CAACF,WAAW,CAAC,CAACU,GAAG,CAACL,MAAM,CAACI,EAAE,EAAED,eAAe,CAAC,CAAC;IACtE;EACF,CAAC,EACD,CAACR,WAAW,CACd,CAAC;EAED,MAAMW,YAAY,GAAGf,KAAK,CAACgB,OAAO,CAAC,MAAM;IACvC,OAAOb,OAAO,CAACc,GAAG,CAACR,MAAM,IAAI;MAC3B,IACEA,MAAM,CAACI,EAAE,IACTT,WAAW,CAACc,GAAG,CAACT,MAAM,CAACI,EAAE,CAAC,IAC1BT,WAAW,CAACe,GAAG,CAACV,MAAM,CAACI,EAAE,CAAC,KAAKO,SAAS,EACxC;QACA,OAAO;UACL,GAAGX,MAAM;UACTY,KAAK,EAAEjB,WAAW,CAACe,GAAG,CAACV,MAAM,CAACI,EAAE,CAAC;UACjC;UACAS,IAAI,EAAE;QACR,CAAC;MACH;MACA,OAAOb,MAAM;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,OAAO,EAAEC,WAAW,CAAC,CAAC;EAE1B,OAAO;IACLD,OAAO,EAAEY,YAAY;IACrBR;EACF,CAAC;AACH;AAEA,eAAeL,cAAc"}