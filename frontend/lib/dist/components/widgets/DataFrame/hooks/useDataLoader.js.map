{"version":3,"file":"useDataLoader.js","names":["React","notNullOrUndefined","getCellFromArrow","getErrorCell","useDataLoader","data","columns","numRows","editingState","getCellContent","useCallback","_ref","col","row","length","column","originalCol","indexNumber","originalRow","current","getOriginalRowIndex","isAddedRow","isEditable","editedCell","getCell","arrowCell","cssStyles","error"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useDataLoader.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps, GridCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { getCellFromArrow } from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n      const isAddedRow = editingState.current.isAddedRow(originalRow)\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || isAddedRow) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (notNullOrUndefined(editedCell)) {\n          return editedCell\n        } else if (isAddedRow) {\n          // This is not expected to happen. All cells to added rows should\n          // be defined. If not, we return a specific error cell.\n          return getErrorCell(\n            \"Error during cell creation.\",\n            \"This should never happen. Please report this bug. \" +\n              `No cell found for an added row: col=${originalCol}; row=${originalRow}`\n          )\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAIzB,SAASC,kBAAkB;AAE3B,SAASC,gBAAgB;AAEzB,SAEEC,YAAY;AAKd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CACpBC,IAAY,EACZC,OAAqB,EACrBC,OAAe,EACfC,YAAkD,EAChC;EAClB,MAAMC,cAAc,GAAGT,KAAK,CAACU,WAAW,CACtCC,IAAA,IAAqD;IAAA,IAApD,CAACC,GAAG,EAAEC,GAAG,CAA4B,GAAAF,IAAA;IACpC,IAAIC,GAAG,GAAGN,OAAO,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAOX,YAAY,CACjB,6BAA6B,EAC7B,mDACF,CAAC;IACH;IAEA,IAAIU,GAAG,GAAGN,OAAO,GAAG,CAAC,EAAE;MACrB,OAAOJ,YAAY,CACjB,0BAA0B,EAC1B,mDACF,CAAC;IACH;IACA,MAAMY,MAAM,GAAGT,OAAO,CAACM,GAAG,CAAC;IAE3B,MAAMI,WAAW,GAAGD,MAAM,CAACE,WAAW;IACtC,MAAMC,WAAW,GAAGV,YAAY,CAACW,OAAO,CAACC,mBAAmB,CAACP,GAAG,CAAC;IACjE,MAAMQ,UAAU,GAAGb,YAAY,CAACW,OAAO,CAACE,UAAU,CAACH,WAAW,CAAC;IAC/D;IACA,IAAIH,MAAM,CAACO,UAAU,IAAID,UAAU,EAAE;MACnC,MAAME,UAAU,GAAGf,YAAY,CAACW,OAAO,CAACK,OAAO,CAC7CR,WAAW,EACXE,WACF,CAAC;MACD,IAAIjB,kBAAkB,CAACsB,UAAU,CAAC,EAAE;QAClC,OAAOA,UAAU;MACnB,CAAC,MAAM,IAAIF,UAAU,EAAE;QACrB;QACA;QACA,OAAOlB,YAAY,CACjB,6BAA6B,EAC7B,oDAAoD,GACjD,uCAAsCa,WAAY,SAAQE,WAAY,EAC3E,CAAC;MACH;IACF;IAEA,IAAI;MACF;MACA,MAAMO,SAAS,GAAGpB,IAAI,CAACmB,OAAO,CAACN,WAAW,GAAG,CAAC,EAAEF,WAAW,CAAC;MAC5D,OAAOd,gBAAgB,CAACa,MAAM,EAAEU,SAAS,EAAEpB,IAAI,CAACqB,SAAS,CAAC;IAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAOxB,YAAY,CACjB,6BAA6B,EAC5B,8DAA6DwB,KAAM,EACtE,CAAC;IACH;EACF,CAAC,EACD,CAACrB,OAAO,EAAEC,OAAO,EAAEF,IAAI,EAAEG,YAAY,CACvC,CAAC;EAED,OAAO;IACLC;EACF,CAAC;AACH;AAEA,eAAeL,aAAa"}