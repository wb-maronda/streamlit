{"version":3,"file":"useSelectionHandler.js","names":["React","CompactSelection","isEqual","Arrow","ArrowProto","useSelectionHandler","element","isEmptyTable","isDisabled","columns","syncSelectionState","gridSelection","setGridSelection","useState","empty","rows","current","undefined","isRowSelectionActivated","selectionMode","includes","SelectionMode","MULTI_ROW","SINGLE_ROW","isMultiRowSelectionActivated","isColumnSelectionActivated","SINGLE_COLUMN","MULTI_COLUMN","isMultiColumnSelectionActivated","isRowSelected","length","isColumnSelected","isCellSelected","processSelectionChange","useCallback","newSelection","rowSelectionChanged","toArray","columnSelectionChanged","cellSelectionChanged","syncSelection","updatedSelection","cleanedColumns","forEach","column","idx","isIndex","remove","clearSelection","keepRows","arguments","keepColumns","emptySelection"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useSelectionHandler.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { CompactSelection, GridSelection } from \"@glideapps/glide-data-grid\"\nimport isEqual from \"lodash/isEqual\"\n\nimport { BaseColumn } from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\n\nexport type SelectionHandlerReturn = {\n  // The current selection state\n  gridSelection: GridSelection\n  // True, if row selection is activated\n  isRowSelectionActivated: boolean\n  // True, if multi row selection is activated\n  isMultiRowSelectionActivated: boolean\n  // True, if column selection is activated\n  isColumnSelectionActivated: boolean\n  // True, if multi column selections is activated\n  isMultiColumnSelectionActivated: boolean\n  // True, if at least one row is selected\n  isRowSelected: boolean\n  // True, if at least one column is selected\n  isColumnSelected: boolean\n  // True, if at least one cell is selected\n  isCellSelected: boolean\n  // Callback to clear selections\n  clearSelection: (keepRows?: boolean, keepColumns?: boolean) => void\n  // Callback to process selection changes from the grid\n  processSelectionChange: (newSelection: GridSelection) => void\n}\n\n/**\n * Custom hook that handles all selection capabilities for the interactive data table.\n *\n * @param element - The Arrow proto message\n * @param isEmptyTable - Whether the table is empty\n * @param isDisabled - Whether the table is disabled\n * @param columns - The columns of the table.\n * @param syncSelectionState - The callback to sync the selection state\n *\n * @returns the selection handler return object\n */\nfunction useSelectionHandler(\n  element: ArrowProto,\n  isEmptyTable: boolean,\n  isDisabled: boolean,\n  columns: BaseColumn[],\n  syncSelectionState: (newSelection: GridSelection) => void\n): SelectionHandlerReturn {\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  const isRowSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_ROW))\n  const isMultiRowSelectionActivated =\n    isRowSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW)\n\n  const isColumnSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_COLUMN) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN))\n  const isMultiColumnSelectionActivated =\n    isColumnSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN)\n\n  const isRowSelected = gridSelection.rows.length > 0\n  const isColumnSelected = gridSelection.columns.length > 0\n  const isCellSelected = gridSelection.current !== undefined\n\n  /**\n   * This callback is used to process selection changes and - if activated -\n   * trigger a sync of the state with the widget state\n   */\n  const processSelectionChange = React.useCallback(\n    (newSelection: GridSelection) => {\n      const rowSelectionChanged = !isEqual(\n        newSelection.rows.toArray(),\n        gridSelection.rows.toArray()\n      )\n\n      const columnSelectionChanged = !isEqual(\n        newSelection.columns.toArray(),\n        gridSelection.columns.toArray()\n      )\n\n      const cellSelectionChanged = !isEqual(\n        newSelection.current,\n        gridSelection.current\n      )\n\n      // A flag to determine if the selection should be synced with the widget state\n      let syncSelection =\n        (isRowSelectionActivated && rowSelectionChanged) ||\n        (isColumnSelectionActivated && columnSelectionChanged)\n\n      let updatedSelection = newSelection\n      if (\n        (isRowSelectionActivated || isColumnSelectionActivated) &&\n        newSelection.current !== undefined &&\n        cellSelectionChanged\n      ) {\n        // The default behavior is that row selections are cleared when a cell is selected.\n        // This is not desired when row selection is activated. Instead, we want to keep the\n        // row selection and only update the cell selection.\n        updatedSelection = {\n          ...newSelection,\n          rows: gridSelection.rows,\n          columns: gridSelection.columns,\n        }\n        // It should not sync the selection\n        // when only the cell selection changes\n        syncSelection = false\n      }\n\n      if (\n        rowSelectionChanged &&\n        newSelection.rows.length > 0 &&\n        columnSelectionChanged &&\n        newSelection.columns.length === 0\n      ) {\n        // Keep the column selection if row selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          columns: gridSelection.columns,\n        }\n        syncSelection = true\n      }\n      if (\n        columnSelectionChanged &&\n        newSelection.columns.length > 0 &&\n        rowSelectionChanged &&\n        newSelection.rows.length === 0\n      ) {\n        // Keep the row selection if column selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          rows: gridSelection.rows,\n        }\n\n        syncSelection = true\n      }\n\n      if (columnSelectionChanged && updatedSelection.columns.length >= 0) {\n        // Remove all index columns from the column selection\n        // We don't want to allow selection of index columns.\n        let cleanedColumns = updatedSelection.columns\n        columns.forEach((column, idx) => {\n          if (column.isIndex) {\n            cleanedColumns = cleanedColumns.remove(idx)\n          }\n        })\n        if (cleanedColumns.length < updatedSelection.columns.length) {\n          updatedSelection = {\n            ...updatedSelection,\n            columns: cleanedColumns,\n          }\n        }\n      }\n\n      setGridSelection(updatedSelection)\n\n      if (syncSelection) {\n        syncSelectionState(updatedSelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n      columns,\n    ]\n  )\n\n  /**\n   * This callback is used to selections (row/column/cell)\n   * and sync the state with the widget state if column or row selections\n   * are activated and the selection has changed.\n   *\n   * @param keepRows - Whether to keep the row selection (default: false)\n   * @param keepColumns - Whether to keep the column selection (default: false)\n   */\n  const clearSelection = React.useCallback(\n    (keepRows = false, keepColumns = false) => {\n      const emptySelection: GridSelection = {\n        columns: keepColumns\n          ? gridSelection.columns\n          : CompactSelection.empty(),\n        rows: keepRows ? gridSelection.rows : CompactSelection.empty(),\n        current: undefined,\n      }\n      setGridSelection(emptySelection)\n      if (\n        (!keepRows && isRowSelectionActivated) ||\n        (!keepColumns && isColumnSelectionActivated)\n      ) {\n        syncSelectionState(emptySelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n    ]\n  )\n\n  return {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  }\n}\n\nexport default useSelectionHandler\n"],"mappings":"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"}