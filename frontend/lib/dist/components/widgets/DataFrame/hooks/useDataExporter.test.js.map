{"version":3,"file":"useDataExporter.test.js","names":["renderHook","showSaveFilePicker","NumberColumn","TextColumn","useDataExporter","toCsvRow","mockWrite","jest","fn","mockClose","mock","mockImplementation","_object","createWritable","write","close","MOCK_COLUMNS","id","name","title","indexNumber","arrowType","pandas_type","numpy_type","isEditable","isHidden","isIndex","isStretched","columnTypeOptions","NUM_ROWS","getCellContentMock","_ref","col","column","kind","getCell","describe","it","each","input","expected","expect","toEqual","beforeEach","clearAllMocks","result","current","exportToCsv","Error","textEncoder","TextEncoder","toHaveBeenCalled","toBeCalledTimes","toBeCalledWith","encode","timestamp","Date","toISOString","slice","replace","excludeAcceptAllOption","suggestedName","types","accept"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useDataExporter.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { renderHook } from \"@testing-library/react-hooks\"\nimport { showSaveFilePicker } from \"native-file-system-adapter\"\n\nimport {\n  BaseColumn,\n  NumberColumn,\n  TextColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\nimport useDataExporter, { toCsvRow } from \"./useDataExporter\"\n\nconst mockWrite = jest.fn()\nconst mockClose = jest.fn()\n\n// The native-file-system-adapter is not available in tests, so we need to mock it.\njest.mock(\"native-file-system-adapter\", () => ({\n  showSaveFilePicker: jest.fn().mockImplementation((_object: any) => {\n    return {\n      createWritable: jest.fn().mockImplementation(() => {\n        return {\n          write: mockWrite,\n          close: mockClose,\n        }\n      }),\n    }\n  }),\n}))\n\nconst MOCK_COLUMNS: BaseColumn[] = [\n  NumberColumn({\n    id: \"column_1\",\n    name: \"column_1\",\n    title: \"column_1\",\n    indexNumber: 0,\n    arrowType: {\n      pandas_type: \"int64\",\n      numpy_type: \"int64\",\n    },\n    isEditable: false,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n  }),\n  TextColumn({\n    id: \"column_2\",\n    name: \"column_2\",\n    title: \"column_2\",\n    indexNumber: 1,\n    arrowType: {\n      pandas_type: \"unicode\",\n      numpy_type: \"object\",\n    },\n    isEditable: false,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n    columnTypeOptions: {},\n  }),\n]\n\nconst NUM_ROWS = 5\n\nconst getCellContentMock = jest\n  .fn()\n  .mockImplementation(([col]: readonly [number]) => {\n    const column = MOCK_COLUMNS[col]\n    if (column.kind === \"number\") {\n      return column.getCell(123)\n    }\n    return column.getCell(\"foo\")\n  })\n\ndescribe(\"toCsvRow\", () => {\n  it.each([\n    [[\"foo\", \"bar\"], \"foo,bar\\n\"],\n    [[1, 2], \"1,2\\n\"],\n    // Correctly escapes if value has comma:\n    [[\"foo,bar\", \"baz\"], '\"foo,bar\",baz\\n'],\n    // Correctly escapes if value has quote:\n    [['foo\"bar', \"baz\"], '\"foo\"\"bar\",baz\\n'],\n    [[\"foo,,,bar\", \"baz,\"], '\"foo,,,bar\",\"baz,\"\\n'],\n    [[true, 10.123141], \"true,10.123141\\n\"],\n  ])(\"converts %p to a valid CSV row: %p\", (input, expected) => {\n    expect(toCsvRow(input)).toEqual(expected)\n  })\n})\n\ndescribe(\"useDataExporter hook\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it(\"correctly writes data row-by-row to writable\", async () => {\n    const { result } = renderHook(() => {\n      return useDataExporter(getCellContentMock, MOCK_COLUMNS, NUM_ROWS, false)\n    })\n\n    if (typeof result.current.exportToCsv !== \"function\") {\n      throw new Error(\"exportToCsv is expected to be a function\")\n    }\n    await result.current.exportToCsv()\n\n    const textEncoder = new TextEncoder()\n\n    expect(getCellContentMock).toHaveBeenCalled()\n    // Number of writes: 1 for BOM + 1 for header + num rows\n    expect(mockWrite).toBeCalledTimes(NUM_ROWS + 2)\n    expect(mockWrite).toBeCalledWith(textEncoder.encode(\"\\ufeff\"))\n    // Write the header row:\n    expect(mockWrite).toBeCalledWith(textEncoder.encode(\"column_1,column_2\\n\"))\n    expect(mockWrite).toBeCalledWith(textEncoder.encode(\"123,foo\\n\"))\n    expect(mockClose).toBeCalledTimes(1)\n  })\n\n  it(\"correctly creates a file picker\", async () => {\n    const { result } = renderHook(() => {\n      return useDataExporter(getCellContentMock, MOCK_COLUMNS, NUM_ROWS, false)\n    })\n\n    if (typeof result.current.exportToCsv !== \"function\") {\n      throw new Error(\"exportToCsv is expected to be a function\")\n    }\n\n    const timestamp = new Date().toISOString().slice(0, 16).replace(\":\", \"-\")\n    await result.current.exportToCsv()\n\n    expect(showSaveFilePicker).toBeCalledTimes(1)\n    expect(showSaveFilePicker).toBeCalledWith({\n      excludeAcceptAllOption: false,\n      suggestedName: `${timestamp}_export.csv`,\n      types: [{ accept: { \"text/csv\": [\".csv\"] } }],\n    })\n  })\n})\n"],"mappings":"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"}