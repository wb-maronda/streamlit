{"version":3,"file":"useDataExporter.js","names":["React","toSafeString","isNullOrUndefined","logError","logWarning","CSV_DELIMITER","CSV_QUOTE_CHAR","CSV_ESCAPE_CHAR","CSV_ROW_DELIMITER","CSV_UTF8_BOM","CSV_SPECIAL_CHARS_REGEX","RegExp","concat","join","toCsvRow","rowValues","map","cell","escapeValue","value","strValue","test","replace","writeCsv","writable","getCellContent","columns","numRows","textEncoder","TextEncoder","write","encode","headers","column","name","row","rowData","forEach","col","_map","push","getCellValue","close","useDataExporter","enforceDownloadInNewTab","exportToCsv","useCallback","timestamp","Date","toISOString","slice","suggestedName","nativeFileSystemAdapter","fileHandle","showSaveFilePicker","types","accept","excludeAcceptAllOption","writer","createWritable","error","Error","csvContent","inMemoryWriter","WritableStream","chunk","TextDecoder","decode","getWriter","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","style","display","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useDataExporter.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  toSafeString,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { logError, logWarning } from \"@streamlit/lib/src/util/log\"\n\n// Delimiter between cells\nconst CSV_DELIMITER = \",\"\n// Quote character for cell values containing special characters\nconst CSV_QUOTE_CHAR = '\"'\n// The character used to escape the quote character within a cell\nconst CSV_ESCAPE_CHAR = '\"'\n// Delimiter between rows (newline)\nconst CSV_ROW_DELIMITER = \"\\n\"\n// Used to indicate Unicode encoding of a text file (for excel compatibility)\nconst CSV_UTF8_BOM = \"\\ufeff\"\n// Regex to check if a value contains special characters that need to be escaped\nconst CSV_SPECIAL_CHARS_REGEX = new RegExp(\n  `[${[CSV_DELIMITER, CSV_QUOTE_CHAR, CSV_ROW_DELIMITER].join(\"\")}]`\n)\n\nexport function toCsvRow(rowValues: any[]): string {\n  return (\n    rowValues.map(cell => escapeValue(cell)).join(CSV_DELIMITER) +\n    CSV_ROW_DELIMITER\n  )\n}\n\n/**\n * Escapes a cell value for CSV export.\n *\n * Makes sure that the value is a string, and special characters are escaped correctly.\n */\nfunction escapeValue(value: any): string {\n  if (isNullOrUndefined(value)) {\n    return \"\"\n  }\n  const strValue = toSafeString(value)\n\n  // Special chars need to be escaped:\n  if (CSV_SPECIAL_CHARS_REGEX.test(strValue)) {\n    // Add quotes around the value:\n    return `${CSV_QUOTE_CHAR}${strValue.replace(\n      // Escape all quote chars if inside a quoted string:\n      new RegExp(CSV_QUOTE_CHAR, \"g\"),\n      CSV_ESCAPE_CHAR + CSV_QUOTE_CHAR\n    )}${CSV_QUOTE_CHAR}`\n  }\n\n  return strValue\n}\n\ntype DataExporterReturn = {\n  // A callback to trigger the data download as CSV\n  exportToCsv: () => void\n}\n\n/**\n * Writes CSV data to a specified writable stream using provided data table parameters.\n * Initiates by writing a UTF-8 Byte Order Mark (BOM) for Excel compatibility, followed by\n * column headers and rows constructed from the cell values obtained through `getCellContent`.\n * The function handles encoding and CSV formatting, concluding by closing the writable stream.\n *\n * @param {WritableStreamDefaultWriter} writable - Target stream for CSV data.\n * @param {DataEditorProps[\"getCellContent\"]} getCellContent - The cell content getter compatible with glide-data-grid.\n * @param {BaseColumn[]} columns - The columns of the table.\n * @param {number} numRows - The number of rows of the current state.\n *\n * @returns {Promise<void>} Promise that resolves when the CSV has been fully written.\n */\nasync function writeCsv(\n  writable: WritableStreamDefaultWriter,\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number\n): Promise<void> {\n  const textEncoder = new TextEncoder()\n\n  // Write UTF-8 BOM for excel compatibility:\n  await writable.write(textEncoder.encode(CSV_UTF8_BOM))\n\n  // Write headers:\n  const headers: string[] = columns.map(column => column.name)\n  await writable.write(textEncoder.encode(toCsvRow(headers)))\n\n  for (let row = 0; row < numRows; row++) {\n    const rowData: any[] = []\n    columns.forEach((column: BaseColumn, col: number, _map) => {\n      rowData.push(column.getCellValue(getCellContent([col, row])))\n    })\n    // Write row to CSV:\n    await writable.write(textEncoder.encode(toCsvRow(rowData)))\n  }\n\n  await writable.close()\n}\n/**\n * Custom hook that handles all the data export/download logic.\n *\n * @param getCellContent - The cell content getter compatible with glide-data-grid.\n * @param columns - The columns of the table.\n * @param numRows - The number of rows of the current state.\n *\n * @returns a callback to trigger the data download as CSV.\n */\nfunction useDataExporter(\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number,\n  enforceDownloadInNewTab: boolean\n): DataExporterReturn {\n  const exportToCsv = React.useCallback(async () => {\n    const timestamp = new Date().toISOString().slice(0, 16).replace(\":\", \"-\")\n    const suggestedName = `${timestamp}_export.csv`\n    try {\n      // Lazy import to prevent weird breakage in some niche cases\n      // (e.g. usage within the replay.io browser). The package works well\n      // in all of the common browser, but might cause some trouble in\n      // less common browsers. To not crash the whole app, we just lazy import\n      // this here.\n      const nativeFileSystemAdapter = await import(\n        \"native-file-system-adapter\"\n      )\n      const fileHandle = await nativeFileSystemAdapter.showSaveFilePicker({\n        suggestedName,\n        types: [{ accept: { \"text/csv\": [\".csv\"] } }],\n        excludeAcceptAllOption: false,\n      })\n\n      const writer = await fileHandle.createWritable()\n\n      await writeCsv(writer, getCellContent, columns, numRows)\n    } catch (error) {\n      if (error instanceof Error && error.name === \"AbortError\") {\n        // The user has canceled the save dialog. Do nothing.\n        return\n      }\n\n      try {\n        logWarning(\n          \"Failed to export data as CSV with FileSystem API, trying fallback method\",\n          error\n        )\n        // Simulated WritableStream that builds CSV content in-memory for the Blob fallback method\n        let csvContent = \"\"\n\n        const inMemoryWriter = new WritableStream({\n          write: async chunk => {\n            csvContent += new TextDecoder(\"utf-8\").decode(chunk)\n          },\n          close: async () => {},\n        })\n\n        await writeCsv(\n          inMemoryWriter.getWriter(),\n          getCellContent,\n          columns,\n          numRows\n        )\n\n        // Fallback to the old browser download method:\n        const blob = new Blob([csvContent], {\n          type: \"text/csv;charset=utf-8;\",\n        })\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement(\"a\")\n        // Open the download link in a new tab to ensure that this is working in embedded\n        // setups that limit the URL that an iframe can navigate to (e.g. via CSP)\n        if (enforceDownloadInNewTab) {\n          link.setAttribute(\"target\", \"_blank\")\n        } else {\n          link.setAttribute(\"target\", \"_self\")\n        }\n\n        link.style.display = \"none\"\n        link.href = url\n        link.download = suggestedName\n        document.body.appendChild(link) // Required for FF\n        link.click()\n        document.body.removeChild(link) // Clean up\n        URL.revokeObjectURL(url) // Free up memory\n      } catch (error) {\n        logError(\"Failed to export data as CSV\", error)\n      }\n    }\n  }, [columns, numRows, getCellContent, enforceDownloadInNewTab])\n\n  return {\n    exportToCsv,\n  }\n}\n\nexport default useDataExporter\n"],"mappings":"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"}