{"version":3,"file":"useColumnLoader.js","names":["React","merge","useTheme","Arrow","ArrowProto","notNullOrUndefined","isNullOrUndefined","logWarning","logError","getColumnTypeFromArrow","getAllColumnsFromArrow","getEmptyIndexColumn","ObjectColumn","ColumnTypes","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","width","undefined","applyColumnConfig","columnProps","columnConfigMapping","columnConfig","has","name","get","concat","indexNumber","isIndex","title","label","isEditable","disabled","isHidden","hidden","isRequired","required","columnTypeOptions","type_config","contentAlignment","alignment","defaultValue","default","help","getColumnConfig","configJson","Map","Object","entries","JSON","parse","error","getColumnType","column","_column$columnTypeOpt","customType","type","ColumnType","arrowType","useColumnLoader","element","data","theme","useMemo","columns","stretchColumns","useContainerWidth","configuredColumns","map","updatedColumn","isStretched","editingMode","EditingMode","READ_ONLY","isEditableType","icon","DYNAMIC","filter","columnOrder","length","orderedColumns","forEach","push","columnName","find"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useColumnLoader.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport merge from \"lodash/merge\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { logWarning, logError } from \"@streamlit/lib/src/util/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the JSON config.\n *\n * @param configJson - the column config JSON from the proto.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(configJson: string): Map<string, any> {\n  if (!configJson) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(configJson)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const columnConfigMapping = React.useMemo(() => {\n    return getColumnConfig(element.columns)\n  }, [element.columns])\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  const columns: BaseColumn[] = React.useMemo(() => {\n    let configuredColumns = getAllColumnsFromArrow(data)\n      .map(column => {\n        // Apply column configurations\n        let updatedColumn = {\n          ...column,\n          ...applyColumnConfig(column, columnConfigMapping),\n          isStretched: stretchColumns,\n        } as BaseColumnProps\n\n        const ColumnType = getColumnType(updatedColumn)\n\n        // Make sure editing is deactivated if the column is read-only, disabled,\n        // or a not editable type.\n        if (\n          element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n          disabled ||\n          ColumnType.isEditableType === false\n        ) {\n          updatedColumn = {\n            ...updatedColumn,\n            isEditable: false,\n          }\n        }\n\n        if (\n          element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n          updatedColumn.isEditable == true\n        ) {\n          // Set editable icon for all editable columns:\n          updatedColumn = {\n            ...updatedColumn,\n            icon: \"editable\",\n          }\n\n          // Make sure that required columns are not hidden when editing mode is dynamic:\n          if (\n            updatedColumn.isRequired &&\n            element.editingMode === ArrowProto.EditingMode.DYNAMIC\n          ) {\n            updatedColumn = {\n              ...updatedColumn,\n              isHidden: false,\n            }\n          }\n        }\n\n        return ColumnType(updatedColumn, theme)\n      })\n      .filter(column => {\n        // Filter out all columns that are hidden\n        return !column.isHidden\n      })\n\n    // Reorder columns based on the user configuration:\n    if (element.columnOrder && element.columnOrder.length > 0) {\n      const orderedColumns: BaseColumn[] = []\n\n      // Add all index columns to the beginning of the list:\n      configuredColumns.forEach(column => {\n        if (column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      // Reorder non-index columns based on the configured column order:\n      element.columnOrder.forEach(columnName => {\n        const column = configuredColumns.find(\n          column => column.name === columnName\n        )\n        if (column && !column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      configuredColumns = orderedColumns\n    }\n\n    // If all columns got filtered out, we add an empty index column\n    // to prevent errors from glide-data-grid.\n    return configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n  }, [\n    data,\n    columnConfigMapping,\n    stretchColumns,\n    disabled,\n    element.editingMode,\n    element.columnOrder,\n    theme,\n  ])\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n"],"mappings":"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"}