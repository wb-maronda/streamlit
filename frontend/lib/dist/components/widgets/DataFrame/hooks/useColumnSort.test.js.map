{"version":3,"file":"useColumnSort.test.js","names":["renderHook","act","NumberColumn","TextColumn","useColumnSort","MOCK_COLUMNS","id","name","title","indexNumber","arrowType","pandas_type","numpy_type","isEditable","isHidden","isIndex","isStretched","MOCK_PROPS","numRows","columns","getCellContent","_ref","col","row","getCell","describe","it","result","SELECTED_COLUMN","sortColumn","current","expect","toContain","sortedDataAsc","i","push","data","sortOperator","a","b","undefined","Array","from","toEqual","sort","sortedDataDesc","reverse"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useColumnSort.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { renderHook, act } from \"@testing-library/react-hooks\"\nimport { NumberCell, GridCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  NumberColumn,\n  TextColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\nimport useColumnSort from \"./useColumnSort\"\n\nconst MOCK_COLUMNS: BaseColumn[] = [\n  NumberColumn({\n    id: \"column_1\",\n    name: \"column_1\",\n    title: \"column_1\",\n    indexNumber: 0,\n    arrowType: {\n      pandas_type: \"int64\",\n      numpy_type: \"int64\",\n    },\n    isEditable: false,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n  }),\n  TextColumn({\n    id: \"column_2\",\n    name: \"column_2\",\n    title: \"column_2\",\n    indexNumber: 1,\n    arrowType: {\n      pandas_type: \"unicode\",\n      numpy_type: \"object\",\n    },\n    isEditable: false,\n    isHidden: false,\n    isIndex: false,\n    isStretched: false,\n  }),\n]\n\nconst MOCK_PROPS = {\n  numRows: 3,\n  columns: MOCK_COLUMNS,\n  getCellContent: ([col, row]: readonly [number, number]): GridCell => {\n    if (row === 0) {\n      return MOCK_COLUMNS[col].getCell(90)\n    }\n    if (row === 1) {\n      return MOCK_COLUMNS[col].getCell(100)\n    }\n    if (row === 2) {\n      return MOCK_COLUMNS[col].getCell(5)\n    }\n    return MOCK_COLUMNS[col].getCell(0)\n  },\n}\n\ndescribe(\"useColumnSort hook\", () => {\n  it(\"should correctly sort numbers ascending and descending order\", () => {\n    const { result } = renderHook(() =>\n      useColumnSort(\n        MOCK_PROPS.numRows,\n        MOCK_PROPS.columns,\n        MOCK_PROPS.getCellContent\n      )\n    )\n    // Select number column\n    const SELECTED_COLUMN = 0\n\n    // Sort the first time for ascending order\n    act(() => {\n      const { sortColumn } = result.current\n      sortColumn?.(MOCK_COLUMNS[SELECTED_COLUMN].indexNumber)\n    })\n\n    // Column header should contain ascending sort icon\n    expect(result.current.columns[SELECTED_COLUMN].title).toContain(\"↑\")\n\n    const sortedDataAsc = []\n\n    for (let i = 0; i < MOCK_PROPS.numRows; i++) {\n      sortedDataAsc.push(\n        (result.current.getCellContent([SELECTED_COLUMN, i]) as NumberCell)\n          .data\n      )\n    }\n\n    const sortOperator = (\n      a: number | undefined,\n      b: number | undefined\n    ): number => {\n      if (a === undefined) {\n        return -1\n      }\n\n      if (b === undefined) {\n        return 1\n      }\n\n      return a - b\n    }\n\n    expect(Array.from(sortedDataAsc)).toEqual(\n      // Sort as number array\n      Array.from(sortedDataAsc).sort(sortOperator)\n    )\n\n    // Sort again for descending order\n    act(() => {\n      const { sortColumn } = result.current\n      sortColumn?.(MOCK_COLUMNS[SELECTED_COLUMN].indexNumber)\n    })\n\n    // Column header should contain descending sort icon\n    expect(result.current.columns[SELECTED_COLUMN].title).toContain(\"↓\")\n\n    const sortedDataDesc = []\n\n    for (let i = 0; i < MOCK_PROPS.numRows; i++) {\n      sortedDataDesc.push(\n        (result.current.getCellContent([SELECTED_COLUMN, i]) as NumberCell)\n          .data\n      )\n    }\n\n    expect(Array.from(sortedDataDesc)).toEqual(\n      // Sort as number array\n      Array.from(sortedDataDesc).sort(sortOperator).reverse()\n    )\n  })\n\n  it(\"should correctly sort text ascending and descending order\", () => {\n    const { result } = renderHook(() =>\n      useColumnSort(\n        MOCK_PROPS.numRows,\n        MOCK_PROPS.columns,\n        MOCK_PROPS.getCellContent\n      )\n    )\n    // Select number column\n    const SELECTED_COLUMN = 1\n\n    // Sort the first time for ascending order\n    act(() => {\n      const { sortColumn } = result.current\n      sortColumn?.(MOCK_COLUMNS[SELECTED_COLUMN].indexNumber)\n    })\n\n    // Column header should contain ascending sort icon\n    expect(result.current.columns[SELECTED_COLUMN].title).toContain(\"↑\")\n\n    const sortedDataAsc = []\n\n    for (let i = 0; i < MOCK_PROPS.numRows; i++) {\n      sortedDataAsc.push(\n        (result.current.getCellContent([SELECTED_COLUMN, i]) as NumberCell)\n          .data\n      )\n    }\n\n    expect(Array.from(sortedDataAsc)).toEqual(\n      // Sort as text array\n      Array.from(sortedDataAsc).sort()\n    )\n\n    // Sort again for descending order\n    act(() => {\n      const { sortColumn } = result.current\n      sortColumn?.(MOCK_COLUMNS[SELECTED_COLUMN].indexNumber)\n    })\n\n    // Column header should contain descending sort icon\n    expect(result.current.columns[SELECTED_COLUMN].title).toContain(\"↓\")\n\n    const sortedDataDesc = []\n\n    for (let i = 0; i < MOCK_PROPS.numRows; i++) {\n      sortedDataDesc.push(\n        (result.current.getCellContent([SELECTED_COLUMN, i]) as NumberCell)\n          .data\n      )\n    }\n\n    expect(Array.from(sortedDataDesc)).toEqual(\n      /// Sort as text array\n      Array.from(sortedDataDesc).sort().reverse()\n    )\n  })\n})\n"],"mappings":"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"}