{"version":3,"file":"useTableSizer.js","names":["React","Arrow","ArrowProto","notNullOrUndefined","MIN_COLUMN_WIDTH","MAX_COLUMN_WIDTH","MAX_COLUMN_AUTO_WIDTH","BORDER_THRESHOLD","ROW_HEIGHT","MIN_TABLE_WIDTH","MIN_TABLE_HEIGHT","DEFAULT_TABLE_HEIGHT","calculateMaxHeight","numRows","Math","max","useTableSizer","element","containerWidth","containerHeight","isFullScreen","maxHeight","editingMode","EditingMode","DYNAMIC","initialHeight","min","height","initialWidth","maxWidth","useContainerWidth","width","resizableSize","setResizableSize","useState","useLayoutEffect","stretchColumns","minHeight","minWidth"],"sources":["../../../../../src/components/widgets/DataFrame/hooks/useTableSizer.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\n// Min column width used for manual and automatic resizing\nexport const MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nexport const MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nexport const MAX_COLUMN_AUTO_WIDTH = 500\n// The border size in pixels (2)\n// to prevent overlap problem with selection ring.\nexport const BORDER_THRESHOLD = 2\n// The default row height in pixels\nexport const ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + borders\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + BORDER_THRESHOLD\n// Min height for the resizable table container:\n// Based on header + one column, and border threshold\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + BORDER_THRESHOLD\n// The default maximum height of the table:\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  return Math.max(numRows * ROW_HEIGHT + BORDER_THRESHOLD, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n"],"mappings":"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"}