{"version":3,"file":"DataFrame.js","names":["React","DataEditor","GlideDataEditor","CompactSelection","Resizable","Delete","Add","FileDownload","Search","Close","FormClearHelper","withFullScreenWrapper","Arrow","ArrowProto","debounce","isNullOrUndefined","Toolbar","ToolbarAction","LibContext","EditingState","getColumnName","useCustomTheme","useTableSizer","useDataLoader","useDataEditor","useColumnSizer","useColumnSort","useColumnLoader","useTooltips","useCustomRenderer","useDataExporter","useSelectionHandler","BORDER_THRESHOLD","MIN_COLUMN_WIDTH","MAX_COLUMN_WIDTH","MAX_COLUMN_AUTO_WIDTH","ROW_HEIGHT","toGlideColumn","getTextCell","ImageCellEditor","Tooltip","StyledResizableContainer","jsx","_jsx","jsxs","_jsxs","DEBOUNCE_TIME_MS","LARGE_TABLE_ROWS_THRESHOLD","WEBKIT_SCROLLBAR_SIZE","DataFrame","_ref2","element","data","width","containerWidth","height","containerHeight","disabled","widgetMgr","isFullScreen","disableFullscreenMode","expand","collapse","fragmentId","resizableRef","useRef","dataEditorRef","resizableContainerRef","theme","headerIcons","tableBorderRadius","libConfig","enforceDownloadInNewTab","useContext","isFocused","setIsFocused","useState","showSearch","setShowSearch","hasVerticalScroll","setHasVerticalScroll","hasHorizontalScroll","setHasHorizontalScroll","isTouchDevice","useMemo","window","matchMedia","matches","hasCustomizedScrollbars","navigator","userAgent","includes","editingMode","EditingMode","READ_ONLY","DYNAMIC","dataDimensions","dimensions","originalNumRows","Math","max","rows","isEmptyTable","dataColumns","isLargeTable","editingState","numRows","setNumRows","current","getNumRows","useEffect","resetEditingState","useCallback","columns","originalColumns","initialWidgetValue","getStringValue","id","formId","fromJson","getCellContent","getOriginalCellContent","sortColumn","getOriginalIndex","syncSelectionState","newSelection","selectionState","selection","toArray","map","row","columnIdx","newWidgetState","JSON","stringify","currentWidgetState","undefined","setStringValue","fromUi","gridSelection","isRowSelectionActivated","isMultiRowSelectionActivated","isColumnSelectionActivated","isMultiColumnSelectionActivated","isRowSelected","isColumnSelected","isCellSelected","clearSelection","processSelectionChange","refreshCells","cells","_dataEditorRef$curren","updateCells","_selectionState$selec","_selectionState$selec2","_selectionState$selec3","_selectionState$selec4","columnNames","column","parse","rowSelection","empty","columnSelection","forEach","add","indexOf","length","initialSelection","updateNumRows","syncEditState","currentEditingState","toJson","exportToCsv","onCellEdited","onPaste","onRowAppended","onDelete","validateCell","tooltip","clearTooltip","onItemHovered","drawCell","customRenderers","transformedColumns","glideColumns","onColumnResize","minHeight","maxHeight","minWidth","maxWidth","resizableSize","setResizableSize","getEmptyStateContent","_ref3","_col","_row","displayData","contentAlign","allowOverlay","themeOverride","textDark","textLight","span","formClearHelper","manageFormClearListener","disconnect","isDynamicAndEditable","freezeColumns","filter","col","isIndex","setTimeout","_resizableContainerRe","_resizableContainerRe2","scrollAreaBounds","querySelector","getBoundingClientRect","clientHeight","clientWidth","className","ref","onMouseDown","e","boundingClient","clientY","top","stopPropagation","clientX","left","onBlur","event","currentTarget","contains","relatedTarget","children","locked","onExpand","onCollapse","target","label","icon","onClick","defaultSize","style","border","concat","borderColor","borderRadius","size","enable","right","bottom","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_ref","_delta","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","rowHeight","headerHeight","resizeIndicator","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","downFill","onKeyDown","ctrlKey","metaKey","key","cv","preventDefault","onSearchClose","onHeaderClicked","colIndex","onGridSelectionChange","onMouseMove","args","kind","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","paddingBottom","paddingRight","imageEditorOverride","checkboxStyle","bgCell","bgHeader","bgCellMedium","rowSelectionMode","rowSelectionBlending","rangeSelectionBlending","columnSelectionBlending","fillHandle","trailingRowOptions","sticky","tint","content"],"sources":["../../../../src/components/widgets/DataFrame/DataFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  GridMouseEventArgs,\n  GridCell,\n  Item as GridCellPosition,\n  CompactSelection,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\nimport {\n  Delete,\n  Add,\n  FileDownload,\n  Search,\n  Close,\n} from \"@emotion-icons/material-outlined\"\n\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\n\nimport EditingState, { getColumnName } from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n  useTooltips,\n  useCustomRenderer,\n  useDataExporter,\n  useSelectionHandler,\n} from \"./hooks\"\nimport {\n  BORDER_THRESHOLD,\n  MIN_COLUMN_WIDTH,\n  MAX_COLUMN_WIDTH,\n  MAX_COLUMN_AUTO_WIDTH,\n  ROW_HEIGHT,\n} from \"./hooks/useTableSizer\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  getTextCell,\n  ImageCellEditor,\n} from \"./columns\"\nimport Tooltip from \"./Tooltip\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\nimport \"@glideapps/glide-data-grid-cells/dist/index.css\"\n\n// Debounce time for triggering a widget state update\n// This prevents rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 150\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n// The size in px of the customized webkit scrollbar (defined in globalStyles)\nconst WEBKIT_SCROLLBAR_SIZE = 6\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code.\nexport interface DataframeState {\n  selection: {\n    rows: number[]\n    // We use column names instead of indices to make\n    // it easier to use and unify with how data editor edits\n    // are stored.\n    columns: string[]\n  }\n}\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n  expand?: () => void\n  collapse?: () => void\n  disableFullscreenMode?: boolean\n  fragmentId?: string\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n  disableFullscreenMode,\n  expand,\n  collapse,\n  fragmentId,\n}: Readonly<DataFrameProps>): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n  const resizableContainerRef = React.useRef<HTMLDivElement>(null)\n\n  const { theme, headerIcons, tableBorderRadius } = useCustomTheme()\n\n  const {\n    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests\n  } = React.useContext(LibContext)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n  const [showSearch, setShowSearch] = React.useState(false)\n  const [hasVerticalScroll, setHasVerticalScroll] =\n    React.useState<boolean>(false)\n  const [hasHorizontalScroll, setHasHorizontalScroll] =\n    React.useState<boolean>(false)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  // Determine if it uses customized scrollbars (webkit browsers):\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar#css.selectors.-webkit-scrollbar\n  const hasCustomizedScrollbars = React.useMemo<boolean>(\n    () =>\n      (window.navigator.userAgent.includes(\"Mac OS\") &&\n        window.navigator.userAgent.includes(\"Safari\")) ||\n      window.navigator.userAgent.includes(\"Chrome\"),\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  /**\n   * On the first rendering, try to load initial widget state if\n   * it exists. This is required in the case that other elements\n   * are inserted before this widget. In this case, it can happen\n   * that the dataframe component is unmounted and thereby loses\n   * its state. Once the same element is rendered again, we try to\n   * reconstruct the state from the widget manager values.\n   */\n  React.useEffect(\n    () => {\n      if (element.editingMode === READ_ONLY) {\n        // We don't need to load the initial widget state\n        // for read-only dataframes.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (!initialWidgetValue) {\n        // No initial widget value was saved in the widget manager.\n        // No need to reconstruct something.\n        return\n      }\n\n      editingState.current.fromJson(initialWidgetValue, originalColumns)\n      setNumRows(editingState.current.getNumRows())\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback is used to synchronize the selection state with the state\n   * of the widget state of the component. This might also send a rerun message\n   * to the backend if the selection state has changed.\n   *\n   * @param newSelection - The new selection state\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncSelectionState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, (newSelection: GridSelection) => {\n      // If we want to support selections also with the editable mode,\n      // we would need to integrate the `syncEditState` and `syncSelections` functions\n      // into a single function that updates the widget state with both the editing\n      // state and the selection state.\n\n      const selectionState: DataframeState = {\n        selection: {\n          rows: [] as number[],\n          columns: [] as string[],\n        },\n      }\n\n      selectionState.selection.rows = newSelection.rows.toArray().map(row => {\n        return getOriginalIndex(row)\n      })\n      selectionState.selection.columns = newSelection.columns\n        .toArray()\n        .map(columnIdx => {\n          return getColumnName(columns[columnIdx])\n        })\n      const newWidgetState = JSON.stringify(selectionState)\n      const currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      // Only update if there is actually a difference to the previous selection state\n      if (\n        currentWidgetState === undefined ||\n        currentWidgetState !== newWidgetState\n      ) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          newWidgetState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      getOriginalIndex,\n      getColumnName,\n    ]\n  )\n\n  const {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  } = useSelectionHandler(\n    element,\n    isEmptyTable,\n    disabled,\n    columns,\n    syncSelectionState\n  )\n\n  React.useEffect(() => {\n    // Clear cell selections if fullscreen mode changes\n    // but keep row & column selections.\n    // In the past we saw some weird side-effects, so we decided to clean\n    // it when entering fullscreen-mode. If we decide to change this, we have\n    // to play around and get to the bottom of it.\n    clearSelection(true, true)\n    // Only run this on changes to the fullscreen mode:\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen])\n\n  // This callback is used to refresh the rendering of specified cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: GridCellPosition\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  /**\n   * On the first rendering, try to load initial selection state\n   * from the widget state if it exists. This is required in the\n   * case that other elements are inserted before this widget.\n   *\n   * This effect needs to run after the fullscreen effect that\n   * clears cell selections, since both modify the same state object.\n   */\n  React.useEffect(\n    () => {\n      if (!isRowSelectionActivated && !isColumnSelectionActivated) {\n        // Only run this if selections are activated.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (initialWidgetValue) {\n        const columnNames: string[] = columns.map(column => {\n          return getColumnName(column)\n        })\n\n        const selectionState: DataframeState = JSON.parse(initialWidgetValue)\n\n        let rowSelection = CompactSelection.empty()\n        let columnSelection = CompactSelection.empty()\n\n        selectionState.selection?.rows?.forEach(row => {\n          rowSelection = rowSelection.add(row)\n        })\n\n        selectionState.selection?.columns?.forEach(column => {\n          columnSelection = columnSelection.add(columnNames.indexOf(column))\n        })\n\n        if (rowSelection.length > 0 || columnSelection.length > 0) {\n          // Update the initial selection state if something was selected\n          const initialSelection: GridSelection = {\n            rows: rowSelection,\n            columns: columnSelection,\n            current: undefined,\n          }\n          processSelectionChange(initialSelection)\n        }\n      }\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  /**\n   * This callback is used to update the number of rows based\n   * on the latest editing state. This is required to keep the\n   * component state in sync with the editing state.\n   */\n  const updateNumRows = React.useCallback(() => {\n    if (numRows !== editingState.current.getNumRows()) {\n      // Reset the number of rows if it has been changed in the editing state\n      setNumRows(editingState.current.getNumRows())\n    }\n  }, [numRows])\n\n  /**\n   * This callback is used to synchronize the editing state with\n   * the widget state of the component. This might also send a rerun message\n   * to the backend if the editing state has changed.\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncEditState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, () => {\n      const currentEditingState = editingState.current.toJson(columns)\n      let currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (currentWidgetState === undefined) {\n        // Create an empty widget state\n        currentWidgetState = new EditingState(0).toJson([])\n      }\n\n      // Only update if there is actually a difference between editing and widget state\n      if (currentEditingState !== currentWidgetState) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          currentEditingState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      columns,\n      editingState.current,\n    ]\n  )\n\n  const { exportToCsv } = useDataExporter(\n    getCellContent,\n    columns,\n    numRows,\n    enforceDownloadInNewTab\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      updateNumRows,\n      syncEditState,\n      clearSelection\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(columns)\n\n  const transformedColumns = React.useMemo(\n    () => columns.map(column => toGlideColumn(column)),\n    [columns]\n  )\n  const { columns: glideColumns, onColumnResize } =\n    useColumnSizer(transformedColumns)\n\n  const {\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    if (!element.formId) {\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(widgetMgr, element.formId, () => {\n      // Clear the editing state and the selection state\n      resetEditingState()\n      clearSelection()\n    })\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, resetEditingState, clearSelection, widgetMgr])\n\n  const isDynamicAndEditable =\n    !isEmptyTable && element.editingMode === DYNAMIC && !disabled\n\n  // The index columns are always at the beginning of the table,\n  // so we can just count them to determine the number of columns\n  // that should be frozen.\n  const freezeColumns = isEmptyTable\n    ? 0\n    : columns.filter((col: BaseColumn) => col.isIndex).length\n\n  // Determine if the table requires horizontal or vertical scrolling:\n  React.useEffect(() => {\n    // The setTimeout is a workaround to get the scroll area bounding box\n    // after the grid has been rendered. Otherwise, the scroll area div\n    // (dvn-stack) might not have been created yet.\n    setTimeout(() => {\n      if (resizableContainerRef.current && dataEditorRef.current) {\n        // Get the bounds of the glide-data-grid scroll area (dvn-stack):\n        const scrollAreaBounds = resizableContainerRef.current\n          ?.querySelector(\".dvn-stack\")\n          ?.getBoundingClientRect()\n\n        // We might also be able to use the following as an alternative,\n        // but it seems to cause \"Maximum update depth exceeded\" when scrollbars\n        // are activated or deactivated.\n        // const scrollAreaBounds = dataEditorRef.current?.getBounds()\n        // Also see: https://github.com/glideapps/glide-data-grid/issues/784\n\n        if (scrollAreaBounds) {\n          setHasVerticalScroll(\n            scrollAreaBounds.height >\n              resizableContainerRef.current.clientHeight\n          )\n          setHasHorizontalScroll(\n            scrollAreaBounds.width > resizableContainerRef.current.clientWidth\n          )\n        }\n      }\n    }, 1)\n  }, [resizableSize, numRows, glideColumns])\n\n  return (\n    <StyledResizableContainer\n      data-testid=\"stDataFrame\"\n      className=\"stDataFrame\"\n      hasCustomizedScrollbars={hasCustomizedScrollbars}\n      ref={resizableContainerRef}\n      onMouseDown={e => {\n        if (resizableContainerRef.current && hasCustomizedScrollbars) {\n          // Prevent clicks on the scrollbar handle to propagate to the grid:\n          const boundingClient =\n            resizableContainerRef.current.getBoundingClientRect()\n\n          if (\n            // For whatever reason, we are still able to use the scrollbars even\n            // if the mouse is one pixel outside of the scrollbar. Therefore, we add\n            // an additional pixel.\n            hasHorizontalScroll &&\n            boundingClient.height - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientY - boundingClient.top\n          ) {\n            e.stopPropagation()\n          }\n          if (\n            hasVerticalScroll &&\n            boundingClient.width - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientX - boundingClient.left\n          ) {\n            e.stopPropagation()\n          }\n        }\n      }}\n      onBlur={event => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        // We also don't want to clear the selection if the user clicks on\n        // on the toolbar by checking that relatedTarget is not a children of\n        // this element. Unfortunately, this check isn't working reliably in Safari.\n        if (\n          !isFocused &&\n          !isTouchDevice &&\n          !event.currentTarget.contains(\n            event.relatedTarget as HTMLElement | null\n          )\n        ) {\n          // Clear cell selections, but keep row & column selections.\n          clearSelection(true, true)\n        }\n      }}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        // Lock the toolbar in some specific situations:\n        locked={\n          (isRowSelected && !isRowSelectionActivated) ||\n          isCellSelected ||\n          (isTouchDevice && isFocused)\n        }\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledResizableContainer}\n      >\n        {((isRowSelectionActivated && isRowSelected) ||\n          (isColumnSelectionActivated && isColumnSelected)) && (\n          // Add clear selection action if selections are active\n          // and a valid selections currently exists. Cell selections\n          // are not relevant since they are not synced to the backend\n          // at the moment.\n          <ToolbarAction\n            label={\"Clear selection\"}\n            icon={Close}\n            onClick={() => {\n              clearSelection()\n              clearTooltip()\n            }}\n          />\n        )}\n        {isDynamicAndEditable && isRowSelected && (\n          <ToolbarAction\n            label={\"Delete row(s)\"}\n            icon={Delete}\n            onClick={() => {\n              if (onDelete) {\n                onDelete(gridSelection)\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {isDynamicAndEditable && !isRowSelected && (\n          <ToolbarAction\n            label={\"Add row\"}\n            icon={Add}\n            onClick={() => {\n              if (onRowAppended) {\n                setIsFocused(true)\n                onRowAppended()\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {!isLargeTable && !isEmptyTable && (\n          <ToolbarAction\n            label={\"Download as CSV\"}\n            icon={FileDownload}\n            onClick={() => exportToCsv()}\n          />\n        )}\n        {!isEmptyTable && (\n          <ToolbarAction\n            label={\"Search\"}\n            icon={Search}\n            onClick={() => {\n              if (!showSearch) {\n                setIsFocused(true)\n                setShowSearch(true)\n              } else {\n                setShowSearch(false)\n              }\n              clearTooltip()\n            }}\n          />\n        )}\n      </Toolbar>\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, ROW_HEIGHT]}\n        snapGap={ROW_HEIGHT / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add additional pixels if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height ===\n                BORDER_THRESHOLD\n                  ? resizableRef.current.size.height + BORDER_THRESHOLD\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={ROW_HEIGHT}\n          headerHeight={ROW_HEIGHT}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={isTouchDevice ? undefined : onColumnResize}\n          // Configure resize indicator to only show on the header:\n          resizeIndicator={\"header\"}\n          // Freeze all index columns:\n          freezeColumns={freezeColumns}\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={true}\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={isTouchDevice ? \"cell\" : \"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate keybindings:\n          keybindings={{ downFill: true }}\n          // Search needs to be activated manually, to support search\n          // via the toolbar:\n          onKeyDown={event => {\n            if ((event.ctrlKey || event.metaKey) && event.key === \"f\") {\n              setShowSearch(cv => !cv)\n              event.stopPropagation()\n              event.preventDefault()\n            }\n          }}\n          showSearch={showSearch}\n          onSearchClose={() => {\n            setShowSearch(false)\n            clearTooltip()\n          }}\n          // Header click is used for column sorting:\n          onHeaderClicked={(colIndex: number, _event) => {\n            if (isEmptyTable || isLargeTable || isColumnSelectionActivated) {\n              // Deactivate sorting for empty state, for large dataframes, or\n              // when column selection is activated.\n              return\n            }\n\n            if (isRowSelectionActivated && isRowSelected) {\n              // Keeping row selections when sorting columns is not supported at the moment.\n              // So we need to clear the selection before we do the sorting.\n              // The reason is that the user would expect the selection to be kept on\n              // the same row after sorting, hover that would require us to map the selection\n              // to the new index of the selected row which adds complexity.\n              clearSelection()\n            }\n            sortColumn(colIndex)\n          }}\n          gridSelection={gridSelection}\n          // We don't have to react to \"onSelectionCleared\" since\n          // we already correctly process selections in\n          // the \"onGridSelectionChange\" callback.\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            // Only allow selection changes if the grid is focused.\n            // This is mainly done because there is a bug when overlay click actions\n            // are outside of the bounds of the table (e.g. select dropdown or date picker).\n            // This results in the first cell being selected for a short period of time\n            // But for touch devices, preventing this can cause issues to select cells.\n            // So we allow selection changes for touch devices even when it is not focused.\n            if (isFocused || isTouchDevice) {\n              processSelectionChange(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use overflow scrollbars, so we need to deactivate the native\n            // scrollbar override:\n            scrollbarWidthOverride: 0,\n            ...(hasCustomizedScrollbars && {\n              // Add negative padding to the right and bottom to allow the scrollbars in\n              // webkit to overlay the table:\n              paddingBottom: hasHorizontalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n              paddingRight: hasVerticalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n            }),\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // Activate features required for row selection:\n          {...(isRowSelectionActivated && {\n            rowMarkers: {\n              // Apply style settings for the row markers column:\n              kind: \"checkbox\",\n              checkboxStyle: \"square\",\n              theme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n            },\n            rowSelectionMode: isMultiRowSelectionActivated ? \"multi\" : \"auto\",\n            rowSelect: disabled\n              ? \"none\"\n              : isMultiRowSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            rowSelectionBlending: \"mixed\",\n            // Deactivate the combination of row selections\n            // and cell selections. This will automatically clear\n            // selected cells when a row is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // Activate features required for column selection:\n          {...(isColumnSelectionActivated && {\n            columnSelect: disabled\n              ? \"none\"\n              : isMultiColumnSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            columnSelectionBlending: \"mixed\",\n            // Deactivate the combination of column selections\n            // and cell selections. This will automatically clear\n            // selected cells when a column is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkers: {\n                kind: \"checkbox\",\n                checkboxStyle: \"square\",\n                theme: {\n                  bgCell: theme.bgHeader,\n                  bgCellMedium: theme.bgHeader,\n                },\n              },\n              rowSelectionMode: \"multi\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame, true)\n"],"mappings":"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"}