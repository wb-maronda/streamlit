{"version":3,"file":"ProgressColumn.js","names":["GridCellKind","Quiver","isNullOrUndefined","notNullOrUndefined","isIntegerType","countDecimals","formatNumber","getEmptyCell","getErrorCell","mergeColumnParameters","toSafeNumber","toSafeString","ProgressColumn","props","arrowTypeName","getTypeName","arrowType","isInteger","parameters","min_value","max_value","step","format","columnTypeOptions","measureLabel","error","fixedDecimals","Number","isNaN","undefined","cellTemplate","kind","Custom","allowOverlay","copyData","contentAlign","contentAlignment","data","min","max","value","label","String","readonly","sortMode","isEditable","getCell","cellData","isSafeInteger","displayData","normalizeCellValue","Math","isMissingValue","getCellValue","cell","Loading","isEditableType"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ProgressColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  countDecimals,\n  formatNumber,\n  getEmptyCell,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeString,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n"],"mappings":"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"}