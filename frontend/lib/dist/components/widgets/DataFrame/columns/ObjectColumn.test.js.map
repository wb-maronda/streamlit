{"version":3,"file":"ObjectColumn.test.js","names":["GridCellKind","ObjectColumn","MOCK_OBJECT_COLUMN_PROPS","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","describe","it","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Text","data","readonly","each","foo","undefined","input","value","cell","getCellValue"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ObjectColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\n\nimport ObjectColumn from \"./ObjectColumn\"\n\nconst MOCK_OBJECT_COLUMN_PROPS = {\n  id: \"1\",\n  name: \"object_column\",\n  title: \"Object column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"object\",\n    numpy_type: \"object\",\n  },\n}\n\ndescribe(\"ObjectColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = ObjectColumn(MOCK_OBJECT_COLUMN_PROPS)\n    expect(mockColumn.kind).toEqual(\"object\")\n    expect(mockColumn.title).toEqual(MOCK_OBJECT_COLUMN_PROPS.title)\n    expect(mockColumn.id).toEqual(MOCK_OBJECT_COLUMN_PROPS.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(\"foo\")\n    expect(mockCell.kind).toEqual(GridCellKind.Text)\n    expect((mockCell as TextCell).data).toEqual(\"foo\")\n  })\n\n  it(\"ignores isEditable configuration\", () => {\n    const mockColumn = ObjectColumn({\n      ...MOCK_OBJECT_COLUMN_PROPS,\n      isEditable: true,\n    })\n\n    // Column should be readonly, even if isEditable was true\n    expect(mockColumn.isEditable).toEqual(false)\n    // Cells from object column should always be readonly\n    expect((mockColumn.getCell(\"foo\") as TextCell).readonly).toEqual(true)\n  })\n\n  it.each([\n    // Object column supports the\n    // same conversions as the text column:\n    [\"foo\", \"foo\"],\n    [\"abc def 1234 $\", \"abc def 1234 $\"],\n    [1, \"1\"],\n    [0, \"0\"],\n    [0.123, \"0.123\"],\n    [\"\", \"\"],\n    [[], \"\"],\n    [[\"foo\", \"bar\"], \"foo,bar\"],\n    [[1, 2, 0.1231], \"1,2,0.1231\"],\n    [true, \"true\"],\n    [\n      {\n        foo: \"bar\",\n      },\n      \"[object Object]\",\n    ],\n    [null, null],\n    [undefined, null],\n  ])(\n    \"supports string-compatible value (%p parsed as %p)\",\n    (input: any, value: string | null) => {\n      const mockColumn = ObjectColumn(MOCK_OBJECT_COLUMN_PROPS)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n})\n"],"mappings":"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"}