{"version":3,"file":"NumberColumn.test.js","names":["GridCellKind","isErrorCell","NumberColumn","MOCK_FLOAT_ARROW_TYPE","pandas_type","numpy_type","MOCK_INT_ARROW_TYPE","MOCK_UINT_ARROW_TYPE","NUMBER_COLUMN_TEMPLATE","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","getNumberColumn","arrowType","params","columnTypeOptions","describe","it","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Number","displayData","data","contentAlign","each","undefined","input","value","cell","getCellValue","fixedDecimals","allowNegative","valid","validateInput","step","displayValue","min_value","max_value","validation","unsafeCell","safeCell","format","expectedCopyData","copyData"],"sources":["../../../../../src/components/widgets/DataFrame/columns/NumberColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable  @typescript-eslint/no-non-null-assertion */\n\nimport { GridCellKind, NumberCell, TextCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  DataType,\n  Type as ArrowType,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\n\nimport { BaseColumnProps, isErrorCell } from \"./utils\"\nimport NumberColumn, { NumberColumnParams } from \"./NumberColumn\"\n\nconst MOCK_FLOAT_ARROW_TYPE: ArrowType = {\n  pandas_type: \"float64\",\n  numpy_type: \"float64\",\n}\n\nconst MOCK_INT_ARROW_TYPE: ArrowType = {\n  pandas_type: \"int64\",\n  numpy_type: \"int64\",\n}\n\nconst MOCK_UINT_ARROW_TYPE: ArrowType = {\n  pandas_type: \"uint64\",\n  numpy_type: \"uint64\",\n}\n\nconst NUMBER_COLUMN_TEMPLATE: Partial<BaseColumnProps> = {\n  id: \"1\",\n  name: \"number_column\",\n  title: \"Number column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n}\n\nfunction getNumberColumn(\n  arrowType: ArrowType,\n  params?: NumberColumnParams\n): ReturnType<typeof NumberColumn> {\n  return NumberColumn({\n    ...NUMBER_COLUMN_TEMPLATE,\n    arrowType,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\ndescribe(\"NumberColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE)\n    expect(mockColumn.kind).toEqual(\"number\")\n    expect(mockColumn.title).toEqual(NUMBER_COLUMN_TEMPLATE.title)\n    expect(mockColumn.id).toEqual(NUMBER_COLUMN_TEMPLATE.id)\n    expect(mockColumn.isEditable).toEqual(NUMBER_COLUMN_TEMPLATE.isEditable)\n    expect(mockColumn.sortMode).toEqual(\"smart\")\n\n    const mockCell = mockColumn.getCell(\"1.234\")\n    expect(mockCell.kind).toEqual(GridCellKind.Number)\n    expect((mockCell as NumberCell).displayData).toEqual(\"1.234\")\n    expect((mockCell as NumberCell).data).toEqual(1.234)\n  })\n\n  it(\"alignes numbers to the right\", () => {\n    const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE)\n    const mockCell = mockColumn.getCell(\"1.123\")\n    expect(mockCell.contentAlign).toEqual(\"right\")\n  })\n\n  it.each([\n    [true, 1],\n    [false, 0],\n    [\"4.12\", 4.12],\n    [\"-4.12\", -4.12],\n    [\"4\", 4],\n    [1.3122, 1.3122],\n    [-1.3122, -1.3122],\n    [\"1,212.12\", 1212.12],\n    [\".1312314\", 0.1312314],\n    [null, null],\n    [undefined, null],\n    [\"\", null],\n  ])(\n    \"supports float64 value (%p parsed as %p)\",\n    (input: DataType | null | undefined, value: number | null) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it.each([\n    [100, 100],\n    [-100, -100],\n    [\"4\", 4],\n    [\"4.12\", 4],\n    [\"4.61\", 4],\n    [\"-4.12\", -4],\n    [1.3122, 1],\n    [-1.3122, -1],\n    [\"1,212\", 1212],\n    [\"1,212,123,312\", 1212123312],\n    [null, null],\n  ])(\n    \"supports integer value (%p parsed as %p)\",\n    (input: DataType | null, value: number | null) => {\n      const mockColumn = getNumberColumn(MOCK_INT_ARROW_TYPE)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it(\"properly configures the column for unsigned integers\", () => {\n    const mockColumn = getNumberColumn(MOCK_UINT_ARROW_TYPE)\n    expect(mockColumn.kind).toEqual(\"number\")\n\n    const mockCell = mockColumn.getCell(\"104\")\n    expect(mockCell.kind).toEqual(GridCellKind.Number)\n    expect((mockCell as any).fixedDecimals).toEqual(0)\n    expect((mockCell as any).allowNegative).toEqual(false)\n  })\n\n  it.each([\n    [100, true],\n    [-100, false],\n    [\"4\", true],\n    [\"-4.12\", false],\n  ])(\n    \"supports unsigned integer validation (%p validates to %p)\",\n    (input: DataType | null, valid: boolean) => {\n      const mockColumn = getNumberColumn(MOCK_UINT_ARROW_TYPE)\n      expect(mockColumn.validateInput!(input)).toEqual(valid)\n    }\n  )\n\n  it.each([\n    [0, 1.234567, 1],\n    [0.1, 1.234567, 1.2],\n    [0.01, 1.234567, 1.23],\n    [0.001, 1.234567, 1.234],\n    [0.0001, 1.234567, 1.2345],\n    [0.001, 1.1, 1.1],\n    [0.00000001, 1, 1],\n  ])(\n    \"converts value to precision from step %p (%p converted to %p)\",\n    (step: number, input: DataType, value: number | null) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        step,\n      })\n      const mockCell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(mockCell)).toEqual(value)\n    }\n  )\n\n  it.each([\n    [0, 1.234567, \"1\"],\n    [0.1, 1.234567, \"1.2\"],\n    [0.01, 1.234567, \"1.23\"],\n    [0.001, 1.234567, \"1.234\"],\n    [0.0001, 1.234567, \"1.2345\"],\n    [0.001, 1.1, \"1.100\"],\n    [0.00000001, 1, \"1.00000000\"],\n  ])(\n    \"correctly adapts default value to precision from step %p (%p displayed as %p)\",\n    (step: number, input: DataType, displayValue: string) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        step,\n      })\n      const mockCell = mockColumn.getCell(input)\n      expect((mockCell as NumberCell).displayData).toEqual(displayValue)\n    }\n  )\n\n  it.each([\n    [10, 10, true],\n    [10, 100, true],\n    [10, 5, false],\n    [10, -5, false],\n  ])(\n    \"supports minimal value configuration %p (%p validates to %p)\",\n    (min_value: number, input: DataType, valid: boolean) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        min_value,\n      })\n      expect(mockColumn.validateInput!(input)).toEqual(valid)\n    }\n  )\n\n  it.each([\n    [10, 10, true],\n    [10, 100, 10],\n    [10, 5, true],\n    [10, -5, true],\n  ])(\n    \"supports maximal value configuration %p (%p validates to %p)\",\n    (max_value: number, input: DataType, validation: number | boolean) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        max_value,\n      })\n      expect(mockColumn.validateInput!(input)).toEqual(validation)\n    }\n  )\n\n  it.each([\n    [[]],\n    [\"foo\"],\n    [[1, 2]],\n    [\"123.124.123\"],\n    [\"--123\"],\n    [\"2,,2\"],\n    [\"12345678987654321\"],\n  ])(\"%p results in error cell\", (input: any) => {\n    const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE)\n    const cell = mockColumn.getCell(input)\n    expect(isErrorCell(cell)).toEqual(true)\n  })\n\n  it(\"shows an error cell if the numeric value is too large\", () => {\n    const mockColumn = getNumberColumn(MOCK_INT_ARROW_TYPE)\n    const unsafeCell = mockColumn.getCell(\"1234567898765432123\")\n    expect(isErrorCell(unsafeCell)).toEqual(true)\n    expect((unsafeCell as TextCell)?.data).toEqual(\n      \"⚠️ 1234567898765432123\\n\\nThe value is larger than the maximum supported integer values in number columns (2^53).\\n\"\n    )\n  })\n\n  it(\"doesn't show an error for large integers with a size up to 2^53\", () => {\n    const mockColumn = getNumberColumn(MOCK_INT_ARROW_TYPE)\n\n    const safeCell = mockColumn.getCell(\"1234567898765432\")\n    expect(isErrorCell(safeCell)).toEqual(false)\n  })\n\n  it.each([\n    // This should support everything that is supported by formatNumber\n    // So we are not testing all the cases here, just a few to make sure it works\n    // All other cases are tested for formatNumber in utils.test.ts\n    [10.123, \"%d\", \"10\"],\n    [10.123, \"%i\", \"10\"],\n    [10.123, \"%u\", \"10\"],\n    [10.123, \"%f\", \"10.123\"],\n    [10.123, \"%g\", \"10.123\"],\n    [10, \"$%.2f\", \"$10.00\"],\n    [10.126, \"$%.2f\", \"$10.13\"],\n    [10.123, \"%.2f€\", \"10.12€\"],\n    [10.126, \"($%.2f)\", \"($10.13)\"],\n    [65, \"%d years\", \"65 years\"],\n    [1234567898765432, \"%d ⭐\", \"1234567898765432 ⭐\"],\n    [72.3, \"%.1f%%\", \"72.3%\"],\n    [-5.678, \"%.1f\", \"-5.7\"],\n    [0.12, \"percent\", \"12.00%\"],\n    [1100, \"compact\", \"1.1K\"],\n  ])(\n    \"formats %p with sprintf format %p to %p\",\n    (input: number, format: string, displayValue: string) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        format,\n      })\n\n      const cell = mockColumn.getCell(input)\n      expect((cell as NumberCell).displayData).toEqual(displayValue)\n    }\n  )\n\n  it.each([\n    [10, \"%d %d\"],\n    [1234567.89, \"%'_,.2f\"],\n    [1234.5678, \"%+.2E\"],\n    [0.000123456, \"%+.2E\"],\n    [-0.000123456, \"%+.2E\"],\n    [255, \"%#x\"],\n    [4096, \"%#X\"],\n    [42, \"% d\"],\n    [1000, \"%,.0f\"],\n    [25000.25, \"$%,.2f\"],\n    [9876543210, \"%,.0f\"],\n  ])(\n    \"cannot format %p using the sprintf format %p\",\n    (input: number, format: string) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        format,\n      })\n\n      const cell = mockColumn.getCell(input)\n      expect(isErrorCell(cell)).toEqual(true)\n    }\n  )\n\n  it.each([\n    [10, \"10\"],\n    [1234567, \"1234567\"],\n    [12345.678, \"12345.678\"],\n    [-0.000123456, \"-0.000123456\"],\n    [null, \"\"],\n    [undefined, \"\"],\n  ])(\n    \"uses raw number for copyData so that %p is copied as %p\",\n    (input: number | null | undefined, expectedCopyData: string) => {\n      const mockColumn = getNumberColumn(MOCK_FLOAT_ARROW_TYPE, {\n        format: \"$%.2f\",\n      })\n\n      const cell = mockColumn.getCell(input)\n      expect(cell.copyData).toEqual(expectedCopyData)\n    }\n  )\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAA8B,4BAA4B;AAO/E,SAA0BC,WAAW;AACrC,OAAOC,YAAY;AAEnB,MAAMC,qBAAgC,GAAG;EACvCC,WAAW,EAAE,SAAS;EACtBC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,mBAA8B,GAAG;EACrCF,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE;AACd,CAAC;AAED,MAAME,oBAA+B,GAAG;EACtCH,WAAW,EAAE,QAAQ;EACrBC,UAAU,EAAE;AACd,CAAC;AAED,MAAMG,sBAAgD,GAAG;EACvDC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE,eAAe;EACtBC,WAAW,EAAE,CAAC;EACdC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAE,KAAK;EACdC,WAAW,EAAE;AACf,CAAC;AAED,SAASC,eAAeA,CACtBC,SAAoB,EACpBC,MAA2B,EACM;EACjC,OAAOjB,YAAY,CAAC;IAClB,GAAGM,sBAAsB;IACzBU,SAAS;IACTE,iBAAiB,EAAED;EACrB,CAAoB,CAAC;AACvB;AAEAE,QAAQ,CAAC,cAAc,EAAE,MAAM;EAC7BC,EAAE,CAAC,iCAAiC,EAAE,MAAM;IAC1C,MAAMC,UAAU,GAAGN,eAAe,CAACd,qBAAqB,CAAC;IACzDqB,MAAM,CAACD,UAAU,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC;IACzCF,MAAM,CAACD,UAAU,CAACZ,KAAK,CAAC,CAACe,OAAO,CAAClB,sBAAsB,CAACG,KAAK,CAAC;IAC9Da,MAAM,CAACD,UAAU,CAACd,EAAE,CAAC,CAACiB,OAAO,CAAClB,sBAAsB,CAACC,EAAE,CAAC;IACxDe,MAAM,CAACD,UAAU,CAACV,UAAU,CAAC,CAACa,OAAO,CAAClB,sBAAsB,CAACK,UAAU,CAAC;IACxEW,MAAM,CAACD,UAAU,CAACI,QAAQ,CAAC,CAACD,OAAO,CAAC,OAAO,CAAC;IAE5C,MAAME,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAAC,OAAO,CAAC;IAC5CL,MAAM,CAACI,QAAQ,CAACH,IAAI,CAAC,CAACC,OAAO,CAAC1B,YAAY,CAAC8B,MAAM,CAAC;IAClDN,MAAM,CAAEI,QAAQ,CAAgBG,WAAW,CAAC,CAACL,OAAO,CAAC,OAAO,CAAC;IAC7DF,MAAM,CAAEI,QAAQ,CAAgBI,IAAI,CAAC,CAACN,OAAO,CAAC,KAAK,CAAC;EACtD,CAAC,CAAC;EAEFJ,EAAE,CAAC,8BAA8B,EAAE,MAAM;IACvC,MAAMC,UAAU,GAAGN,eAAe,CAACd,qBAAqB,CAAC;IACzD,MAAMyB,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAAC,OAAO,CAAC;IAC5CL,MAAM,CAACI,QAAQ,CAACK,YAAY,CAAC,CAACP,OAAO,CAAC,OAAO,CAAC;EAChD,CAAC,CAAC;EAEFJ,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,IAAI,EAAE,CAAC,CAAC,EACT,CAAC,KAAK,EAAE,CAAC,CAAC,EACV,CAAC,MAAM,EAAE,IAAI,CAAC,EACd,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAChB,CAAC,GAAG,EAAE,CAAC,CAAC,EACR,CAAC,MAAM,EAAE,MAAM,CAAC,EAChB,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,EAClB,CAAC,UAAU,EAAE,OAAO,CAAC,EACrB,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAACC,SAAS,EAAE,IAAI,CAAC,EACjB,CAAC,EAAE,EAAE,IAAI,CAAC,CACX,CAAC,CACA,0CAA0C,EAC1C,CAACC,KAAkC,EAAEC,KAAoB,KAAK;IAC5D,MAAMd,UAAU,GAAGN,eAAe,CAACd,qBAAqB,CAAC;IACzD,MAAMmC,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAACD,UAAU,CAACgB,YAAY,CAACD,IAAI,CAAC,CAAC,CAACZ,OAAO,CAACW,KAAK,CAAC;EACtD,CACF,CAAC;EAEDf,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EACZ,CAAC,GAAG,EAAE,CAAC,CAAC,EACR,CAAC,MAAM,EAAE,CAAC,CAAC,EACX,CAAC,MAAM,EAAE,CAAC,CAAC,EACX,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,MAAM,EAAE,CAAC,CAAC,EACX,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EACb,CAAC,OAAO,EAAE,IAAI,CAAC,EACf,CAAC,eAAe,EAAE,UAAU,CAAC,EAC7B,CAAC,IAAI,EAAE,IAAI,CAAC,CACb,CAAC,CACA,0CAA0C,EAC1C,CAACE,KAAsB,EAAEC,KAAoB,KAAK;IAChD,MAAMd,UAAU,GAAGN,eAAe,CAACX,mBAAmB,CAAC;IACvD,MAAMgC,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAACD,UAAU,CAACgB,YAAY,CAACD,IAAI,CAAC,CAAC,CAACZ,OAAO,CAACW,KAAK,CAAC;EACtD,CACF,CAAC;EAEDf,EAAE,CAAC,sDAAsD,EAAE,MAAM;IAC/D,MAAMC,UAAU,GAAGN,eAAe,CAACV,oBAAoB,CAAC;IACxDiB,MAAM,CAACD,UAAU,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC;IAEzC,MAAME,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAAC,KAAK,CAAC;IAC1CL,MAAM,CAACI,QAAQ,CAACH,IAAI,CAAC,CAACC,OAAO,CAAC1B,YAAY,CAAC8B,MAAM,CAAC;IAClDN,MAAM,CAAEI,QAAQ,CAASY,aAAa,CAAC,CAACd,OAAO,CAAC,CAAC,CAAC;IAClDF,MAAM,CAAEI,QAAQ,CAASa,aAAa,CAAC,CAACf,OAAO,CAAC,KAAK,CAAC;EACxD,CAAC,CAAC;EAEFJ,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EACb,CAAC,GAAG,EAAE,IAAI,CAAC,EACX,CAAC,OAAO,EAAE,KAAK,CAAC,CACjB,CAAC,CACA,2DAA2D,EAC3D,CAACE,KAAsB,EAAEM,KAAc,KAAK;IAC1C,MAAMnB,UAAU,GAAGN,eAAe,CAACV,oBAAoB,CAAC;IACxDiB,MAAM,CAACD,UAAU,CAACoB,aAAa,CAAEP,KAAK,CAAC,CAAC,CAACV,OAAO,CAACgB,KAAK,CAAC;EACzD,CACF,CAAC;EAEDpB,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAChB,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,EACpB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,EACtB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,EACxB,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,EAC1B,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,EACjB,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CACnB,CAAC,CACA,+DAA+D,EAC/D,CAACU,IAAY,EAAER,KAAe,EAAEC,KAAoB,KAAK;IACvD,MAAMd,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxDyC;IACF,CAAC,CAAC;IACF,MAAMhB,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IAC1CZ,MAAM,CAACD,UAAU,CAACgB,YAAY,CAACX,QAAQ,CAAC,CAAC,CAACF,OAAO,CAACW,KAAK,CAAC;EAC1D,CACF,CAAC;EAEDf,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAClB,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,EACtB,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,EACxB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,EAC1B,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAC5B,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,EACrB,CAAC,UAAU,EAAE,CAAC,EAAE,YAAY,CAAC,CAC9B,CAAC,CACA,+EAA+E,EAC/E,CAACU,IAAY,EAAER,KAAe,EAAES,YAAoB,KAAK;IACvD,MAAMtB,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxDyC;IACF,CAAC,CAAC;IACF,MAAMhB,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IAC1CZ,MAAM,CAAEI,QAAQ,CAAgBG,WAAW,CAAC,CAACL,OAAO,CAACmB,YAAY,CAAC;EACpE,CACF,CAAC;EAEDvB,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EACd,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,EACf,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,EACd,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAChB,CAAC,CACA,8DAA8D,EAC9D,CAACY,SAAiB,EAAEV,KAAe,EAAEM,KAAc,KAAK;IACtD,MAAMnB,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxD2C;IACF,CAAC,CAAC;IACFtB,MAAM,CAACD,UAAU,CAACoB,aAAa,CAAEP,KAAK,CAAC,CAAC,CAACV,OAAO,CAACgB,KAAK,CAAC;EACzD,CACF,CAAC;EAEDpB,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EACd,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,EACb,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EACb,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CACf,CAAC,CACA,8DAA8D,EAC9D,CAACa,SAAiB,EAAEX,KAAe,EAAEY,UAA4B,KAAK;IACpE,MAAMzB,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxD4C;IACF,CAAC,CAAC;IACFvB,MAAM,CAACD,UAAU,CAACoB,aAAa,CAAEP,KAAK,CAAC,CAAC,CAACV,OAAO,CAACsB,UAAU,CAAC;EAC9D,CACF,CAAC;EAED1B,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,EAAE,CAAC,EACJ,CAAC,KAAK,CAAC,EACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACR,CAAC,aAAa,CAAC,EACf,CAAC,OAAO,CAAC,EACT,CAAC,MAAM,CAAC,EACR,CAAC,mBAAmB,CAAC,CACtB,CAAC,CAAC,0BAA0B,EAAGE,KAAU,IAAK;IAC7C,MAAMb,UAAU,GAAGN,eAAe,CAACd,qBAAqB,CAAC;IACzD,MAAMmC,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAACvB,WAAW,CAACqC,IAAI,CAAC,CAAC,CAACZ,OAAO,CAAC,IAAI,CAAC;EACzC,CAAC,CAAC;EAEFJ,EAAE,CAAC,uDAAuD,EAAE,MAAM;IAChE,MAAMC,UAAU,GAAGN,eAAe,CAACX,mBAAmB,CAAC;IACvD,MAAM2C,UAAU,GAAG1B,UAAU,CAACM,OAAO,CAAC,qBAAqB,CAAC;IAC5DL,MAAM,CAACvB,WAAW,CAACgD,UAAU,CAAC,CAAC,CAACvB,OAAO,CAAC,IAAI,CAAC;IAC7CF,MAAM,CAAEyB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAejB,IAAI,CAAC,CAACN,OAAO,CAC5C,qHACF,CAAC;EACH,CAAC,CAAC;EAEFJ,EAAE,CAAC,iEAAiE,EAAE,MAAM;IAC1E,MAAMC,UAAU,GAAGN,eAAe,CAACX,mBAAmB,CAAC;IAEvD,MAAM4C,QAAQ,GAAG3B,UAAU,CAACM,OAAO,CAAC,kBAAkB,CAAC;IACvDL,MAAM,CAACvB,WAAW,CAACiD,QAAQ,CAAC,CAAC,CAACxB,OAAO,CAAC,KAAK,CAAC;EAC9C,CAAC,CAAC;EAEFJ,EAAE,CAACY,IAAI,CAAC;EACN;EACA;EACA;EACA,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,EACpB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,EACpB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,EACpB,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,EACxB,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,EACxB,CAAC,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,EACvB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,EAC3B,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,EAC3B,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,EAC/B,CAAC,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,EAC5B,CAAC,gBAAgB,EAAE,MAAM,EAAE,oBAAoB,CAAC,EAChD,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,EACzB,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,EACxB,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,EAC3B,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAC1B,CAAC,CACA,yCAAyC,EACzC,CAACE,KAAa,EAAEe,MAAc,EAAEN,YAAoB,KAAK;IACvD,MAAMtB,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxDgD;IACF,CAAC,CAAC;IAEF,MAAMb,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAAEc,IAAI,CAAgBP,WAAW,CAAC,CAACL,OAAO,CAACmB,YAAY,CAAC;EAChE,CACF,CAAC;EAEDvB,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,EAAE,EAAE,OAAO,CAAC,EACb,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB,CAAC,SAAS,EAAE,OAAO,CAAC,EACpB,CAAC,WAAW,EAAE,OAAO,CAAC,EACtB,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC,EACvB,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,IAAI,EAAE,KAAK,CAAC,EACb,CAAC,EAAE,EAAE,KAAK,CAAC,EACX,CAAC,IAAI,EAAE,OAAO,CAAC,EACf,CAAC,QAAQ,EAAE,QAAQ,CAAC,EACpB,CAAC,UAAU,EAAE,OAAO,CAAC,CACtB,CAAC,CACA,8CAA8C,EAC9C,CAACE,KAAa,EAAEe,MAAc,KAAK;IACjC,MAAM5B,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxDgD;IACF,CAAC,CAAC;IAEF,MAAMb,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAACvB,WAAW,CAACqC,IAAI,CAAC,CAAC,CAACZ,OAAO,CAAC,IAAI,CAAC;EACzC,CACF,CAAC;EAEDJ,EAAE,CAACY,IAAI,CAAC,CACN,CAAC,EAAE,EAAE,IAAI,CAAC,EACV,CAAC,OAAO,EAAE,SAAS,CAAC,EACpB,CAAC,SAAS,EAAE,WAAW,CAAC,EACxB,CAAC,CAAC,WAAW,EAAE,cAAc,CAAC,EAC9B,CAAC,IAAI,EAAE,EAAE,CAAC,EACV,CAACC,SAAS,EAAE,EAAE,CAAC,CAChB,CAAC,CACA,yDAAyD,EACzD,CAACC,KAAgC,EAAEgB,gBAAwB,KAAK;IAC9D,MAAM7B,UAAU,GAAGN,eAAe,CAACd,qBAAqB,EAAE;MACxDgD,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMb,IAAI,GAAGf,UAAU,CAACM,OAAO,CAACO,KAAK,CAAC;IACtCZ,MAAM,CAACc,IAAI,CAACe,QAAQ,CAAC,CAAC3B,OAAO,CAAC0B,gBAAgB,CAAC;EACjD,CACF,CAAC;AACH,CAAC,CAAC"}