{"version":3,"file":"ListColumn.js","names":["GridCellKind","isNullOrUndefined","toSafeArray","toSafeString","isMissingValueCell","ListColumn","props","cellTemplate","kind","Bubble","data","allowOverlay","contentAlign","contentAlignment","style","isIndex","sortMode","isEditable","getCell","cellData","isMissingValue","copyData","map","x","includes","replace","getCellValue","cell","isEditableType"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ListColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeArray,\n  toSafeString,\n  isMissingValueCell,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                typeof x === \"string\" && x.includes(\",\")\n                  ? x.replace(/,/g, \" \")\n                  : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAA+BA,YAAY,QAAQ,4BAA4B;AAE/E,SAASC,iBAAiB;AAE1B,SAGEC,WAAW,EACXC,YAAY,EACZC,kBAAkB;;AAGpB;AACA;AACA;AACA,SAASC,UAAUA,CAACC,KAAsB,EAAc;EACtD,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAER,YAAY,CAACS,MAAM;IACzBC,IAAI,EAAE,EAAE;IACRC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAEN,KAAK,CAACO,gBAAgB;IACpCC,KAAK,EAAER,KAAK,CAACS,OAAO,GAAG,OAAO,GAAG;EACnC,CAAe;EAEf,OAAO;IACL,GAAGT,KAAK;IACRE,IAAI,EAAE,MAAM;IACZQ,QAAQ,EAAE,SAAS;IACnBC,UAAU,EAAE,KAAK;IAAE;IACnBC,OAAOA,CAACR,IAAU,EAAY;MAC5B,MAAMS,QAAQ,GAAGlB,iBAAiB,CAACS,IAAI,CAAC,GAAG,EAAE,GAAGR,WAAW,CAACQ,IAAI,CAAC;MAEjE,OAAO;QACL,GAAGH,YAAY;QACfG,IAAI,EAAES,QAAQ;QACdC,cAAc,EAAEnB,iBAAiB,CAACS,IAAI,CAAC;QACvCW,QAAQ,EAAEpB,iBAAiB,CAACS,IAAI,CAAC,GAC7B,EAAE,GACFP,YAAY,CACVgB,QAAQ,CAACG,GAAG,CAAEC,CAAM;QAClB;QACA;QACA,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,GACpCD,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,GACpBF,CACN,CACF;MACN,CAAC;IACH,CAAC;IACDG,YAAYA,CAACC,IAAgB,EAAmB;MAC9C,IAAI1B,iBAAiB,CAAC0B,IAAI,CAACjB,IAAI,CAAC,IAAIN,kBAAkB,CAACuB,IAAI,CAAC,EAAE;QAC5D,OAAO,IAAI;MACb;MAEA,OAAOA,IAAI,CAACjB,IAAI;IAClB;EACF,CAAC;AACH;AAEAL,UAAU,CAACuB,cAAc,GAAG,KAAK;AAEjC,eAAevB,UAAU"}