{"version":3,"file":"SelectboxColumn.test.js","names":["GridCellKind","isErrorCell","isMissingValueCell","SelectboxColumn","MOCK_CATEGORICAL_TYPE","pandas_type","numpy_type","MOCK_BOOLEAN_ARROW_TYPE","SELECTBOX_COLUMN_TEMPLATE","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","getSelectboxColumn","arrowType","params","column_props_overwrites","columnTypeOptions","describe","it","mockColumn","options","expect","kind","toEqual","sortMode","mockCell","getCell","Custom","getCellValue","data","allowedValues","isRequired","errorCell","each","undefined","input"],"sources":["../../../../../src/components/widgets/DataFrame/columns/SelectboxColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Type as ArrowType } from \"@streamlit/lib/src/dataframes/Quiver\"\n\nimport { BaseColumnProps, isErrorCell, isMissingValueCell } from \"./utils\"\nimport SelectboxColumn, { SelectboxColumnParams } from \"./SelectboxColumn\"\n\nconst MOCK_CATEGORICAL_TYPE: ArrowType = {\n  pandas_type: \"int8\",\n  numpy_type: \"categorical\",\n}\n\nconst MOCK_BOOLEAN_ARROW_TYPE: ArrowType = {\n  pandas_type: \"bool\",\n  numpy_type: \"bool\",\n}\n\nconst SELECTBOX_COLUMN_TEMPLATE: Partial<BaseColumnProps> = {\n  id: \"1\",\n  name: \"selectbox_column\",\n  title: \"Selectbox column\",\n  indexNumber: 0,\n  isEditable: true,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n}\n\nfunction getSelectboxColumn(\n  arrowType: ArrowType,\n  params?: SelectboxColumnParams,\n  column_props_overwrites?: Partial<BaseColumnProps>\n): ReturnType<typeof SelectboxColumn> {\n  return SelectboxColumn({\n    ...SELECTBOX_COLUMN_TEMPLATE,\n    ...column_props_overwrites,\n    arrowType,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\ndescribe(\"SelectboxColumn\", () => {\n  it(\"creates a valid column instance with string values\", () => {\n    const mockColumn = getSelectboxColumn(MOCK_CATEGORICAL_TYPE, {\n      options: [\"foo\", \"bar\"],\n    })\n    expect(mockColumn.kind).toEqual(\"selectbox\")\n    expect(mockColumn.title).toEqual(SELECTBOX_COLUMN_TEMPLATE.title)\n    expect(mockColumn.id).toEqual(SELECTBOX_COLUMN_TEMPLATE.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(\"foo\")\n    expect(mockCell.kind).toEqual(GridCellKind.Custom)\n    expect(mockColumn.getCellValue(mockCell)).toEqual(\"foo\")\n\n    expect((mockCell as DropdownCellType).data.allowedValues).toEqual([\n      null,\n      \"foo\",\n      \"bar\",\n    ])\n  })\n\n  it(\"creates a valid column instance number values\", () => {\n    const mockColumn = getSelectboxColumn(MOCK_CATEGORICAL_TYPE, {\n      options: [1, 2, 3],\n    })\n    expect(mockColumn.kind).toEqual(\"selectbox\")\n    expect(mockColumn.title).toEqual(SELECTBOX_COLUMN_TEMPLATE.title)\n    expect(mockColumn.id).toEqual(SELECTBOX_COLUMN_TEMPLATE.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(1)\n    expect(mockCell.kind).toEqual(GridCellKind.Custom)\n    expect(mockColumn.getCellValue(mockCell)).toEqual(1)\n\n    expect((mockCell as DropdownCellType).data.allowedValues).toEqual([\n      null,\n      \"1\",\n      \"2\",\n      \"3\",\n    ])\n  })\n\n  it(\"creates a valid column instance from boolean type\", () => {\n    const mockColumn = getSelectboxColumn(MOCK_BOOLEAN_ARROW_TYPE)\n    expect(mockColumn.kind).toEqual(\"selectbox\")\n    expect(mockColumn.title).toEqual(SELECTBOX_COLUMN_TEMPLATE.title)\n\n    const mockCell = mockColumn.getCell(true)\n    expect(mockCell.kind).toEqual(GridCellKind.Custom)\n    expect(mockColumn.getCellValue(mockCell)).toEqual(true)\n\n    expect((mockCell as DropdownCellType).data.allowedValues).toEqual([\n      null,\n      \"true\",\n      \"false\",\n    ])\n  })\n\n  it(\"creates a required column that does not add the empty value\", () => {\n    const mockColumn = getSelectboxColumn(\n      MOCK_CATEGORICAL_TYPE,\n      {\n        options: [\"foo\", \"bar\"],\n      },\n      { isRequired: true }\n    )\n    const mockCell = mockColumn.getCell(\"foo\")\n    expect((mockCell as DropdownCellType).data.allowedValues).toEqual([\n      \"foo\",\n      \"bar\",\n    ])\n\n    const errorCell = mockColumn.getCell(null, true)\n    expect(isErrorCell(errorCell)).toEqual(true)\n  })\n\n  it(\"creates error cell if value is not in options\", () => {\n    const mockColumn = getSelectboxColumn(MOCK_CATEGORICAL_TYPE, {\n      options: [\"foo\", \"bar\"],\n    })\n    const mockCell = mockColumn.getCell(\"baz\", true)\n    expect(isErrorCell(mockCell)).toEqual(true)\n  })\n\n  it.each([[null], [undefined], [\"\"]])(\n    \"%p is interpreted as missing value\",\n    (input: any) => {\n      const mockColumn = getSelectboxColumn(MOCK_CATEGORICAL_TYPE, {\n        options: [\"foo\", \"bar\"],\n      })\n      const mockCell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(mockCell)).toEqual(null)\n      expect(isMissingValueCell(mockCell)).toEqual(true)\n    }\n  )\n})\n"],"mappings":"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"}