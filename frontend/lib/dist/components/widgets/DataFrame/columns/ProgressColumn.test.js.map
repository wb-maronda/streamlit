{"version":3,"file":"ProgressColumn.test.js","names":["GridCellKind","isErrorCell","ProgressColumn","PROGRESS_COLUMN_TEMPLATE","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","getProgressColumn","params","columnTypeOptions","describe","it","_data","_data2","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Custom","data","value","label","_data3","_data4","mockColumn1","min_value","max_value","mockCell1","mockColumn2","mockCell2","mockColumn3","undefined","mockCell3","each","input","cell","getCellValue","format","displayValue","unsafeCell","_data5","_data6","_data7","_data8","_data9","min","max","step","_data10","_data11","_data12","_data13","_data14"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ProgressColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { BaseColumnProps, isErrorCell } from \"./utils\"\nimport ProgressColumn, { ProgressColumnParams } from \"./ProgressColumn\"\n\nconst PROGRESS_COLUMN_TEMPLATE = {\n  id: \"1\",\n  name: \"progress_column\",\n  title: \"Progress column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"float64\",\n    numpy_type: \"float64\",\n  },\n} as BaseColumnProps\n\nfunction getProgressColumn(\n  params?: ProgressColumnParams\n): ReturnType<typeof ProgressColumn> {\n  return ProgressColumn({\n    ...PROGRESS_COLUMN_TEMPLATE,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\ndescribe(\"ProgressColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = getProgressColumn()\n    expect(mockColumn.kind).toEqual(\"progress\")\n    expect(mockColumn.title).toEqual(PROGRESS_COLUMN_TEMPLATE.title)\n    expect(mockColumn.id).toEqual(PROGRESS_COLUMN_TEMPLATE.id)\n    expect(mockColumn.sortMode).toEqual(\"smart\")\n\n    // Column should be readonly:\n    expect(mockColumn.isEditable).toEqual(false)\n\n    const mockCell = mockColumn.getCell(0.5)\n    expect(mockCell.kind).toEqual(GridCellKind.Custom)\n    expect((mockCell as RangeCellType).data?.value).toEqual(0.5)\n    expect((mockCell as RangeCellType).data?.label).toEqual(\"50.00%\")\n  })\n\n  it(\"supports configuring min/max scale\", () => {\n    const mockColumn = getProgressColumn()\n    const mockCell = mockColumn.getCell(50)\n    // Default min/max scale is 0/1 so the value should be at the maximum\n    expect((mockCell as RangeCellType).data?.value).toEqual(1)\n\n    // Use a different scale\n    const mockColumn1 = getProgressColumn({\n      min_value: -100,\n      max_value: 100,\n    })\n    const mockCell1 = mockColumn1.getCell(50)\n    // The value fits into the scale, so don't do anything:\n    expect((mockCell1 as RangeCellType).data?.value).toEqual(50)\n\n    // Use a different scale\n    const mockColumn2 = getProgressColumn({\n      min_value: 100,\n      max_value: -100,\n    })\n    const mockCell2 = mockColumn2.getCell(50)\n    // min needs to be bigger than max, so this should be an error cell:\n    expect(isErrorCell(mockCell2)).toEqual(true)\n\n    // Use a different scale\n    const mockColumn3 = getProgressColumn({\n      min_value: undefined,\n      max_value: -100,\n    })\n    const mockCell3 = mockColumn3.getCell(50)\n    // min and max need to be defined, so this should be an error cell:\n    expect(isErrorCell(mockCell3)).toEqual(true)\n  })\n\n  it.each([\n    // Supports almost the same as toSafeNumber\n    [null, null],\n    [undefined, null],\n    [\"\", null],\n    [[], null],\n    [\"0.1\", 0.1],\n    [0.1234, 0.1234],\n  ])(\n    \"supports number-compatible value (%p parsed as %p)\",\n    (input: any, value: number | null) => {\n      const mockColumn = getProgressColumn()\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it.each([\n    [\"foo\"],\n    [[]],\n    [\"foo\"],\n    [[1, 2]],\n    [\"123.124.123\"],\n    [\"--123\"],\n    [\"2,,2\"],\n  ])(\"%p results in error cell\", (input: any) => {\n    const mockColumn = getProgressColumn()\n    const cell = mockColumn.getCell(input)\n    expect(isErrorCell(cell)).toEqual(true)\n  })\n\n  it.each([\n    // This should support everything that is supported by formatNumber\n    // So we are not testing all the cases here, just a few to make sure it works\n    // All other cases are tested for formatNumber in utils.test.ts\n    [10.123, \"%d\", \"10\"],\n    [10.123, \"%i\", \"10\"],\n    [10.123, \"%u\", \"10\"],\n    [10.123, \"%f\", \"10.123\"],\n    [10.123, \"%g\", \"10.123\"],\n    [10, \"$%.2f\", \"$10.00\"],\n    [10.126, \"$%.2f\", \"$10.13\"],\n    [10.123, \"%.2f€\", \"10.12€\"],\n    [10.126, \"($%.2f)\", \"($10.13)\"],\n    [65, \"%d years\", \"65 years\"],\n    [1234567898765432, \"%d ⭐\", \"1234567898765432 ⭐\"],\n    [72.3, \"%.1f%%\", \"72.3%\"],\n    [-5.678, \"%.1f\", \"-5.7\"],\n    [0.12, \"percent\", \"12.00%\"],\n    [1100, \"compact\", \"1.1K\"],\n  ])(\n    \"formats %p with sprintf format %p to %p\",\n    (input: number, format: string, displayValue: string) => {\n      const mockColumn = getProgressColumn({\n        format,\n      })\n\n      const cell = mockColumn.getCell(input)\n      expect((cell as RangeCellType).data.label).toEqual(displayValue)\n    }\n  )\n\n  it(\"shows an error cell if the numeric value is too large\", () => {\n    const mockColumn = getProgressColumn()\n    const unsafeCell = mockColumn.getCell(\"1234567898765432123\")\n    expect(isErrorCell(unsafeCell)).toEqual(true)\n    expect((unsafeCell as TextCell)?.data).toEqual(\n      \"⚠️ 1234567898765432123\\n\\nThe value is larger than the maximum supported integer values in number columns (2^53).\\n\"\n    )\n  })\n\n  it.each([\n    [10, \"%d %d\"],\n    [1234567.89, \"%'_,.2f\"],\n    [1234.5678, \"%+.2E\"],\n    [0.000123456, \"%+.2E\"],\n    [-0.000123456, \"%+.2E\"],\n    [255, \"%#x\"],\n    [4096, \"%#X\"],\n    [42, \"% d\"],\n    [1000, \"%,.0f\"],\n    [25000.25, \"$%,.2f\"],\n    [9876543210, \"%,.0f\"],\n  ])(\n    \"cannot format %p using the sprintf format %p\",\n    (input: number, format: string) => {\n      const mockColumn = getProgressColumn({\n        format,\n      })\n\n      const cell = mockColumn.getCell(input)\n      expect(isErrorCell(cell)).toEqual(true)\n    }\n  )\n\n  it(\"correctly formats float values to percentage\", () => {\n    const mockColumn = getProgressColumn()\n    const mockCell = mockColumn.getCell(0.52356)\n    expect((mockCell as RangeCellType).data?.min).toEqual(0)\n    expect((mockCell as RangeCellType).data?.max).toEqual(1)\n    expect((mockCell as RangeCellType).data?.step).toEqual(0.01)\n    // Correctly formats float values to percentage:\n    expect((mockCell as RangeCellType).data?.value).toEqual(0.52356)\n    expect((mockCell as RangeCellType).data?.label).toEqual(\"52.36%\")\n  })\n\n  it(\"correctly formats int values to percentage\", () => {\n    const mockColumn = ProgressColumn({\n      ...PROGRESS_COLUMN_TEMPLATE,\n      arrowType: {\n        pandas_type: \"int64\",\n        numpy_type: \"int64\",\n      },\n    } as BaseColumnProps)\n    const mockCell = mockColumn.getCell(52)\n    expect((mockCell as RangeCellType).data?.min).toEqual(0)\n    expect((mockCell as RangeCellType).data?.max).toEqual(100)\n    expect((mockCell as RangeCellType).data?.step).toEqual(1)\n    // Correctly formats int values to percentage:\n    expect((mockCell as RangeCellType).data?.value).toEqual(52)\n    expect((mockCell as RangeCellType).data?.label).toEqual(\" 52%\")\n  })\n})\n"],"mappings":"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"}