{"version":3,"file":"utils.js","names":["GridCellKind","toString","merge","numbro","sprintf","moment","Quiver","notNullOrUndefined","isNullOrUndefined","BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","arguments","length","undefined","concat","kind","Text","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","hasTooltip","tooltip","isMissingValueCell","isMissingValue","getEmptyCell","missingCell","Loading","getTextCell","faded","style","toGlideColumn","column","id","title","hasMenu","themeOverride","icon","isStretched","grow","isIndex","width","mergeColumnParameters","defaultParams","userParams","toSafeArray","trim","startsWith","endsWith","JSON","parse","error","split","parsedData","stringify","_key","value","Number","Array","isArray","toSafeString","map","includes","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","unformat","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","notation","duration","humanize","formatPeriodType","BigInt","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","unix","utc","isValid","parsedMomentTime","HTML5_FMT","TIME_MS","TIME_SECONDS","TIME","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","truncateDecimals","decimals","trunc","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","getLinkDisplayValueFromRegex","displayTextRegex","href","patternMatch","match","decodeURI"],"sources":["../../../../../src/components/widgets/DataFrame/columns/utils.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n  BaseGridCell,\n} from \"@glideapps/glide-data-grid\"\nimport toString from \"lodash/toString\"\nimport merge from \"lodash/merge\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  Type as ArrowType,\n  Quiver,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps, theme: EmotionTheme): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!Array.isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (Array.isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  } else if (format === \"duration[ns]\") {\n    return moment.duration(value / (1000 * 1000), \"milliseconds\").humanize()\n  } else if (format.startsWith(\"period[\")) {\n    return Quiver.formatPeriodType(BigInt(value), format as any)\n  }\n\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n\n/**\n * Determines the correct value to display in a link cell based on the `href` and `regexPattern` parameters.\n *\n * @param href - The raw url value.\n * @param displayTextRegex - The regex pattern which will be applied to the `href`. If no match is found, then we return the `href`.\n * @returns - The string value to be displayed in the cell.\n *\n * * @example\n * const regex = new RegExp(\"https:\\/\\/(.*?)\\.streamlit\\.app\")\n * const regex2 = new RegExp(\"https:\\/\\/roadmap\\.(.*?)\\.app\")\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"roadmap\"\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"streamlit\"\n */\nexport function getLinkDisplayValueFromRegex(\n  displayTextRegex: RegExp,\n  href?: string | null\n): string {\n  if (isNullOrUndefined(href)) {\n    return \"\"\n  }\n\n  try {\n    // apply the regex pattern to display the value\n    const patternMatch = href.match(displayTextRegex)\n    if (patternMatch && patternMatch[1] !== undefined) {\n      // return the first matching group\n      // Since this might be a URI encoded value, we decode it.\n      return decodeURI(patternMatch[1])\n    }\n\n    // if the regex doesn't find a match with the url, just use the url as display value\n    return href\n  } catch (error) {\n    // if there was any error return the href\n    return href\n  }\n}\n"],"mappings":"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"}