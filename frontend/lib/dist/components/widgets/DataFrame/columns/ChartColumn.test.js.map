{"version":3,"file":"ChartColumn.test.js","names":["GridCellKind","isErrorCell","LineChartColumn","BarChartColumn","AreaChartColumn","LINE_CHART_TYPE","AREA_CHART_TYPE","BAR_CHART_TYPE","CHART_COLUMN_TEMPLATE","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","getLineChartColumn","params","columnTypeOptions","getBarChartColumn","getAreaChartColumn","describe","it","_data","_data2","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Custom","data","values","displayValues","_data3","_data4","_data5","graphKind","mockBarChartColumn","mockBarChartCell","mockAreaChartColumn","mockAreaChartCell","_data6","_data7","_data8","_data9","_data10","mockColumn1","y_min","y_max","mockCell1","mockColumn2","mockCell2","mockColumn3","mockCell3","mockColumn4","mockCell4","mockColumn5","mockCell5","mockColumn6","undefined","mockCell6","_data11","_data12","_data13","each","input","value","cell","getCellValue"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ChartColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { BaseColumnProps, isErrorCell } from \"./utils\"\nimport {\n  ChartColumnParams,\n  LineChartColumn,\n  BarChartColumn,\n  AreaChartColumn,\n  LINE_CHART_TYPE,\n  AREA_CHART_TYPE,\n  BAR_CHART_TYPE,\n} from \"./ChartColumn\"\n\nconst CHART_COLUMN_TEMPLATE = {\n  id: \"1\",\n  name: \"chart_column\",\n  title: \"Chart column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"object\",\n    numpy_type: \"list[float64]\",\n  },\n} as BaseColumnProps\n\nfunction getLineChartColumn(\n  params?: ChartColumnParams\n): ReturnType<typeof LineChartColumn> {\n  return LineChartColumn({\n    ...CHART_COLUMN_TEMPLATE,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\nfunction getBarChartColumn(\n  params?: ChartColumnParams\n): ReturnType<typeof BarChartColumn> {\n  return BarChartColumn({\n    ...CHART_COLUMN_TEMPLATE,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\nfunction getAreaChartColumn(\n  params?: ChartColumnParams\n): ReturnType<typeof AreaChartColumn> {\n  return AreaChartColumn({\n    ...CHART_COLUMN_TEMPLATE,\n    columnTypeOptions: params,\n  } as BaseColumnProps)\n}\n\ndescribe(\"ChartColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = getLineChartColumn()\n    expect(mockColumn.kind).toEqual(LINE_CHART_TYPE)\n    expect(mockColumn.title).toEqual(CHART_COLUMN_TEMPLATE.title)\n    expect(mockColumn.id).toEqual(CHART_COLUMN_TEMPLATE.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    // Column should be readonly:\n    expect(mockColumn.isEditable).toEqual(false)\n\n    const mockCell = mockColumn.getCell([0.1, 0.2, 0.3])\n    expect(mockCell.kind).toEqual(GridCellKind.Custom)\n    expect((mockCell as SparklineCellType).data?.values).toEqual([\n      0.1, 0.2, 0.3,\n    ])\n    expect((mockCell as SparklineCellType).data?.displayValues).toEqual([\n      \"0.1\",\n      \"0.2\",\n      \"0.3\",\n    ])\n  })\n\n  it(\"supports configuring the chart type\", () => {\n    const mockColumn = getLineChartColumn()\n    expect(mockColumn.kind).toEqual(LINE_CHART_TYPE)\n    const mockCell = mockColumn.getCell([0.1, 0.2, 0.3])\n    // Default chart type is line\n    expect((mockCell as SparklineCellType).data?.graphKind).toEqual(\"line\")\n\n    const mockBarChartColumn = getBarChartColumn()\n    expect(mockBarChartColumn.kind).toEqual(BAR_CHART_TYPE)\n    const mockBarChartCell = mockBarChartColumn.getCell([0.1, 0.2, 0.3])\n    // Chart type should be bar\n    expect((mockBarChartCell as SparklineCellType).data?.graphKind).toEqual(\n      \"bar\"\n    )\n\n    const mockAreaChartColumn = getAreaChartColumn()\n    expect(mockAreaChartColumn.kind).toEqual(AREA_CHART_TYPE)\n    const mockAreaChartCell = mockAreaChartColumn.getCell([0.1, 0.2, 0.3])\n    // Chart type should be area\n    expect((mockAreaChartCell as SparklineCellType).data?.graphKind).toEqual(\n      \"area\"\n    )\n  })\n\n  it(\"supports configuring min/max scale\", () => {\n    const mockColumn = getLineChartColumn()\n    const mockCell = mockColumn.getCell([-100, 0, 100])\n    // Default min/max scale is 0/1 so the values should be normalized:\n    expect((mockCell as SparklineCellType).data?.values).toEqual([0, 0.5, 1])\n\n    // Use a different scale\n    const mockColumn1 = getLineChartColumn({\n      y_min: -100,\n      y_max: 100,\n    })\n    const mockCell1 = mockColumn1.getCell([-100, 0, 100])\n    expect((mockCell1 as SparklineCellType).data?.values).toEqual([\n      -100, 0, 100,\n    ])\n\n    // Use a different scale\n    const mockColumn2 = getLineChartColumn({\n      y_min: -1,\n      y_max: 1,\n    })\n    const mockCell2 = mockColumn2.getCell([-100, 0, 100])\n    // This should automatically normalize the values to the min/max scale:\n    expect((mockCell2 as SparklineCellType).data?.values).toEqual([-1, 0, 1])\n\n    // Use a different scale\n    const mockColumn3 = getLineChartColumn({\n      y_min: 0,\n      y_max: 200,\n    })\n    const mockCell3 = mockColumn3.getCell([-100, 0, 100])\n    // This should automatically normalize the values to the min/max scale:\n    expect((mockCell3 as SparklineCellType).data?.values).toEqual([\n      0, 100, 200,\n    ])\n\n    // Use a different scale\n    const mockColumn4 = getLineChartColumn({\n      y_min: -200,\n      y_max: 200,\n    })\n    const mockCell4 = mockColumn4.getCell([-100, 0, 100])\n    // The values fit into the scale, so don't do anything:\n    expect((mockCell4 as SparklineCellType).data?.values).toEqual([\n      -100, 0, 100,\n    ])\n\n    // Use a different scale\n    const mockColumn5 = getLineChartColumn({\n      y_min: 100,\n      y_max: -100,\n    })\n    const mockCell5 = mockColumn5.getCell([-100, 0, 100])\n    // min needs to be bigger than max, so this should be an error cell:\n    expect(isErrorCell(mockCell5)).toEqual(true)\n\n    // Use a different scale\n    const mockColumn6 = getLineChartColumn({\n      y_min: undefined,\n      y_max: -100,\n    })\n    const mockCell6 = mockColumn6.getCell([-100, 0, 100])\n    // min and max need to be defined, so this should be an error cell:\n    expect(isErrorCell(mockCell6)).toEqual(true)\n  })\n\n  it(\"works with single values or only same values without running into division by zero\", () => {\n    const mockColumn = getBarChartColumn({\n      y_min: 0,\n      y_max: 100,\n    })\n\n    const mockCell1 = mockColumn.getCell([101])\n    // The value should be normalized to 100:\n    expect((mockCell1 as SparklineCellType).data?.values).toEqual([100])\n\n    const mockCell2 = mockColumn.getCell([101, 101])\n    // All values should be normalized to 100:\n    expect((mockCell2 as SparklineCellType).data?.values).toEqual([100, 100])\n\n    const mockCell3 = mockColumn.getCell([-1, -1])\n    // All values should be normalized to 0:\n    expect((mockCell3 as SparklineCellType).data?.values).toEqual([0, 0])\n  })\n\n  it.each([\n    // Supports almost the same as toSafeArray\n    [null, null],\n    [undefined, null],\n    [\"\", null],\n    [[], null],\n    // Comma separated syntax\n    [\"0.1,0.2\", [0.1, 0.2]],\n    // JSON Array syntax\n    [`[\"0.1\",\"0.2\"]`, [0.1, 0.2]],\n    [\"1\", [1]],\n    [0, [0]],\n    [1, [1]],\n    [\n      [0, 0.2, 0.1],\n      [0, 0.2, 0.1],\n    ],\n    [true, [1]],\n    [false, [0]],\n  ])(\n    \"supports numerical array-compatible value (%p parsed as %p)\",\n    (input: any, value: any[] | null) => {\n      const mockColumn = getBarChartColumn()\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it.each([\n    [\"foo\"],\n    [\"foo, bar\"],\n    [\"0.1,0.4,foo\"],\n    [\"0.1,0.4,\"],\n    [[\"foo\", \"bar\"]],\n    [[0.1, 0.4, \"foo\"]],\n    [[0.1, 0.4, null]],\n  ])(\"%p results in error cell\", (input: any) => {\n    const mockColumn = getLineChartColumn()\n    const cell = mockColumn.getCell(input)\n    expect(isErrorCell(cell)).toEqual(true)\n  })\n})\n"],"mappings":"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"}