{"version":3,"file":"ImageColumn.js","names":["GridCellKind","notNullOrUndefined","toSafeString","ImageColumn","props","cellTemplate","kind","Image","data","displayData","readonly","allowOverlay","contentAlign","contentAlignment","style","isIndex","sortMode","isEditable","getCell","imageUrls","isMissingValue","getCellValue","cell","undefined","length","isEditableType"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ImageColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    readonly: true,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAmBA,YAAY,QAAmB,4BAA4B;AAE9E,SAASC,kBAAkB;AAE3B,SAAsCC,YAAY;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,KAAsB,EAAc;EACvD,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAEN,YAAY,CAACO,KAAK;IACxBC,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAER,KAAK,CAACS,gBAAgB,IAAI,QAAQ;IAChDC,KAAK,EAAEV,KAAK,CAACW,OAAO,GAAG,OAAO,GAAG;EACnC,CAAc;EAEd,OAAO;IACL,GAAGX,KAAK;IACRE,IAAI,EAAE,OAAO;IACbU,QAAQ,EAAE,SAAS;IACnBC,UAAU,EAAE,KAAK;IAAE;IACnBC,OAAOA,CAACV,IAAU,EAAY;MAC5B;MACA;MACA;MACA;MACA,MAAMW,SAAS,GAAGlB,kBAAkB,CAACO,IAAI,CAAC,GAAG,CAACN,YAAY,CAACM,IAAI,CAAC,CAAC,GAAG,EAAE;MAEtE,OAAO;QACL,GAAGH,YAAY;QACfG,IAAI,EAAEW,SAAS;QACfC,cAAc,EAAE,CAACnB,kBAAkB,CAACO,IAAI,CAAC;QACzCC,WAAW,EAAEU;MACf,CAAC;IACH,CAAC;IACDE,YAAYA,CAACC,IAAe,EAAiB;MAC3C,IAAIA,IAAI,CAACd,IAAI,KAAKe,SAAS,IAAID,IAAI,CAACd,IAAI,CAACgB,MAAM,KAAK,CAAC,EAAE;QACrD,OAAO,IAAI;MACb;;MAEA;MACA;MACA,OAAOF,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;AACH;AAEAL,WAAW,CAACsB,cAAc,GAAG,KAAK;AAElC,eAAetB,WAAW"}