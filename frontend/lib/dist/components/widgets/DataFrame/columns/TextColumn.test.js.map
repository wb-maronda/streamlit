{"version":3,"file":"TextColumn.test.js","names":["GridCellKind","isErrorCell","TextColumn","MOCK_TEXT_COLUMN_PROPS","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","describe","it","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Text","data","each","foo","undefined","input","value","cell","getCellValue","columnTypeOptions","max_chars","validateInput","toBe","validate","toContain"],"sources":["../../../../../src/components/widgets/DataFrame/columns/TextColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable  @typescript-eslint/no-non-null-assertion */\n\nimport { GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\n\nimport { isErrorCell } from \"./utils\"\nimport TextColumn from \"./TextColumn\"\n\nconst MOCK_TEXT_COLUMN_PROPS = {\n  id: \"1\",\n  name: \"text_column\",\n  title: \"Text column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"unicode\",\n    numpy_type: \"object\",\n  },\n}\n\ndescribe(\"TextColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = TextColumn(MOCK_TEXT_COLUMN_PROPS)\n    expect(mockColumn.kind).toEqual(\"text\")\n    expect(mockColumn.title).toEqual(MOCK_TEXT_COLUMN_PROPS.title)\n    expect(mockColumn.id).toEqual(MOCK_TEXT_COLUMN_PROPS.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(\"foo\")\n    expect(mockCell.kind).toEqual(GridCellKind.Text)\n    expect((mockCell as TextCell).data).toEqual(\"foo\")\n  })\n\n  it.each([\n    [\"foo\", \"foo\"],\n    [\"abc def 1234 $\", \"abc def 1234 $\"],\n    [1, \"1\"],\n    [0, \"0\"],\n    [0.123, \"0.123\"],\n    [\"\", \"\"],\n    [[], \"\"],\n    [[\"foo\", \"bar\"], \"foo,bar\"],\n    [[1, 2, 0.1231], \"1,2,0.1231\"],\n    [true, \"true\"],\n    [\n      {\n        foo: \"bar\",\n      },\n      \"[object Object]\",\n    ],\n    [null, null],\n    [undefined, null],\n  ])(\n    \"supports string-compatible value (%p parsed as %p)\",\n    (input: any, value: string | null) => {\n      const mockColumn = TextColumn(MOCK_TEXT_COLUMN_PROPS)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it(\"validates input based on max_chars\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { max_chars: 5 },\n    })\n\n    expect(mockColumn.validateInput!(\"12345\")).toBe(true)\n    expect(mockColumn.validateInput!(\"123456\")).toBe(\"12345\")\n    expect(mockColumn.validateInput!(\"1234567890\")).toBe(\"12345\")\n  })\n\n  it(\"validates input based on validate regex\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { validate: \"^[a-zA-Z]+$\" },\n    })\n\n    expect(mockColumn.validateInput!(\"abcde\")).toBe(true)\n    expect(mockColumn.validateInput!(\"12345\")).toBe(false)\n    expect(mockColumn.validateInput!(\"abc123\")).toBe(false)\n  })\n\n  it(\"validates input based on max_chars and validate regex\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { max_chars: 5, validate: \"^[a-zA-Z]+$\" },\n    })\n\n    expect(mockColumn.validateInput!(\"abcde\")).toBe(true)\n    expect(mockColumn.validateInput!(\"abcdef\")).toBe(\"abcde\")\n    expect(mockColumn.validateInput!(\"12345\")).toBe(false)\n    expect(mockColumn.validateInput!(\"abc123\")).toBe(false)\n  })\n\n  it(\"applies input validation in the getCell call based on max_chars and validate regex\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { max_chars: 5, validate: \"^[a-zA-Z]+$\" },\n    })\n\n    expect(isErrorCell(mockColumn.getCell(\"abcde\", true))).toBe(false)\n    expect(isErrorCell(mockColumn.getCell(\"12345\", true))).toBe(true)\n    // A too long input is fine since it can be auto fixed\n    expect(isErrorCell(mockColumn.getCell(\"abcdef\", true))).toBe(false)\n    // Applies the max chars limit\n    expect((mockColumn.getCell(\"abcdef\", true) as TextCell).data).toBe(\"abcde\")\n    // But a too long input that is still wrong after fixing should result in error\n    expect(isErrorCell(mockColumn.getCell(\"1234567\", true))).toBe(true)\n  })\n\n  it(\"handles invalid validate regex\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { validate: \"[\" }, // Invalid regex\n    })\n\n    const cell = mockColumn.getCell(\"test\", true)\n    expect(isErrorCell(cell)).toEqual(true)\n    expect((cell as TextCell).data).toContain(\"Invalid validate regex\")\n  })\n\n  it(\"ignores empty validate\", () => {\n    const mockColumn = TextColumn({\n      ...MOCK_TEXT_COLUMN_PROPS,\n      columnTypeOptions: { validate: \"\" },\n    })\n\n    const cell = mockColumn.getCell(\"test\", true)\n    expect(isErrorCell(cell)).toEqual(false)\n  })\n})\n"],"mappings":"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"}