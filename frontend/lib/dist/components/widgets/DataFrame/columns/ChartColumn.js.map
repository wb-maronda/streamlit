{"version":3,"file":"ChartColumn.js","names":["GridCellKind","isNullOrUndefined","formatNumber","getEmptyCell","getErrorCell","mergeColumnParameters","toSafeArray","toSafeNumber","toSafeString","LINE_CHART_TYPE","AREA_CHART_TYPE","BAR_CHART_TYPE","BaseChartColumn","kind","props","chart_type","parameters","y_min","y_max","columnTypeOptions","cellTemplate","Custom","allowOverlay","copyData","contentAlign","contentAlignment","data","values","displayValues","graphKind","yAxis","sortMode","isEditable","getCell","Number","isNaN","chartData","convertedChartData","normalizedChartData","length","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","map","v","join","isMissingValue","getCellValue","cell","Loading","undefined","LineChartColumn","isEditableType","BarChartColumn","AreaChartColumn"],"sources":["../../../../../src/components/widgets/DataFrame/columns/ChartColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  formatNumber,\n  getEmptyCell,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeArray,\n  toSafeNumber,\n  toSafeString,\n} from \"./utils\"\n\nexport const LINE_CHART_TYPE = \"line_chart\"\nexport const AREA_CHART_TYPE = \"area_chart\"\nexport const BAR_CHART_TYPE = \"bar_chart\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\" | \"area\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(LINE_CHART_TYPE, props, \"line\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(BAR_CHART_TYPE, props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as an area-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function AreaChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(AREA_CHART_TYPE, props, \"area\")\n}\n\nAreaChartColumn.isEditableType = false\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAEEA,YAAY,QAEP,4BAA4B;AAGnC,SAASC,iBAAiB;AAE1B,SAGEC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,qBAAqB,EACrBC,WAAW,EACXC,YAAY,EACZC,YAAY;AAGd,OAAO,MAAMC,eAAe,GAAG,YAAY;AAC3C,OAAO,MAAMC,eAAe,GAAG,YAAY;AAC3C,OAAO,MAAMC,cAAc,GAAG,WAAW;AASzC;AACA;AACA;AACA;AACA,SAASC,eAAeA,CACtBC,IAAY,EACZC,KAAsB,EACtBC,UAAmC,EACvB;EACZ,MAAMC,UAAU,GAAGX,qBAAqB;EACtC;EACA;IACEY,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE;EACT,CAAC;EACD;EACAJ,KAAK,CAACK,iBACR,CAAsB;EAEtB,MAAMC,YAAY,GAAG;IACnBP,IAAI,EAAEb,YAAY,CAACqB,MAAM;IACzBC,YAAY,EAAE,KAAK;IACnBC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAEV,KAAK,CAACW,gBAAgB;IACpCC,IAAI,EAAE;MACJb,IAAI,EAAE,gBAAgB;MACtBc,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,EAAE;MACjBC,SAAS,EAAEd,UAAU;MACrBe,KAAK,EAAE,CAACd,UAAU,CAACC,KAAK,EAAED,UAAU,CAACE,KAAK;IAC5C;EACF,CAAsB;EAEtB,OAAO;IACL,GAAGJ,KAAK;IACRD,IAAI;IACJkB,QAAQ,EAAE,SAAS;IACnBC,UAAU,EAAE,KAAK;IAAE;IACnBC,OAAOA,CAACP,IAAU,EAAY;MAC5B,IACEzB,iBAAiB,CAACe,UAAU,CAACC,KAAK,CAAC,IACnChB,iBAAiB,CAACe,UAAU,CAACE,KAAK,CAAC,IACnCgB,MAAM,CAACC,KAAK,CAACnB,UAAU,CAACC,KAAK,CAAC,IAC9BiB,MAAM,CAACC,KAAK,CAACnB,UAAU,CAACE,KAAK,CAAC,IAC9BF,UAAU,CAACC,KAAK,IAAID,UAAU,CAACE,KAAK,EACpC;QACA,OAAOd,YAAY,CACjB,sCAAsC,EACrC,cAAaY,UAAU,CAACC,KAAM,gBAAeD,UAAU,CAACE,KAAM,gDACjE,CAAC;MACH;MAEA,IAAIjB,iBAAiB,CAACyB,IAAI,CAAC,EAAE;QAC3B;QACA,OAAOvB,YAAY,CAAC,CAAC;MACvB;MAEA,MAAMiC,SAAS,GAAG9B,WAAW,CAACoB,IAAI,CAAC;MAEnC,MAAMW,kBAA4B,GAAG,EAAE;MACvC,IAAIC,mBAA6B,GAAG,EAAE;MACtC,IAAIF,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAOpC,YAAY,CAAC,CAAC;MACvB;;MAEA;MACA,IAAIqC,QAAQ,GAAGN,MAAM,CAACO,gBAAgB;MACtC,IAAIC,QAAQ,GAAGR,MAAM,CAACS,gBAAgB;;MAEtC;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,CAACG,MAAM,EAAEK,CAAC,EAAE,EAAE;QACzC,MAAMC,cAAc,GAAGtC,YAAY,CAAC6B,SAAS,CAACQ,CAAC,CAAC,CAAC;QACjD,IACEV,MAAM,CAACC,KAAK,CAACU,cAAc,CAAC,IAC5B5C,iBAAiB,CAAC4C,cAAc,CAAC,EACjC;UACA,OAAOzC,YAAY,CACjBI,YAAY,CAAC4B,SAAS,CAAC,EACtB,uDAAsD5B,YAAY,CACjEqC,cACF,CAAE,mBACJ,CAAC;QACH;QAEA,IAAIA,cAAc,GAAGL,QAAQ,EAAE;UAC7BA,QAAQ,GAAGK,cAAc;QAC3B;QAEA,IAAIA,cAAc,GAAGH,QAAQ,EAAE;UAC7BA,QAAQ,GAAGG,cAAc;QAC3B;QAEAR,kBAAkB,CAACS,IAAI,CAACD,cAAc,CAAC;MACzC;MAEA,IACER,kBAAkB,CAACE,MAAM,GAAG,CAAC,KAC5BC,QAAQ,GAAGxB,UAAU,CAACE,KAAK,IAAIwB,QAAQ,GAAG1B,UAAU,CAACC,KAAK,CAAC,EAC5D;QACA;QACAqB,mBAAmB,GAAGD,kBAAkB,CAACU,GAAG,CAACC,CAAC,IAC5CR,QAAQ,GAAGE,QAAQ,KAAK,CAAC,CAAC;QAAA,EACtBF,QAAQ,IAAIxB,UAAU,CAACE,KAAK,IAAI,CAAC,CAAC,GAChCF,UAAU,CAACE,KAAK,IAAI,CAAC,CAAC;QAAA,EACtBF,UAAU,CAACC,KAAK,IAAI,CAAC,CAAC;QAAA,EACxB,CAAC,CAACD,UAAU,CAACE,KAAK,IAAI,CAAC,KAAKF,UAAU,CAACC,KAAK,IAAI,CAAC,CAAC,KAC/C,CAAC+B,CAAC,GAAGN,QAAQ,KAAKF,QAAQ,GAAGE,QAAQ,CAAC,CAAC,IACzC1B,UAAU,CAACC,KAAK,IAAI,CAAC,CAC5B,CAAC;MACH,CAAC,MAAM;QACL;QACAqB,mBAAmB,GAAGD,kBAAkB;MAC1C;MAEA,OAAO;QACL,GAAGjB,YAAY;QACfG,QAAQ,EAAEc,kBAAkB,CAACY,IAAI,CAAC,GAAG,CAAC;QAAE;QACxCvB,IAAI,EAAE;UACJ,GAAGN,YAAY,CAACM,IAAI;UACpBC,MAAM,EAAEW,mBAAmB;UAC3BV,aAAa,EAAES,kBAAkB,CAACU,GAAG,CAACC,CAAC,IAAI9C,YAAY,CAAC8C,CAAC,CAAC;QAC5D,CAAC;QACDE,cAAc,EAAEjD,iBAAiB,CAACyB,IAAI;MACxC,CAAC;IACH,CAAC;IACDyB,YAAYA,CACVC,IAAqC,EACX;MAC1B,IAAIA,IAAI,CAACvC,IAAI,KAAKb,YAAY,CAACqD,OAAO,EAAE;QACtC,OAAO,IAAI;MACb;MAEA,OAAOD,IAAI,CAAC1B,IAAI,EAAEC,MAAM,KAAK2B,SAAS,GAAG,IAAI,GAAGF,IAAI,CAAC1B,IAAI,EAAEC,MAAM;IACnE;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4B,eAAeA,CAACzC,KAAsB,EAAc;EAClE,OAAOF,eAAe,CAACH,eAAe,EAAEK,KAAK,EAAE,MAAM,CAAC;AACxD;AAEAyC,eAAe,CAACC,cAAc,GAAG,KAAK;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAC3C,KAAsB,EAAc;EACjE,OAAOF,eAAe,CAACD,cAAc,EAAEG,KAAK,EAAE,KAAK,CAAC;AACtD;AAEA2C,cAAc,CAACD,cAAc,GAAG,KAAK;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAAC5C,KAAsB,EAAc;EAClE,OAAOF,eAAe,CAACF,eAAe,EAAEI,KAAK,EAAE,MAAM,CAAC;AACxD;AAEA4C,eAAe,CAACF,cAAc,GAAG,KAAK"}