{"version":3,"file":"LinkColumn.test.js","names":["GridCellKind","isErrorCell","LinkColumn","MOCK_LINK_COLUMN_PROPS","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","describe","it","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Uri","data","displayData","each","undefined","input","value","cell","getCellValue","columnTypeOptions","max_chars","validateInput","toBe","validate","toContain","display_text","cellValue"],"sources":["../../../../../src/components/widgets/DataFrame/columns/LinkColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable  @typescript-eslint/no-non-null-assertion */\n\nimport { GridCellKind, UriCell } from \"@glideapps/glide-data-grid\"\n\nimport { isErrorCell } from \"./utils\"\nimport LinkColumn from \"./LinkColumn\"\n\nconst MOCK_LINK_COLUMN_PROPS = {\n  id: \"1\",\n  name: \"link_column\",\n  title: \"Link column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"unicode\",\n    numpy_type: \"object\",\n  },\n}\n\ndescribe(\"LinkColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = LinkColumn(MOCK_LINK_COLUMN_PROPS)\n    expect(mockColumn.kind).toEqual(\"link\")\n    expect(mockColumn.title).toEqual(MOCK_LINK_COLUMN_PROPS.title)\n    expect(mockColumn.id).toEqual(MOCK_LINK_COLUMN_PROPS.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(\"https://streamlit.io\") as UriCell\n    expect(mockCell.kind).toEqual(GridCellKind.Uri)\n    expect(mockCell.data).toEqual(\"https://streamlit.io\")\n    expect(mockCell.displayData).toEqual(\"https://streamlit.io\")\n  })\n\n  it.each([\n    [\"foo\", \"foo\"],\n    [\"https://streamlit.io\", \"https://streamlit.io\"],\n    [\"/path/to/file\", \"/path/to/file\"],\n    [null, null],\n    [undefined, null],\n    // All the values that are supported by the TextColumn\n    // should also be supported by the UrlColumn.\n  ])(\n    \"supports string-compatible value (%p parsed as %p)\",\n    (input: any, value: any | null) => {\n      const mockColumn = LinkColumn(MOCK_LINK_COLUMN_PROPS)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n    }\n  )\n\n  it(\"validates input based on max_chars\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { max_chars: 5 },\n    })\n\n    expect(mockColumn.validateInput!(\"12345\")).toBe(true)\n    expect(mockColumn.validateInput!(\"123456\")).toBe(false)\n    expect(mockColumn.validateInput!(\"1234567890\")).toBe(false)\n  })\n\n  it(\"validates input based on validate regex\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: {\n        validate:\n          \"^https://(?:www.)?(?:[a-zA-Z0-9-]+.)*streamlit.app(?:/.*)?$\",\n      },\n    })\n\n    expect(mockColumn.validateInput!(\"https://issues.streamlit.app/\")).toBe(\n      true\n    )\n    expect(\n      mockColumn.validateInput!(\n        \"https://issues.streamlit.app/Streamlit_Issues_Leaderboard?issue=10\"\n      )\n    ).toBe(true)\n    expect(mockColumn.validateInput!(\"issues.streamlit.app/\")).toBe(false)\n    expect(mockColumn.validateInput!(\"https://issues.streamlit.io/\")).toBe(\n      false\n    )\n  })\n\n  it(\"applies input validation in the getCell call based on max_chars and validate regex\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: {\n        max_chars: 40,\n        validate:\n          \"^https://(?:www.)?(?:[a-zA-Z0-9-]+.)*streamlit.app(?:/.*)?$\",\n      },\n    })\n\n    expect(\n      isErrorCell(mockColumn.getCell(\"https://issues.streamlit.app/\", true))\n    ).toBe(false)\n    expect(\n      isErrorCell(mockColumn.getCell(\"https://issues.streamlit.io/\", true))\n    ).toBe(true)\n\n    // We do not auto fix a link cell that's too long\n    expect(\n      isErrorCell(\n        mockColumn.getCell(\n          \"https://issues.streamlit.app/Streamlit_Issues_Leaderboard?issue=10\",\n          true\n        )\n      )\n    ).toBe(true)\n  })\n\n  it(\"handles invalid validate regex\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { validate: \"[\" }, // Invalid regex\n    })\n\n    const cell = mockColumn.getCell(\"test\", true) as UriCell\n    expect(isErrorCell(cell)).toEqual(true)\n    expect(cell.data).toContain(\"Invalid validate regex\")\n  })\n\n  it(\"ignores empty validate\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { validate: \"\" },\n    })\n\n    const cell = mockColumn.getCell(\"test\", true)\n    expect(isErrorCell(cell)).toEqual(false)\n  })\n\n  it(\"sets the href and displayText values correctly\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { display_text: \"Click me\" },\n    })\n\n    const cell = mockColumn.getCell(\"https://streamlit.io\", true) as UriCell\n\n    const cellValue = mockColumn.getCellValue(cell)\n    expect(cellValue).toBe(\"https://streamlit.io\")\n    expect(cell.displayData).toBe(\"Click me\")\n  })\n\n  it(\"sets displayed value to be the href when displayText is empty\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { display_text: undefined },\n    })\n\n    const cell = mockColumn.getCell(\"https://streamlit.io\", true) as UriCell\n\n    expect(cell.displayData).toBe(\"https://streamlit.io\")\n  })\n\n  it(\"sets displayed value to be displayText when displayText is defined and not a regexp\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { display_text: \"streamlit\" },\n    })\n\n    const cell = mockColumn.getCell(\"https://streamlit.io\", true) as UriCell\n\n    expect(cell.displayData).toBe(\"streamlit\")\n  })\n\n  it(\"sets displayed value as the applied regex to the href when displayText is a regex\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: { display_text: \"https://(.*?).streamlit.app\" },\n    })\n\n    const cell = mockColumn.getCell(\n      \"https://roadmap.streamlit.app\",\n      true\n    ) as UriCell\n\n    expect(cell.displayData).toBe(\"roadmap\")\n  })\n\n  it(\"sets displayed value as the applied regex to the href when displayText is a regex with URL encoding\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      columnTypeOptions: {\n        display_text: \"https://streamlit\\\\.app\\\\?app=(.*)\",\n      },\n    })\n\n    const cell = mockColumn.getCell(\n      \"https://streamlit.app?app=foo%20app%20%25\",\n      true\n    ) as UriCell\n\n    expect(cell.displayData).toBe(\"foo app %\")\n  })\n\n  it(\"sets displayed value as the href, when displayText is a regex but there is no match\", () => {\n    const mockColumn = LinkColumn({\n      ...MOCK_LINK_COLUMN_PROPS,\n      // eslint-disable-next-line prettier/prettier\n      columnTypeOptions: { display_text: \"https://(.*?)\\\\.google.com\" },\n    })\n\n    const cell = mockColumn.getCell(\n      \"https://roadmap.streamlit.app\",\n      true\n    ) as UriCell\n\n    expect(cell.displayData).toBe(\"https://roadmap.streamlit.app\")\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,YAAY,QAAiB,4BAA4B;AAElE,SAASC,WAAW;AACpB,OAAOC,UAAU;AAEjB,MAAMC,sBAAsB,GAAG;EAC7BC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,aAAa;EACpBC,WAAW,EAAE,CAAC;EACdC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAE,KAAK;EACdC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE;IACT;IACA;IACAC,WAAW,EAAE,SAAS;IACtBC,UAAU,EAAE;EACd;AACF,CAAC;AAEDC,QAAQ,CAAC,YAAY,EAAE,MAAM;EAC3BC,EAAE,CAAC,iCAAiC,EAAE,MAAM;IAC1C,MAAMC,UAAU,GAAGf,UAAU,CAACC,sBAAsB,CAAC;IACrDe,MAAM,CAACD,UAAU,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,MAAM,CAAC;IACvCF,MAAM,CAACD,UAAU,CAACX,KAAK,CAAC,CAACc,OAAO,CAACjB,sBAAsB,CAACG,KAAK,CAAC;IAC9DY,MAAM,CAACD,UAAU,CAACb,EAAE,CAAC,CAACgB,OAAO,CAACjB,sBAAsB,CAACC,EAAE,CAAC;IACxDc,MAAM,CAACD,UAAU,CAACI,QAAQ,CAAC,CAACD,OAAO,CAAC,SAAS,CAAC;IAE9C,MAAME,QAAQ,GAAGL,UAAU,CAACM,OAAO,CAAC,sBAAsB,CAAY;IACtEL,MAAM,CAACI,QAAQ,CAACH,IAAI,CAAC,CAACC,OAAO,CAACpB,YAAY,CAACwB,GAAG,CAAC;IAC/CN,MAAM,CAACI,QAAQ,CAACG,IAAI,CAAC,CAACL,OAAO,CAAC,sBAAsB,CAAC;IACrDF,MAAM,CAACI,QAAQ,CAACI,WAAW,CAAC,CAACN,OAAO,CAAC,sBAAsB,CAAC;EAC9D,CAAC,CAAC;EAEFJ,EAAE,CAACW,IAAI,CAAC,CACN,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,EAChD,CAAC,eAAe,EAAE,eAAe,CAAC,EAClC,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAACC,SAAS,EAAE,IAAI;EAChB;EACA;EAAA,CACD,CAAC,CACA,oDAAoD,EACpD,CAACC,KAAU,EAAEC,KAAiB,KAAK;IACjC,MAAMb,UAAU,GAAGf,UAAU,CAACC,sBAAsB,CAAC;IACrD,MAAM4B,IAAI,GAAGd,UAAU,CAACM,OAAO,CAACM,KAAK,CAAC;IACtCX,MAAM,CAACD,UAAU,CAACe,YAAY,CAACD,IAAI,CAAC,CAAC,CAACX,OAAO,CAACU,KAAK,CAAC;EACtD,CACF,CAAC;EAEDd,EAAE,CAAC,oCAAoC,EAAE,MAAM;IAC7C,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEC,SAAS,EAAE;MAAE;IACpC,CAAC,CAAC;IAEFhB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACrDlB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACvDlB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;EAC7D,CAAC,CAAC;EAEFpB,EAAE,CAAC,yCAAyC,EAAE,MAAM;IAClD,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QACjBI,QAAQ,EACN;MACJ;IACF,CAAC,CAAC;IAEFnB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,+BAA+B,CAAC,CAAC,CAACC,IAAI,CACrE,IACF,CAAC;IACDlB,MAAM,CACJD,UAAU,CAACkB,aAAa,CACtB,oEACF,CACF,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACZlB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,uBAAuB,CAAC,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACtElB,MAAM,CAACD,UAAU,CAACkB,aAAa,CAAE,8BAA8B,CAAC,CAAC,CAACC,IAAI,CACpE,KACF,CAAC;EACH,CAAC,CAAC;EAEFpB,EAAE,CAAC,oFAAoF,EAAE,MAAM;IAC7F,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QACjBC,SAAS,EAAE,EAAE;QACbG,QAAQ,EACN;MACJ;IACF,CAAC,CAAC;IAEFnB,MAAM,CACJjB,WAAW,CAACgB,UAAU,CAACM,OAAO,CAAC,+BAA+B,EAAE,IAAI,CAAC,CACvE,CAAC,CAACa,IAAI,CAAC,KAAK,CAAC;IACblB,MAAM,CACJjB,WAAW,CAACgB,UAAU,CAACM,OAAO,CAAC,8BAA8B,EAAE,IAAI,CAAC,CACtE,CAAC,CAACa,IAAI,CAAC,IAAI,CAAC;;IAEZ;IACAlB,MAAM,CACJjB,WAAW,CACTgB,UAAU,CAACM,OAAO,CAChB,oEAAoE,EACpE,IACF,CACF,CACF,CAAC,CAACa,IAAI,CAAC,IAAI,CAAC;EACd,CAAC,CAAC;EAEFpB,EAAE,CAAC,gCAAgC,EAAE,MAAM;IACzC,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEI,QAAQ,EAAE;MAAI,CAAC,CAAE;IACxC,CAAC,CAAC;IAEF,MAAMN,IAAI,GAAGd,UAAU,CAACM,OAAO,CAAC,MAAM,EAAE,IAAI,CAAY;IACxDL,MAAM,CAACjB,WAAW,CAAC8B,IAAI,CAAC,CAAC,CAACX,OAAO,CAAC,IAAI,CAAC;IACvCF,MAAM,CAACa,IAAI,CAACN,IAAI,CAAC,CAACa,SAAS,CAAC,wBAAwB,CAAC;EACvD,CAAC,CAAC;EAEFtB,EAAE,CAAC,wBAAwB,EAAE,MAAM;IACjC,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEI,QAAQ,EAAE;MAAG;IACpC,CAAC,CAAC;IAEF,MAAMN,IAAI,GAAGd,UAAU,CAACM,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;IAC7CL,MAAM,CAACjB,WAAW,CAAC8B,IAAI,CAAC,CAAC,CAACX,OAAO,CAAC,KAAK,CAAC;EAC1C,CAAC,CAAC;EAEFJ,EAAE,CAAC,gDAAgD,EAAE,MAAM;IACzD,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEM,YAAY,EAAE;MAAW;IAChD,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAGd,UAAU,CAACM,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAY;IAExE,MAAMiB,SAAS,GAAGvB,UAAU,CAACe,YAAY,CAACD,IAAI,CAAC;IAC/Cb,MAAM,CAACsB,SAAS,CAAC,CAACJ,IAAI,CAAC,sBAAsB,CAAC;IAC9ClB,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,UAAU,CAAC;EAC3C,CAAC,CAAC;EAEFpB,EAAE,CAAC,+DAA+D,EAAE,MAAM;IACxE,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEM,YAAY,EAAEX;MAAU;IAC/C,CAAC,CAAC;IAEF,MAAMG,IAAI,GAAGd,UAAU,CAACM,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAY;IAExEL,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,sBAAsB,CAAC;EACvD,CAAC,CAAC;EAEFpB,EAAE,CAAC,qFAAqF,EAAE,MAAM;IAC9F,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEM,YAAY,EAAE;MAAY;IACjD,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAGd,UAAU,CAACM,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAY;IAExEL,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,WAAW,CAAC;EAC5C,CAAC,CAAC;EAEFpB,EAAE,CAAC,mFAAmF,EAAE,MAAM;IAC5F,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QAAEM,YAAY,EAAE;MAA8B;IACnE,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAGd,UAAU,CAACM,OAAO,CAC7B,+BAA+B,EAC/B,IACF,CAAY;IAEZL,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,SAAS,CAAC;EAC1C,CAAC,CAAC;EAEFpB,EAAE,CAAC,qGAAqG,EAAE,MAAM;IAC9G,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB8B,iBAAiB,EAAE;QACjBM,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAGd,UAAU,CAACM,OAAO,CAC7B,2CAA2C,EAC3C,IACF,CAAY;IAEZL,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,WAAW,CAAC;EAC5C,CAAC,CAAC;EAEFpB,EAAE,CAAC,qFAAqF,EAAE,MAAM;IAC9F,MAAMC,UAAU,GAAGf,UAAU,CAAC;MAC5B,GAAGC,sBAAsB;MACzB;MACA8B,iBAAiB,EAAE;QAAEM,YAAY,EAAE;MAA6B;IAClE,CAAC,CAAC;IAEF,MAAMR,IAAI,GAAGd,UAAU,CAACM,OAAO,CAC7B,+BAA+B,EAC/B,IACF,CAAY;IAEZL,MAAM,CAACa,IAAI,CAACL,WAAW,CAAC,CAACU,IAAI,CAAC,+BAA+B,CAAC;EAChE,CAAC,CAAC;AACJ,CAAC,CAAC"}