{"version":3,"file":"CheckboxColumn.test.js","names":["GridCellKind","isErrorCell","CheckboxColumn","MOCK_CHECKBOX_COLUMN_PROPS","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","describe","it","mockColumn","expect","kind","toEqual","sortMode","mockCell","getCell","Boolean","data","each","undefined","input","value","cell","getCellValue"],"sources":["../../../../../src/components/widgets/DataFrame/columns/CheckboxColumn.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BooleanCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isErrorCell } from \"./utils\"\nimport CheckboxColumn from \"./CheckboxColumn\"\n\nconst MOCK_CHECKBOX_COLUMN_PROPS = {\n  id: \"1\",\n  name: \"checkbox_column\",\n  title: \"Checkbox column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    // The arrow type of the underlying data is\n    // not used for anything inside the column.\n    pandas_type: \"bool\",\n    numpy_type: \"bool\",\n  },\n}\n\ndescribe(\"CheckboxColumn\", () => {\n  it(\"creates a valid column instance\", () => {\n    const mockColumn = CheckboxColumn(MOCK_CHECKBOX_COLUMN_PROPS)\n    expect(mockColumn.kind).toEqual(\"checkbox\")\n    expect(mockColumn.title).toEqual(MOCK_CHECKBOX_COLUMN_PROPS.title)\n    expect(mockColumn.id).toEqual(MOCK_CHECKBOX_COLUMN_PROPS.id)\n    expect(mockColumn.sortMode).toEqual(\"default\")\n\n    const mockCell = mockColumn.getCell(true)\n    expect(mockCell.kind).toEqual(GridCellKind.Boolean)\n    expect((mockCell as BooleanCell).data).toEqual(true)\n  })\n\n  it.each([\n    [true, true],\n    [false, false],\n    [\"true\", true],\n    [\"false\", false],\n    [\"yes\", true],\n    [\"no\", false],\n    [\"t\", true],\n    [\"f\", false],\n    [\"y\", true],\n    [\"n\", false],\n    [\"on\", true],\n    [\"off\", false],\n    [\"1\", true],\n    [\"0\", false],\n    [1, true],\n    [0, false],\n    [[], null],\n    [null, null],\n    [undefined, null],\n    [\"\", null],\n  ])(\n    \"supports boolean compatible value (%p parsed as %p)\",\n    (input: any, value: boolean | null) => {\n      const mockColumn = CheckboxColumn(MOCK_CHECKBOX_COLUMN_PROPS)\n      const cell = mockColumn.getCell(input)\n      expect(mockColumn.getCellValue(cell)).toEqual(value)\n      expect(isErrorCell(cell)).toEqual(false)\n    }\n  )\n\n  it.each([[\"foo\"], [12345], [0.1], [[\"foo\", \"bar\"]]])(\n    \"%p results in error cell: %p\",\n    (input: any) => {\n      const mockColumn = CheckboxColumn(MOCK_CHECKBOX_COLUMN_PROPS)\n      const cell = mockColumn.getCell(input)\n      expect(isErrorCell(cell)).toEqual(true)\n    }\n  )\n})\n"],"mappings":"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"}