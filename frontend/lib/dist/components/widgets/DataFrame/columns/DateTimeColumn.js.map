{"version":3,"file":"DateTimeColumn.js","names":["GridCellKind","moment","notNullOrUndefined","isNullOrUndefined","mergeColumnParameters","toSafeDate","getErrorCell","toSafeString","formatMoment","applyTimezone","momentDate","timezone","startsWith","utcOffset","tz","BaseDateTimeColumn","kind","props","defaultFormat","defaultStep","inputType","toISOString","_parameters$step","parameters","format","step","columnTypeOptions","defaultTimezoneOffset","undefined","_applyTimezone","error","minDate","min_value","maxDate","max_value","cellTemplate","Custom","allowOverlay","copyData","readonly","isEditable","contentAlign","contentAlignment","style","isIndex","data","date","displayDate","toString","min","max","validateInput","cellData","isRequired","sortMode","getCell","validate","validationResult","Date","timezoneOffset","utc","isValid","concat","isMissingValue","getCellValue","cell","_cell$data","DateTimeColumn","_props$columnTypeOpti","_props$columnTypeOpti2","_props$arrowType","_props$arrowType$meta","_props$columnTypeOpti3","arrowType","meta","hasTimezone","replace","isEditableType","TimeColumn","_props$columnTypeOpti4","_props$columnTypeOpti5","split","DateColumn"],"sources":["../../../../../src/components/widgets/DataFrame/columns/DateTimeColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-timezone\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  mergeColumnParameters,\n  toSafeDate,\n  getErrorCell,\n  toSafeString,\n  formatMoment,\n} from \"./utils\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-picker-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DatePickerType\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DatePickerType\n    },\n    getCellValue(cell: DatePickerType): string | null {\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n"],"mappings":"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"}