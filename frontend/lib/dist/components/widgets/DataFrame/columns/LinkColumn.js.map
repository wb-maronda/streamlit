{"version":3,"file":"LinkColumn.js","names":["GridCellKind","isNullOrUndefined","getErrorCell","getLinkDisplayValueFromRegex","toSafeString","LinkColumn","props","parameters","columnTypeOptions","validateRegex","undefined","validate","RegExp","error","displayTextRegex","display_text","includes","cellTemplate","kind","Uri","readonly","isEditable","allowOverlay","contentAlign","contentAlignment","style","isIndex","hoverEffect","data","displayData","copyData","validateInput","href","isRequired","cellHref","max_chars","length","test","sortMode","getCell","isMissingValue","onClickUri","validationResult","displayText","a","window","open","startsWith","preventDefault","getCellValue","cell","isEditableType"],"sources":["../../../../../src/components/widgets/DataFrame/columns/LinkColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, UriCell } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getLinkDisplayValueFromRegex,\n  toSafeString,\n} from \"./utils\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n  // a value to display in the link cell. Can be a regex to parse out a specific substring of the url to be displayed\n  readonly display_text?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  // Determine if the user's provided display text is a regexp pattern or not.\n  let displayTextRegex: RegExp | undefined = undefined\n  if (\n    !isNullOrUndefined(parameters.display_text) &&\n    parameters.display_text.includes(\"(\") &&\n    parameters.display_text.includes(\")\")\n  ) {\n    try {\n      displayTextRegex = new RegExp(parameters.display_text, \"us\")\n    } catch (error) {\n      // The regex is invalid, interpret it as static display text.\n      displayTextRegex = undefined\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Uri,\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    hoverEffect: true,\n    data: \"\",\n    displayData: \"\",\n    copyData: \"\",\n  } as UriCell\n\n  const validateInput = (href?: string): boolean => {\n    if (isNullOrUndefined(href)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    const cellHref = toSafeString(href)\n\n    if (parameters.max_chars && cellHref.length > parameters.max_chars) {\n      // value is too long\n      return false\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellHref) === false\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (isNullOrUndefined(data)) {\n        return {\n          ...cellTemplate,\n          data: null as any,\n          isMissingValue: true,\n          onClickUri: () => {},\n        } as UriCell\n      }\n\n      const href: string = data\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(href), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(href)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(href), \"Invalid input.\")\n        }\n      }\n\n      let displayText = \"\"\n      if (href) {\n        if (displayTextRegex !== undefined) {\n          // Set display value to be the regex extracted portion of the href.\n          displayText = getLinkDisplayValueFromRegex(displayTextRegex, href)\n        } else {\n          // Use user provided display_text unless it's null, undefined, or an empty string.\n          // If it's any of those falsy values, use the href.\n          displayText = parameters.display_text || href\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: href,\n        displayData: displayText,\n        isMissingValue: isNullOrUndefined(href),\n        onClickUri: a => {\n          window.open(\n            href.startsWith(\"www.\") ? `https://${href}` : href,\n            \"_blank\",\n            \"noopener,noreferrer\"\n          )\n          a.preventDefault()\n        },\n        copyData: href,\n      } as UriCell\n    },\n    getCellValue(cell: UriCell): string | null {\n      return isNullOrUndefined(cell.data) ? null : cell.data\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn\n"],"mappings":"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"}