{"version":3,"file":"CheckboxColumn.js","names":["GridCellKind","isNullOrUndefined","getErrorCell","toSafeString","toSafeBoolean","CheckboxColumn","props","cellTemplate","kind","Boolean","data","allowOverlay","contentAlign","contentAlignment","readonly","isEditable","style","isIndex","sortMode","getCell","cellData","undefined","isMissingValue","getCellValue","cell","isEditableType"],"sources":["../../../../../src/components/widgets/DataFrame/columns/CheckboxColumn.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAGEA,YAAY,QACP,4BAA4B;AAEnC,SAASC,iBAAiB;AAE1B,SAGEC,YAAY,EACZC,YAAY,EACZC,aAAa;;AAGf;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAsB,EAAc;EAC1D,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAER,YAAY,CAACS,OAAO;IAC1BC,IAAI,EAAE,KAAK;IACXC,YAAY,EAAE,KAAK;IAAE;IACrBC,YAAY,EAAEN,KAAK,CAACO,gBAAgB;IACpCC,QAAQ,EAAE,CAACR,KAAK,CAACS,UAAU;IAC3BC,KAAK,EAAEV,KAAK,CAACW,OAAO,GAAG,OAAO,GAAG;EACnC,CAAgB;EAEhB,OAAO;IACL,GAAGX,KAAK;IACRE,IAAI,EAAE,UAAU;IAChBU,QAAQ,EAAE,SAAS;IACnBC,OAAOA,CAACT,IAAU,EAAY;MAC5B,IAAIU,QAAQ,GAAG,IAAI;MAEnBA,QAAQ,GAAGhB,aAAa,CAACM,IAAI,CAAC;MAC9B,IAAIU,QAAQ,KAAKC,SAAS,EAAE;QAC1B,OAAOnB,YAAY,CACjBC,YAAY,CAACO,IAAI,CAAC,+CAEpB,CAAC;MACH;;MAEA;MACA;MACA,OAAO;QACL,GAAGH,YAAY;QACfG,IAAI,EAAEU,QAAQ;QACdE,cAAc,EAAErB,iBAAiB,CAACmB,QAAQ;MAC5C,CAAC;IACH,CAAC;IACDG,YAAYA,CAACC,IAAiB,EAAkB;MAC9C,OAAOA,IAAI,CAACd,IAAI,KAAKW,SAAS,GAAG,IAAI,GAAGG,IAAI,CAACd,IAAI;IACnD;EACF,CAAC;AACH;AAEAL,cAAc,CAACoB,cAAc,GAAG,IAAI;AAEpC,eAAepB,cAAc"}