{"version":3,"file":"arrowUtils.test.js","names":["Quiver","Arrow","ArrowProto","CATEGORICAL_COLUMN","DECIMAL","DISPLAY_VALUES","EMPTY","MULTI","STYLER","UNICODE","CheckboxColumn","DateColumn","DateTimeColumn","getTextCell","ListColumn","NumberColumn","ObjectColumn","SelectboxColumn","TextColumn","TimeColumn","applyPandasStylerCss","extractCssProperty","getAllColumnsFromArrow","getCellFromArrow","getColumnFromArrow","getColumnTypeFromArrow","getIndexFromArrow","isIntegerType","MOCK_TEXT_COLUMN","id","name","title","indexNumber","isEditable","isHidden","isIndex","isStretched","arrowType","pandas_type","numpy_type","MOCK_NUMBER_COLUMN","describe","it","cssStyle1","cssStyle2","cssStyle3","expect","toBe","undefined","CSS_STYLES","MOCK_CELL","styledCell","themeOverride","toEqual","bgCell","textDark","element","create","data","indexColumn","meta","indexColumn1","indexColumn2","column","num_categories","ordered","columnTypeOptions","options","columns","cell","getCell","allowOverlay","contentAlignment","displayData","isMissingValue","kind","readonly","style","decimalColumn","precision","scale","allowNegative","contentAlign","copyData","fixedDecimals","thousandSeparator","MOCK_TIME_COLUMN","arrowCell","content","BigInt","contentType","field","type","unit","displayContent","cssId","cssClass","displayDate","jest","fn","mockReturnValue","toHaveBeenCalledWith","Date","styler","uuid","styles","displayValues","caption","each","expectedType","expected","getTypeName"],"sources":["../../../../src/components/widgets/DataFrame/arrowUtils.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Type as ArrowType,\n  DataFrameCell,\n  Quiver,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  CATEGORICAL_COLUMN,\n  DECIMAL,\n  DISPLAY_VALUES,\n  EMPTY,\n  MULTI,\n  STYLER,\n  UNICODE,\n} from \"@streamlit/lib/src/mocks/arrow\"\n\nimport {\n  CheckboxColumn,\n  ColumnCreator,\n  DateColumn,\n  DateTimeColumn,\n  getTextCell,\n  ListColumn,\n  NumberColumn,\n  ObjectColumn,\n  SelectboxColumn,\n  TextColumn,\n  TimeColumn,\n} from \"./columns\"\nimport {\n  applyPandasStylerCss,\n  extractCssProperty,\n  getAllColumnsFromArrow,\n  getCellFromArrow,\n  getColumnFromArrow,\n  getColumnTypeFromArrow,\n  getIndexFromArrow,\n} from \"./arrowUtils\"\nimport { isIntegerType } from \"./isIntegerType\"\n\nconst MOCK_TEXT_COLUMN = TextColumn({\n  id: \"1\",\n  name: \"text_column\",\n  title: \"Text column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    pandas_type: \"unicode\",\n    numpy_type: \"object\",\n  },\n})\n\nconst MOCK_NUMBER_COLUMN = NumberColumn({\n  id: \"1\",\n  name: \"number_column\",\n  title: \"Number column\",\n  indexNumber: 0,\n  isEditable: false,\n  isHidden: false,\n  isIndex: false,\n  isStretched: false,\n  arrowType: {\n    pandas_type: \"int64\",\n    numpy_type: \"int64\",\n  },\n})\n\ndescribe(\"extractCssProperty\", () => {\n  it(\"should extract the correct property value\", () => {\n    const cssStyle1 = `\n  #T_f116e_row10_col0, #T_f116e_row10_col1, #T_f116e_row10_col3 { color: red }\n  #T_f116e_row0_col1, #T_f116e_row1_col0 { color: white; background-color: pink }\n  #T_f116e_row0_col2 { color: red; opacity: 20% }\n  #T_f116e_row2_col2, #T_f116e_row5_col1 { opacity: 20% }\n  #T_f116e_row3_col3, #T_f116e_row12_col1 { color: white; background-color: darkblue; color: white; background-color: pink }\n  #T_f116e_row11_col10, #T_f116e_row11_col10 {  background-color: darkblue }`\n\n    // All color-value formats\n    const cssStyle2 = `\n  #T_7e5cc_row6_col0 { background-color: #f8fcc9; color: #000000 }\n  #T_7e5cc_row7_col1 { background-color: #1c2d81; color: #f1f1f1 }\n  #T_7e5cc_row8_col0 { background-color: #289cc1; color: #f1f1f1 }\n  #T_7e5cc_row8_col1 { background-color: #2165ab; color: #f1f1f1 }\n  #T_7e5cc_row9_col0 { background-color: #f0f9b8; color: #000000 }\n  #T_f116e_row12_col14 { background-color: blue }\n  #T_f116e_row13_col14 { background-color: #f1f1f1 }\n  #T_f116e_row14_col1 { background-color: rgba(72 122 180 / .2); }\n  #T_f116e_row15_col1 { background-color: rgba(255, 0, 12, .2)}\n  #T_f116e_row16_col14 { background-color: hsla(240, 100%, 90%) }\n  #T_f116e_row17_col1 { background-color: hsl(255, 0, 12)}`\n\n    // Badly Formatted\n    const cssStyle3 = `\n  #T_f116e_row10_col0,#T_7e5cc_row6_col0   {   background-color: #f8fcc9;     color: #000000 }\n  #T_7e5cc_row7_col1{ background-color:#1c2d81; color: #f1f1f1 }\n  #T_7e5cc_row8_col0{background-color: #289cc1;color: #f1f1f1}\n  #T_f116e_row18_col1, #T_f116e_row18_col14 { background-color: hsla(240, 100%,    90%) }\n  #T_f116e_row19_col1, #T_f116e_row19_col14 { background-color: hsl(240, 100%,90%) }`\n\n    expect(extractCssProperty(\"#T_f116e_row10_col1\", \"color\", cssStyle1)).toBe(\n      \"red\"\n    )\n    expect(\n      extractCssProperty(\"#T_f116e_row12_col1\", \"background-color\", cssStyle1)\n    ).toBe(\"pink\")\n    expect(extractCssProperty(\"#T_f116e_row5_col1\", \"color\", cssStyle1)).toBe(\n      undefined\n    )\n    expect(extractCssProperty(\"foo\", \"color\", cssStyle1)).toBe(undefined)\n    expect(extractCssProperty(\"#T_f116e_row0_col2\", \"color\", cssStyle1)).toBe(\n      \"red\"\n    )\n    expect(\n      extractCssProperty(\"#T_f116e_row11_col10\", \"background-color\", cssStyle1)\n    ).toBe(\"darkblue\")\n    // Should not extract if it only partly matches:\n    expect(\n      extractCssProperty(\"#T_f116e_row11_col1\", \"background-color\", cssStyle1)\n    ).toBe(undefined)\n\n    expect(\n      extractCssProperty(\"#T_7e5cc_row6_col0\", \"background-color\", cssStyle2)\n    ).toBe(\"#f8fcc9\")\n    expect(extractCssProperty(\"#T_7e5cc_row9_col0\", \"color\", cssStyle2)).toBe(\n      \"#000000\"\n    )\n    expect(\n      extractCssProperty(\"#T_f116e_row12_col14\", \"background-color\", cssStyle2)\n    ).toBe(\"blue\")\n    expect(\n      extractCssProperty(\"#T_f116e_row13_col14\", \"background-color\", cssStyle2)\n    ).toBe(\"#f1f1f1\")\n    expect(\n      extractCssProperty(\"#T_f116e_row14_col1\", \"background-color\", cssStyle2)\n    ).toBe(\"rgba(72 122 180 / .2)\")\n    expect(\n      extractCssProperty(\"#T_f116e_row15_col1\", \"background-color\", cssStyle2)\n    ).toBe(\"rgba(255, 0, 12, .2)\")\n    expect(\n      extractCssProperty(\"#T_f116e_row16_col14\", \"background-color\", cssStyle2)\n    ).toBe(\"hsla(240, 100%, 90%)\")\n    expect(\n      extractCssProperty(\"#T_f116e_row17_col1\", \"background-color\", cssStyle2)\n    ).toBe(\"hsl(255, 0, 12)\")\n\n    expect(\n      extractCssProperty(\"#T_f116e_row10_col0\", \"background-color\", cssStyle3)\n    ).toBe(\"#f8fcc9\")\n    expect(\n      extractCssProperty(\"#T_7e5cc_row8_col0\", \"background-color\", cssStyle3)\n    ).toBe(\"#289cc1\")\n    expect(\n      extractCssProperty(\"#T_f116e_row18_col14\", \"background-color\", cssStyle3)\n    ).toBe(\"hsla(240, 100%,    90%)\")\n    expect(\n      extractCssProperty(\"#T_f116e_row19_col14\", \"background-color\", cssStyle3)\n    ).toBe(\"hsl(240, 100%,90%)\")\n    expect(extractCssProperty(\"#T_7e5cc_row8_col0\", \"color\", cssStyle3)).toBe(\n      \"#f1f1f1\"\n    )\n  })\n})\n\ndescribe(\"applyPandasStylerCss\", () => {\n  it(\"should apply css to a cells\", () => {\n    const CSS_STYLES = `\n  #T_f116e_row10_col0, #T_f116e_row10_col1, #T_f116e_row10_col3 { color: red }\n  #T_f116e_row0_col1, #T_f116e_row1_col0 { color: white; background-color: pink }\n  #T_f116e_row0_col2 { color: red; opacity: 20% }\n  #T_f116e_row2_col2, #T_f116e_row5_col1 { opacity: 20% }\n  #T_f116e_row3_col3, #T_f116e_row12_col1 { color: white; background-color: darkblue; color: white; background-color: pink }\n  #T_f116e_row11_col10, #T_f116e_row11_col10 {  background-color: darkblue }`\n\n    const MOCK_CELL = getTextCell(true, false)\n    let styledCell = applyPandasStylerCss(\n      MOCK_CELL,\n      \"#T_f116e_row11_col10\",\n      CSS_STYLES\n    )\n    expect(styledCell.themeOverride).toEqual({\n      bgCell: \"darkblue\",\n    })\n\n    styledCell = applyPandasStylerCss(\n      MOCK_CELL,\n      \"#T_f116e_row0_col2\",\n      CSS_STYLES\n    )\n    expect(styledCell.themeOverride).toEqual({\n      textDark: \"red\",\n    })\n\n    styledCell = applyPandasStylerCss(\n      MOCK_CELL,\n      \"#T_f116e_row3_col3\",\n      CSS_STYLES\n    )\n    expect(styledCell.themeOverride).toEqual({\n      bgCell: \"pink\",\n      textDark: \"white\",\n    })\n\n    styledCell = applyPandasStylerCss(MOCK_CELL, \"invalid_key\", CSS_STYLES)\n    expect(styledCell.themeOverride).toEqual({})\n  })\n\n  it(\"should use a grey color when background is yellow\", () => {\n    const CSS_STYLES = `#T_f116e_row0_col0 { background-color: yellow }`\n    const styledCell = applyPandasStylerCss(\n      getTextCell(true, false),\n      \"#T_f116e_row0_col0\",\n      CSS_STYLES\n    )\n    expect(styledCell.themeOverride).toEqual({\n      bgCell: \"yellow\",\n      textDark: \"#31333F\",\n    })\n  })\n})\n\ndescribe(\"getIndexFromArrow\", () => {\n  it(\"returns a valid index\", () => {\n    const element = ArrowProto.create({\n      data: UNICODE,\n    })\n    const data = new Quiver(element)\n\n    const indexColumn = getIndexFromArrow(data, 0)\n    expect(indexColumn).toEqual({\n      id: `index-0`,\n      isEditable: true,\n      name: \"\",\n      title: \"\",\n      arrowType: {\n        meta: null,\n        numpy_type: \"object\",\n        pandas_type: \"unicode\",\n      },\n      isIndex: true,\n      isHidden: false,\n    })\n  })\n\n  it(\"works with multi-index\", () => {\n    const element = ArrowProto.create({\n      data: MULTI,\n    })\n    const data = new Quiver(element)\n\n    const indexColumn1 = getIndexFromArrow(data, 0)\n    expect(indexColumn1).toEqual({\n      id: `index-0`,\n      isEditable: true,\n      name: \"number\",\n      title: \"number\",\n      arrowType: {\n        meta: null,\n        numpy_type: \"int64\",\n        pandas_type: \"int64\",\n      },\n      isIndex: true,\n      isHidden: false,\n    })\n\n    const indexColumn2 = getIndexFromArrow(data, 1)\n    expect(indexColumn2).toEqual({\n      id: `index-1`,\n      isEditable: true,\n      name: \"color\",\n      title: \"color\",\n      arrowType: {\n        meta: null,\n        numpy_type: \"object\",\n        pandas_type: \"unicode\",\n      },\n      isIndex: true,\n      isHidden: false,\n    })\n  })\n})\n\ndescribe(\"getColumnFromArrow\", () => {\n  it(\"returns a valid column\", () => {\n    const element = ArrowProto.create({\n      data: UNICODE,\n    })\n    const data = new Quiver(element)\n\n    const column = getColumnFromArrow(data, 0)\n    expect(column).toEqual({\n      id: \"column-c1-0\",\n      name: \"c1\",\n      title: \"c1\",\n      isEditable: true,\n      arrowType: {\n        meta: null,\n        numpy_type: \"object\",\n        pandas_type: \"unicode\",\n      },\n      isIndex: false,\n      isHidden: false,\n    })\n  })\n\n  it(\"adds categorical options to type metadata\", () => {\n    const element = ArrowProto.create({\n      data: CATEGORICAL_COLUMN,\n    })\n    const data = new Quiver(element)\n\n    const column = getColumnFromArrow(data, 0)\n    expect(column).toEqual({\n      id: \"column-c1-0\",\n      name: \"c1\",\n      title: \"c1\",\n      isEditable: true,\n      arrowType: {\n        meta: {\n          num_categories: 2,\n          ordered: false,\n        },\n        numpy_type: \"int8\",\n        pandas_type: \"categorical\",\n      },\n      isIndex: false,\n      isHidden: false,\n      columnTypeOptions: {\n        options: [\"bar\", \"foo\"],\n      },\n    })\n  })\n})\ndescribe(\"getAllColumnsFromArrow\", () => {\n  it(\"extracts all columns\", () => {\n    const element = ArrowProto.create({\n      data: UNICODE,\n    })\n    const data = new Quiver(element)\n    const columns = getAllColumnsFromArrow(data)\n\n    expect(columns).toEqual([\n      {\n        arrowType: {\n          meta: null,\n          numpy_type: \"object\",\n          pandas_type: \"unicode\",\n        },\n        id: \"index-0\",\n        indexNumber: 0,\n        isEditable: true,\n        isHidden: false,\n        isIndex: true,\n        name: \"\",\n        title: \"\",\n      },\n      {\n        arrowType: {\n          meta: null,\n          numpy_type: \"object\",\n          pandas_type: \"unicode\",\n        },\n        columnTypeOptions: undefined,\n        id: \"column-c1-0\",\n        indexNumber: 1,\n        isEditable: true,\n        isHidden: false,\n        isIndex: false,\n        name: \"c1\",\n        title: \"c1\",\n      },\n      {\n        arrowType: {\n          meta: null,\n          numpy_type: \"object\",\n          pandas_type: \"unicode\",\n        },\n        columnTypeOptions: undefined,\n        id: \"column-c2-1\",\n        indexNumber: 2,\n        isEditable: true,\n        isHidden: false,\n        isIndex: false,\n        name: \"c2\",\n        title: \"c2\",\n      },\n    ])\n  })\n\n  it(\"handles empty dataframes correctly\", () => {\n    // TODO: is this correct\n    const element = ArrowProto.create({\n      data: EMPTY,\n    })\n    const data = new Quiver(element)\n    const columns = getAllColumnsFromArrow(data)\n\n    expect(columns).toEqual([\n      {\n        arrowType: {\n          meta: null,\n          numpy_type: \"object\",\n          pandas_type: \"empty\",\n        },\n        id: \"index-0\",\n        indexNumber: 0,\n        isEditable: true,\n        isHidden: false,\n        isIndex: true,\n        name: \"\",\n        title: \"\",\n      },\n    ])\n  })\n})\n\ndescribe(\"getCellFromArrow\", () => {\n  it(\"creates a valid glide-compatible cell\", () => {\n    const element = ArrowProto.create({\n      data: UNICODE,\n    })\n    const data = new Quiver(element)\n    const cell = getCellFromArrow(MOCK_TEXT_COLUMN, data.getCell(1, 1))\n\n    expect(cell).toEqual({\n      allowOverlay: true,\n      contentAlignment: undefined,\n      data: \"foo\",\n      displayData: \"foo\",\n      isMissingValue: false,\n      kind: \"text\",\n      readonly: true,\n      style: \"normal\",\n    })\n  })\n\n  it(\"handles decimal types correctly\", () => {\n    const decimalColumn = NumberColumn({\n      id: \"1\",\n      name: \"decimal_column\",\n      title: \"Decimal column\",\n      indexNumber: 0,\n      isEditable: false,\n      isHidden: false,\n      isIndex: false,\n      isStretched: false,\n      arrowType: {\n        pandas_type: \"decimal\",\n        numpy_type: \"object\",\n        meta: { precision: 6, scale: 1 },\n      },\n    })\n\n    const element = ArrowProto.create({\n      data: DECIMAL, // should be interpreted as object\n    })\n    const data = new Quiver(element)\n    const cell = getCellFromArrow(decimalColumn, data.getCell(1, 1))\n\n    expect(cell).toEqual({\n      allowNegative: true,\n      allowOverlay: true,\n      contentAlign: \"right\",\n      copyData: \"1.1\",\n      data: 1.1,\n      displayData: \"1.1\",\n      isMissingValue: false,\n      fixedDecimals: undefined,\n      kind: \"number\",\n      readonly: true,\n      style: \"normal\",\n      thousandSeparator: \"\",\n    })\n  })\n\n  it(\"applies display content overwrite to time cells\", () => {\n    const MOCK_TIME_COLUMN = {\n      ...TimeColumn({\n        id: \"1\",\n        name: \"time_column\",\n        title: \"Time column\",\n        indexNumber: 0,\n        isEditable: false,\n        isHidden: false,\n        isIndex: false,\n        isStretched: false,\n        arrowType: {\n          pandas_type: \"time\",\n          numpy_type: \"object\",\n        },\n      }),\n    }\n\n    // Create a mock arrowCell object with time data\n    const arrowCell = {\n      // Unix timestamp in microseconds Wed Sep 29 2021 21:13:20\n      // Our default unit is seconds, so it needs to be adjusted internally\n      content: BigInt(1632950000123000),\n      contentType: null,\n      field: {\n        type: {\n          unit: 2, // Microseconds\n        },\n      },\n      displayContent: \"FOOO\",\n      cssId: null,\n      cssClass: null,\n      type: \"columns\",\n    } as object as DataFrameCell\n\n    // Call the getCellFromArrow function\n    const cell = getCellFromArrow(MOCK_TIME_COLUMN, arrowCell)\n    expect((cell as any).data.displayDate).toEqual(\"FOOO\")\n  })\n\n  it(\"parses numeric timestamps for time columns into valid Date values\", () => {\n    const MOCK_TIME_COLUMN = {\n      ...TimeColumn({\n        id: \"1\",\n        name: \"time_column\",\n        title: \"Time column\",\n        indexNumber: 0,\n        isEditable: false,\n        isHidden: false,\n        isIndex: false,\n        isStretched: false,\n        arrowType: {\n          pandas_type: \"time\",\n          numpy_type: \"object\",\n        },\n      }),\n      getCell: jest.fn().mockReturnValue(getTextCell(false, false)),\n    }\n\n    // Create a mock arrowCell object with time data\n    const arrowCell = {\n      // Unix timestamp in microseconds Wed Sep 29 2021 21:13:20\n      // Our default unit is seconds, so it needs to be adjusted internally\n      content: BigInt(1632950000123000),\n      contentType: null,\n      field: {\n        type: {\n          unit: 2, // Microseconds\n        },\n      },\n      displayContent: null,\n      cssId: null,\n      cssClass: null,\n      type: \"columns\",\n    } as object as DataFrameCell\n\n    // Call the getCellFromArrow function\n    getCellFromArrow(MOCK_TIME_COLUMN, arrowCell)\n\n    // Check if the timestamp is adjusted properly\n    expect(MOCK_TIME_COLUMN.getCell).toHaveBeenCalledWith(\n      new Date(\"2021-09-29T21:13:20.123Z\")\n    )\n  })\n\n  it(\"parses numeric timestamps for datetime columns into valid Date values\", () => {\n    const MOCK_TIME_COLUMN = {\n      ...TimeColumn({\n        id: \"1\",\n        name: \"datetime_column\",\n        title: \"Datetime column\",\n        indexNumber: 0,\n        isEditable: false,\n        isHidden: false,\n        isIndex: false,\n        isStretched: false,\n        arrowType: {\n          pandas_type: \"datetime\",\n          numpy_type: \"datetime64[ns]\",\n        },\n      }),\n      getCell: jest.fn().mockReturnValue(getTextCell(false, false)),\n    }\n\n    // Create a mock arrowCell object with time data\n    const arrowCell = {\n      // Unix timestamp in milliseconds (Wed Sep 29 2021 21:13:20)\n      // Milliseconds is the default unit that is used for all datetime values\n      // in arrow. So we don't need to adjust based on the unit here. It just\n      // needs conversion from milliseconds unix timestamp to Date object.\n      // Our internal parsing assumes seconds as default unit.\n      content: 1632950000123,\n      contentType: null,\n      displayContent: null,\n      cssId: null,\n      cssClass: null,\n      type: \"columns\",\n    } as object as DataFrameCell\n\n    // Call the getCellFromArrow function\n    getCellFromArrow(MOCK_TIME_COLUMN, arrowCell)\n\n    // Check if the timestamp is adjusted properly\n    expect(MOCK_TIME_COLUMN.getCell).toHaveBeenCalledWith(\n      new Date(\"2021-09-29T21:13:20.123Z\")\n    )\n  })\n\n  it(\"applies display content from arrow cell\", () => {\n    const element = {\n      data: STYLER,\n      styler: {\n        uuid: \"FAKE_UUID\",\n        styles: \"FAKE_CSS\",\n        displayValues: DISPLAY_VALUES,\n        caption: \"FAKE_CAPTION\",\n      },\n    }\n    const data = new Quiver(element)\n    const cell = getCellFromArrow(MOCK_NUMBER_COLUMN, data.getCell(1, 1))\n\n    expect(cell).toEqual({\n      allowOverlay: true,\n      contentAlign: \"right\",\n      copyData: \"1\",\n      data: 1,\n      displayData: \"1\",\n      isMissingValue: false,\n      kind: \"number\",\n      readonly: true,\n      style: \"normal\",\n      thousandSeparator: \"\",\n      allowNegative: true,\n      fixedDecimals: 0,\n    })\n  })\n\n  it(\"applies Pandas styler CSS\", () => {\n    const element = {\n      data: STYLER,\n      styler: {\n        uuid: \"FAKE_UUID\",\n        styles:\n          \"#T_FAKE_UUIDrow1_col1, #T_FAKE_UUIDrow0_col0 { color: white; background-color: pink }\",\n        displayValues: DISPLAY_VALUES,\n        caption: \"FAKE_CAPTION\",\n      },\n    }\n    const data = new Quiver(element)\n\n    const cell = getCellFromArrow(\n      MOCK_NUMBER_COLUMN,\n      data.getCell(1, 1),\n      element.styler.styles\n    )\n\n    expect(cell).toEqual({\n      allowOverlay: true,\n      contentAlign: \"right\",\n      copyData: \"1\",\n      data: 1,\n      displayData: \"1\",\n      isMissingValue: false,\n      kind: \"number\",\n      readonly: true,\n      style: \"normal\",\n      allowNegative: true,\n      fixedDecimals: 0,\n      themeOverride: {\n        bgCell: \"pink\",\n        textDark: \"white\",\n      },\n      thousandSeparator: \"\",\n    })\n  })\n})\n\nit(\"doesn't apply Pandas Styler CSS for editable columns\", () => {\n  const element = {\n    data: STYLER,\n    styler: {\n      uuid: \"FAKE_UUID\",\n      styles:\n        \"#T_FAKE_UUIDrow1_col1, #T_FAKE_UUIDrow0_col0 { color: white; background-color: pink }\",\n      displayValues: DISPLAY_VALUES,\n      caption: \"FAKE_CAPTION\",\n    },\n  }\n  const data = new Quiver(element)\n\n  const cell = getCellFromArrow(\n    { ...MOCK_NUMBER_COLUMN, isEditable: true },\n    data.getCell(1, 1),\n    element.styler.styles\n  )\n\n  expect(cell).toEqual({\n    allowOverlay: true,\n    contentAlign: \"right\",\n    copyData: \"1\",\n    data: 1,\n    displayData: \"1\",\n    isMissingValue: false,\n    kind: \"number\",\n    readonly: true,\n    style: \"normal\",\n    thousandSeparator: \"\",\n    allowNegative: true,\n    fixedDecimals: 0,\n  })\n})\n\ndescribe(\"getColumnTypeFromArrow\", () => {\n  it.each([\n    [\n      {\n        pandas_type: \"float64\",\n        numpy_type: \"float64\",\n      },\n      NumberColumn,\n    ],\n    [\n      {\n        pandas_type: \"int64\",\n        numpy_type: \"int64\",\n      },\n      NumberColumn,\n    ],\n    [\n      {\n        pandas_type: \"uint64\",\n        numpy_type: \"uint64\",\n      },\n      NumberColumn,\n    ],\n    [\n      {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      TextColumn,\n    ],\n    [\n      {\n        pandas_type: \"unicode\",\n        numpy_type: \"string\",\n      },\n      TextColumn,\n    ],\n    [\n      {\n        pandas_type: \"bool\",\n        numpy_type: \"bool\",\n      },\n      CheckboxColumn,\n    ],\n    [\n      {\n        pandas_type: \"bool\",\n        numpy_type: \"boolean\",\n      },\n      CheckboxColumn,\n    ],\n    [\n      {\n        pandas_type: \"categorical\",\n        numpy_type: \"int8\",\n      },\n      SelectboxColumn,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"list[unicode]\",\n      },\n      ListColumn,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"object\",\n      },\n      ObjectColumn,\n    ],\n    [\n      {\n        pandas_type: \"decimal\",\n        numpy_type: \"object\",\n      },\n      NumberColumn,\n    ],\n    [\n      {\n        pandas_type: \"empty\",\n        numpy_type: \"object\",\n      },\n      TextColumn,\n    ],\n    [\n      {\n        pandas_type: \"datetime\",\n        numpy_type: \"datetime64[ns]\",\n      },\n      DateTimeColumn,\n    ],\n    [\n      {\n        pandas_type: \"datetimetz\",\n        numpy_type: \"datetime64[ns]\",\n      },\n      DateTimeColumn,\n    ],\n    [\n      {\n        pandas_type: \"time\",\n        numpy_type: \"object\",\n      },\n      TimeColumn,\n    ],\n    [\n      {\n        pandas_type: \"date\",\n        numpy_type: \"object\",\n      },\n      DateColumn,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"period[H]\",\n      },\n      ObjectColumn,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"interval[int64, both]\",\n      },\n      ObjectColumn,\n    ],\n    [\n      {\n        pandas_type: \"bytes\",\n        numpy_type: \"object\",\n      },\n      ObjectColumn,\n    ],\n  ])(\n    \"interprets %p as column type: %p\",\n    (arrowType: ArrowType, expectedType: ColumnCreator) => {\n      expect(getColumnTypeFromArrow(arrowType)).toEqual(expectedType)\n    }\n  )\n})\n\ndescribe(\"isIntegerType\", () => {\n  it.each([\n    [\n      {\n        pandas_type: \"float64\",\n        numpy_type: \"float64\",\n      },\n      false,\n    ],\n    [\n      {\n        pandas_type: \"int64\",\n        numpy_type: \"int64\",\n      },\n      true,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"int16\",\n      },\n      true,\n    ],\n    [\n      {\n        pandas_type: \"range\",\n        numpy_type: \"range\",\n      },\n      true,\n    ],\n    [\n      {\n        pandas_type: \"uint64\",\n        numpy_type: \"uint64\",\n      },\n      true,\n    ],\n    [\n      {\n        pandas_type: \"unicode\",\n        numpy_type: \"object\",\n      },\n      false,\n    ],\n    [\n      {\n        pandas_type: \"bool\",\n        numpy_type: \"bool\",\n      },\n      false,\n    ],\n    [\n      {\n        pandas_type: \"categorical\",\n        numpy_type: \"int8\",\n      },\n      false,\n    ],\n    [\n      {\n        pandas_type: \"object\",\n        numpy_type: \"interval[int64, both]\",\n      },\n      false,\n    ],\n  ])(\n    \"interprets %p as integer type: %p\",\n    (arrowType: ArrowType, expected: boolean) => {\n      expect(isIntegerType(Quiver.getTypeName(arrowType))).toEqual(expected)\n    }\n  )\n})\n"],"mappings":"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"}