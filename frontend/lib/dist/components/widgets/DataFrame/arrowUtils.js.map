{"version":3,"file":"arrowUtils.js","names":["GridCellKind","moment","Quiver","notNullOrUndefined","isNullOrUndefined","ObjectColumn","CheckboxColumn","NumberColumn","TextColumn","SelectboxColumn","ListColumn","isErrorCell","DateTimeColumn","TimeColumn","DateColumn","removeLineBreaks","extractCssProperty","htmlElementId","property","cssStyle","regex","RegExp","concat","replace","match","exec","trim","undefined","applyPandasStylerCss","cell","cssId","cssStyles","themeOverride","fontColor","textDark","backgroundColor","bgCell","getColumnTypeFromArrow","arrowType","typeName","getTypeName","toLowerCase","includes","startsWith","getIndexFromArrow","data","indexPosition","types","index","title","indexNames","isEditable","id","name","isIndex","isHidden","getColumnFromArrow","columnPosition","columns","meta","numpy_type","pandas_type","columnTypeOptions","options","getCategoricalOptions","getEmptyIndexColumn","indexNumber","getAllColumnsFromArrow","dimensions","numIndices","headerColumns","numColumns","dataColumns","push","i","column","getCellFromArrow","arrowCell","arguments","length","cellTemplate","kind","getCell","content","format","contentType","field","_arrowCell$field","_arrowCell$field$type","parsedDate","type","unit","_arrowCell$field$type2","_arrowCell$field2","_arrowCell$field2$typ","unix","convertToSeconds","utc","toDate","Number","decimalStr","displayContent","_data","displayData","Text","Uri","Custom","displayDate"],"sources":["../../../../src/components/widgets/DataFrame/arrowUtils.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n  UriCell,\n} from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment from \"moment\"\n\nimport {\n  DataFrameCell,\n  Quiver,\n  Type as ArrowType,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  CheckboxColumn,\n  NumberColumn,\n  TextColumn,\n  SelectboxColumn,\n  ListColumn,\n  isErrorCell,\n  DateTimeColumn,\n  TimeColumn,\n  DateColumn,\n  removeLineBreaks,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n      \"decimal\",\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *        Starts with 0 at the first non-index column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  const { dimensions } = data\n  const numIndices = dimensions.headerColumns\n  const numColumns = dimensions.dataColumns\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  const typeName = column.arrowType\n    ? Quiver.getTypeName(column.arrowType)\n    : null\n\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      typeName === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(\n          Quiver.convertToSeconds(\n            arrowCell.content,\n            arrowCell.field?.type?.unit ?? 0\n          )\n        )\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else if (typeName === \"decimal\") {\n    // This is a special case where we want to already prepare a decimal value\n    // to a number string based on the arrow field metadata. This is required\n    // because we don't have access to the required scale in the number column.\n    const decimalStr = isNullOrUndefined(arrowCell.content)\n      ? null\n      : Quiver.format(\n          arrowCell.content,\n          arrowCell.contentType,\n          arrowCell.field\n        )\n    cellTemplate = column.getCell(decimalStr)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      } else if (cellTemplate.kind === GridCellKind.Uri) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as UriCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as DatePickerType).data?.kind === \"date-picker-cell\"\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as DatePickerType).data,\n            displayDate: displayData,\n          },\n        } as DatePickerType\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n"],"mappings":"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"}