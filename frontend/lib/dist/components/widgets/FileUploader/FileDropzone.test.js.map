{"version":3,"file":"FileDropzone.test.js","names":["React","screen","render","FileDropzone","jsx","_jsx","getProps","props","arguments","length","undefined","disabled","label","onDrop","jest","fn","multiple","acceptedExtensions","maxSizeBytes","describe","it","expect","getByTestId","toBeInTheDocument","queryByTestId","not","toHaveAttribute"],"sources":["../../../../src/components/widgets/FileUploader/FileDropzone.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { screen } from \"@testing-library/react\"\n\nimport { render } from \"@streamlit/lib/src/test_util\"\n\nimport FileDropzone, { Props } from \"./FileDropzone\"\nimport \"@testing-library/jest-dom\"\n\nconst getProps = (props: Partial<Props> = {}): Props => ({\n  disabled: false,\n  label: \"LABEL\",\n  onDrop: jest.fn(),\n  multiple: true,\n  acceptedExtensions: [],\n  maxSizeBytes: 200,\n  ...props,\n})\n\ndescribe(\"FileDropzone widget\", () => {\n  it(\"renders without crashing\", () => {\n    const props = getProps()\n    render(<FileDropzone {...props} />)\n\n    expect(screen.getByTestId(\"stFileUploaderDropzone\")).toBeInTheDocument()\n  })\n\n  it(\"renders dropzone without extensions\", () => {\n    const props = getProps({\n      acceptedExtensions: [],\n    })\n    render(<FileDropzone {...props} />)\n    expect(\n      screen.queryByTestId(\"stFileUploaderDropzoneInput\")\n    ).not.toHaveAttribute(\"accept\")\n  })\n\n  it(\"renders dropzone with extensions\", () => {\n    const props = getProps({\n      acceptedExtensions: [\".jpg\"],\n    })\n    render(<FileDropzone {...props} />)\n    expect(\n      screen.queryByTestId(\"stFileUploaderDropzoneInput\")\n    ).toHaveAttribute(\"accept\", \".jpg\")\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,MAAM,QAAQ,wBAAwB;AAE/C,SAASC,MAAM;AAEf,OAAOC,YAAY;AACnB,OAAO,2BAA2B;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAElC,MAAMC,QAAQ,GAAG,SAAAA,CAAA;EAAA,IAACC,KAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OAAa;IACvDG,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAE,OAAO;IACdC,MAAM,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IACjBC,QAAQ,EAAE,IAAI;IACdC,kBAAkB,EAAE,EAAE;IACtBC,YAAY,EAAE,GAAG;IACjB,GAAGX;EACL,CAAC;AAAA,CAAC;AAEFY,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EACpCC,EAAE,CAAC,0BAA0B,EAAE,MAAM;IACnC,MAAMb,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxBJ,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKI;IAAK,CAAG,CAAC,CAAC;IAEnCc,MAAM,CAACpB,MAAM,CAACqB,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1E,CAAC,CAAC;EAEFH,EAAE,CAAC,qCAAqC,EAAE,MAAM;IAC9C,MAAMb,KAAK,GAAGD,QAAQ,CAAC;MACrBW,kBAAkB,EAAE;IACtB,CAAC,CAAC;IACFf,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKI;IAAK,CAAG,CAAC,CAAC;IACnCc,MAAM,CACJpB,MAAM,CAACuB,aAAa,CAAC,6BAA6B,CACpD,CAAC,CAACC,GAAG,CAACC,eAAe,CAAC,QAAQ,CAAC;EACjC,CAAC,CAAC;EAEFN,EAAE,CAAC,kCAAkC,EAAE,MAAM;IAC3C,MAAMb,KAAK,GAAGD,QAAQ,CAAC;MACrBW,kBAAkB,EAAE,CAAC,MAAM;IAC7B,CAAC,CAAC;IACFf,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKI;IAAK,CAAG,CAAC,CAAC;IACnCc,MAAM,CACJpB,MAAM,CAACuB,aAAa,CAAC,6BAA6B,CACpD,CAAC,CAACE,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC;EACrC,CAAC,CAAC;AACJ,CAAC,CAAC"}