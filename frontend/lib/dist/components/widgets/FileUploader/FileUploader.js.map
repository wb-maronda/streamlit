{"version":3,"file":"FileUploader.js","names":["React","axios","isEqual","zip","isNullOrUndefined","labelVisibilityProtoValueToEnum","FileUploaderState","FileUploaderStateProto","UploadedFileInfo","UploadedFileInfoProto","FormClearHelper","FileSize","getSizeDisplay","sizeConverter","StyledWidgetLabelHelp","WidgetLabel","TooltipIcon","Placement","FileDropzone","StyledFileUploader","UploadedFiles","UploadFileInfo","jsx","_jsx","jsxs","_jsxs","FileUploader","PureComponent","constructor","props","formClearHelper","localFileIdCounter","forceUpdatingStatus","componentDidUpdate","status","newWidgetValue","createWidgetValue","element","widgetMgr","fragmentId","prevWidgetValue","getFileUploaderStateValue","setFileUploaderStateValue","fromUi","reset","setState","files","dropHandler","acceptedFiles","rejectedFiles","multipleFiles","length","firstFileIndex","findIndex","file","errors","code","push","splice","uploadClient","fetchFileURLs","then","fileURLsArray","existingFile","state","find","f","type","deleteFile","id","forEach","_ref","fileURLs","acceptedFile","uploadFile","catch","errorMessage","addFiles","map","name","size","nextLocalFileId","rejectedInfos","rejected","getErrorMessage","cancelToken","CancelToken","source","uploadingFileInfo","progress","addFile","uploadUrl","e","onUploadProgress","token","onUploadComplete","err","isCancel","updateFile","setStatus","toString","localFileId","fileUrls","curFile","getFile","fileId","errorCode","maxUploadSizeInBytes","Byte","cancel","deleteUrl","removeFile","idToRemove","filter","curFileId","newFile","curState","event","newProgress","Math","round","loaded","total","onFormCleared","initialValue","emptyState","newestServerFileId","widgetValue","uploadedFileInfo","componentWillUnmount","disconnect","maxMbs","maxUploadSizeMb","Megabyte","isFileUpdating","some","componentDidMount","undefined","render","disabled","acceptedExtensions","manageFormClearListener","formId","newestToOldestFiles","slice","reverse","className","children","label","labelVisibility","value","help","content","placement","TOP_RIGHT","onDrop","multiple","maxSizeBytes","items","pageSize","onDelete","resetOnAdd"],"sources":["../../../../src/components/widgets/FileUploader/FileUploader.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport axios from \"axios\"\nimport isEqual from \"lodash/isEqual\"\nimport zip from \"lodash/zip\"\nimport { FileRejection } from \"react-dropzone\"\n\nimport {\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport {\n  FileUploader as FileUploaderProto,\n  FileUploaderState as FileUploaderStateProto,\n  FileURLs as FileURLsProto,\n  IFileURLs,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  FileSize,\n  getSizeDisplay,\n  sizeConverter,\n} from \"@streamlit/lib/src/util/FileHelper\"\nimport { FileUploadClient } from \"@streamlit/lib/src/FileUploadClient\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\n\nimport FileDropzone from \"./FileDropzone\"\nimport { StyledFileUploader } from \"./styled-components\"\nimport UploadedFiles from \"./UploadedFiles\"\nimport { UploadedStatus, UploadFileInfo } from \"./UploadFileInfo\"\n\nexport interface Props {\n  disabled: boolean\n  element: FileUploaderProto\n  widgetMgr: WidgetStateManager\n  uploadClient: FileUploadClient\n  width: number\n  fragmentId?: string\n}\n\ntype FileUploaderStatus =\n  | \"ready\" // FileUploader can upload or delete files\n  | \"updating\" // at least one file is being uploaded or deleted\n\nexport interface State {\n  /**\n   * List of files dropped on the FileUploader by the user. This list includes\n   * rejected files that will not be updated.\n   */\n  files: UploadFileInfo[]\n}\n\nclass FileUploader extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  /**\n   * A counter for assigning unique internal IDs to each file tracked\n   * by the uploader. These IDs are used to update file state internally,\n   * and are separate from the serverFileIds that are returned by the server.\n   */\n  private localFileIdCounter = 1\n\n  /**\n   * A flag to handle the case where a file uploader that only accepts one file\n   * at a time has its file replaced, which we want to treat as a single change\n   * rather than the deletion of a file followed by the upload of another.\n   * Doing this ensures that the script (and thus callbacks, etc) is only run a\n   * single time when replacing a file.  Note that deleting a file and uploading\n   * a new one with two interactions (clicking the 'X', then dragging a file\n   * into the file uploader) will still cause the script to execute twice.\n   */\n  private forceUpdatingStatus = false\n\n  public constructor(props: Props) {\n    super(props)\n    this.state = this.initialValue\n  }\n\n  get initialValue(): State {\n    const emptyState = { files: [], newestServerFileId: 0 }\n    const { widgetMgr, element } = this.props\n\n    const widgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (isNullOrUndefined(widgetValue)) {\n      return emptyState\n    }\n\n    const { uploadedFileInfo } = widgetValue\n    if (isNullOrUndefined(uploadedFileInfo) || uploadedFileInfo.length === 0) {\n      return emptyState\n    }\n\n    return {\n      files: uploadedFileInfo.map(f => {\n        const name = f.name as string\n        const size = f.size as number\n\n        const fileId = f.fileId as string\n        const fileUrls = f.fileUrls as FileURLsProto\n\n        return new UploadFileInfo(name, size, this.nextLocalFileId(), {\n          type: \"uploaded\",\n          fileId,\n          fileUrls,\n        })\n      }),\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  /**\n   * Return this.props.element.maxUploadSizeMb, converted to bytes.\n   */\n  private get maxUploadSizeInBytes(): number {\n    const maxMbs = this.props.element.maxUploadSizeMb\n    return sizeConverter(maxMbs, FileSize.Megabyte, FileSize.Byte)\n  }\n\n  /**\n   * Return the FileUploader's current status, which is derived from\n   * its state.\n   */\n  public get status(): FileUploaderStatus {\n    const isFileUpdating = (file: UploadFileInfo): boolean =>\n      file.status.type === \"uploading\"\n\n    // If any of our files is Uploading or Deleting, then we're currently\n    // updating.\n    if (this.state.files.some(isFileUpdating) || this.forceUpdatingStatus) {\n      return \"updating\"\n    }\n\n    return \"ready\"\n  }\n\n  public componentDidUpdate = (): void => {\n    // If our status is not \"ready\", then we have uploads in progress.\n    // We won't submit a new widgetValue until all uploads have resolved.\n    if (this.status !== \"ready\") {\n      return\n    }\n\n    const newWidgetValue = this.createWidgetValue()\n    const { element, widgetMgr, fragmentId } = this.props\n\n    // Maybe send a widgetValue update to the widgetStateManager.\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (!isEqual(newWidgetValue, prevWidgetValue)) {\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        {\n          fromUi: true,\n        },\n        fragmentId\n      )\n    }\n  }\n\n  public componentDidMount(): void {\n    const newWidgetValue = this.createWidgetValue()\n    const { element, widgetMgr, fragmentId } = this.props\n\n    // Set the state value on mount, to avoid triggering an extra rerun after\n    // the first rerun.\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (prevWidgetValue === undefined) {\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        {\n          fromUi: false,\n        },\n        fragmentId\n      )\n    }\n  }\n\n  private createWidgetValue(): FileUploaderStateProto {\n    const uploadedFileInfo: UploadedFileInfoProto[] = this.state.files\n      .filter(f => f.status.type === \"uploaded\")\n      .map(f => {\n        const { name, size, status } = f\n        const { fileId, fileUrls } = status as UploadedStatus\n        return new UploadedFileInfoProto({\n          fileId,\n          fileUrls,\n          name,\n          size,\n        })\n      })\n\n    return new FileUploaderStateProto({ uploadedFileInfo })\n  }\n\n  /**\n   * Clear files and errors, and reset the widget to its READY state.\n   */\n  private reset = (): void => {\n    this.setState({ files: [] })\n  }\n\n  /**\n   * Called by react-dropzone when files and drag-and-dropped onto the widget.\n   *\n   * @param acceptedFiles an array of files.\n   * @param rejectedFiles an array of FileRejections. A FileRejection\n   * encapsulates a File and an error indicating why it was rejected by\n   * the dropzone widget.\n   */\n  private dropHandler = (\n    acceptedFiles: File[],\n    rejectedFiles: FileRejection[]\n  ): void => {\n    const { element } = this.props\n    const { multipleFiles } = element\n\n    // If this is a single-file uploader and multiple files were dropped,\n    // all the files will be rejected. In this case, we pull out the first\n    // valid file into acceptedFiles, and reject the rest.\n    if (\n      !multipleFiles &&\n      acceptedFiles.length === 0 &&\n      rejectedFiles.length > 1\n    ) {\n      const firstFileIndex = rejectedFiles.findIndex(\n        file =>\n          file.errors.length === 1 && file.errors[0].code === \"too-many-files\"\n      )\n\n      if (firstFileIndex >= 0) {\n        acceptedFiles.push(rejectedFiles[firstFileIndex].file)\n        rejectedFiles.splice(firstFileIndex, 1)\n      }\n    }\n\n    this.props.uploadClient\n      .fetchFileURLs(acceptedFiles)\n      .then((fileURLsArray: IFileURLs[]) => {\n        // If this is a single-file uploader that already has an uploaded file,\n        // remove that file so that it can be replaced with our new one.\n        if (!multipleFiles && acceptedFiles.length > 0) {\n          const existingFile = this.state.files.find(\n            f => f.status.type !== \"error\"\n          )\n          if (existingFile) {\n            this.forceUpdatingStatus = true\n            this.deleteFile(existingFile.id)\n            this.forceUpdatingStatus = false\n          }\n        }\n\n        zip(fileURLsArray, acceptedFiles).forEach(\n          ([fileURLs, acceptedFile]) => {\n            this.uploadFile(fileURLs as FileURLsProto, acceptedFile as File)\n          }\n        )\n      })\n      .catch((errorMessage: string) => {\n        this.addFiles(\n          acceptedFiles.map(f => {\n            return new UploadFileInfo(f.name, f.size, this.nextLocalFileId(), {\n              type: \"error\",\n              errorMessage,\n            })\n          })\n        )\n      })\n\n    // Create an UploadFileInfo for each of our rejected files, and add them to\n    // our state.\n    if (rejectedFiles.length > 0) {\n      const rejectedInfos = rejectedFiles.map(rejected => {\n        const { file } = rejected\n        return new UploadFileInfo(\n          file.name,\n          file.size,\n          this.nextLocalFileId(),\n          {\n            type: \"error\",\n            errorMessage: this.getErrorMessage(\n              rejected.errors[0].code,\n              rejected.file\n            ),\n          }\n        )\n      })\n      this.addFiles(rejectedInfos)\n    }\n  }\n\n  public uploadFile = (fileURLs: IFileURLs, file: File): void => {\n    // Create an UploadFileInfo for this file and add it to our state.\n    const cancelToken = axios.CancelToken.source()\n    const uploadingFileInfo = new UploadFileInfo(\n      file.name,\n      file.size,\n      this.nextLocalFileId(),\n      {\n        type: \"uploading\",\n        cancelToken,\n        progress: 1,\n      }\n    )\n    this.addFile(uploadingFileInfo)\n\n    this.props.uploadClient\n      .uploadFile(\n        this.props.element,\n        fileURLs.uploadUrl as string,\n        file,\n        e => this.onUploadProgress(e, uploadingFileInfo.id),\n        cancelToken.token\n      )\n      .then(() => this.onUploadComplete(uploadingFileInfo.id, fileURLs))\n      .catch(err => {\n        // If this was a cancel error, we don't show the user an error -\n        // the cancellation was in response to an action they took.\n        if (!axios.isCancel(err)) {\n          this.updateFile(\n            uploadingFileInfo.id,\n            uploadingFileInfo.setStatus({\n              type: \"error\",\n              errorMessage: err ? err.toString() : \"Unknown error\",\n            })\n          )\n        }\n      })\n  }\n\n  /**\n   * Called when an upload has completed. Updates the file's status, and\n   * assigns it the new file ID returned from the server.\n   */\n  private onUploadComplete = (\n    localFileId: number,\n    fileUrls: IFileURLs\n  ): void => {\n    const curFile = this.getFile(localFileId)\n    if (isNullOrUndefined(curFile) || curFile.status.type !== \"uploading\") {\n      // The file may have been canceled right before the upload\n      // completed. In this case, we just bail.\n      return\n    }\n\n    this.updateFile(\n      curFile.id,\n      curFile.setStatus({\n        type: \"uploaded\",\n        fileId: fileUrls.fileId as string,\n        fileUrls,\n      })\n    )\n  }\n\n  /**\n   * Return a human-readable message for the given error.\n   */\n  private getErrorMessage = (errorCode: string, file: File): string => {\n    switch (errorCode) {\n      case \"file-too-large\":\n        return `File must be ${getSizeDisplay(\n          this.maxUploadSizeInBytes,\n          FileSize.Byte\n        )} or smaller.`\n      case \"file-invalid-type\":\n        return `${file.type} files are not allowed.`\n      case \"file-too-small\":\n        // This should not fire.\n        return `File size is too small.`\n      case \"too-many-files\":\n        return \"Only one file is allowed.\"\n      default:\n        return \"Unexpected error. Please try again.\"\n    }\n  }\n\n  /**\n   * Delete the file with the given ID:\n   * - Cancel the file upload if it's in progress\n   * - Remove the fileID from our local state\n   * We don't actually tell the server to delete the file. It will garbage\n   * collect it.\n   */\n  public deleteFile = (fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (isNullOrUndefined(file)) {\n      return\n    }\n\n    if (file.status.type === \"uploading\") {\n      // The file hasn't been uploaded. Let's cancel the request.\n      // However, it may have been received by the server so we'll still\n      // send out a request to delete.\n      file.status.cancelToken.cancel()\n    }\n\n    if (file.status.type === \"uploaded\" && file.status.fileUrls.deleteUrl) {\n      this.props.uploadClient.deleteFile(file.status.fileUrls.deleteUrl)\n    }\n\n    this.removeFile(fileId)\n  }\n\n  /** Append the given file to `state.files`. */\n  private addFile = (file: UploadFileInfo): void => {\n    this.setState(state => ({ files: [...state.files, file] }))\n  }\n\n  /** Append the given files to `state.files`. */\n  private addFiles = (files: UploadFileInfo[]): void => {\n    this.setState(state => ({ files: [...state.files, ...files] }))\n  }\n\n  /** Remove the file with the given ID from `state.files`. */\n  private removeFile = (idToRemove: number): void => {\n    this.setState(state => ({\n      files: state.files.filter(file => file.id !== idToRemove),\n    }))\n  }\n\n  /**\n   * Return the file with the given ID, if one exists.\n   */\n  private getFile = (fileId: number): UploadFileInfo | undefined => {\n    return this.state.files.find(file => file.id === fileId)\n  }\n\n  /** Replace the file with the given id in `state.files`. */\n  private updateFile = (curFileId: number, newFile: UploadFileInfo): void => {\n    this.setState(curState => {\n      return {\n        files: curState.files.map(file =>\n          file.id === curFileId ? newFile : file\n        ),\n      }\n    })\n  }\n\n  /**\n   * Callback for file upload progress. Updates a single file's local `progress`\n   * state.\n   */\n  private onUploadProgress = (event: ProgressEvent, fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (isNullOrUndefined(file) || file.status.type !== \"uploading\") {\n      return\n    }\n\n    const newProgress = Math.round((event.loaded * 100) / event.total)\n    if (file.status.progress === newProgress) {\n      return\n    }\n\n    // Update file.progress\n    this.updateFile(\n      fileId,\n      file.setStatus({\n        type: \"uploading\",\n        cancelToken: file.status.cancelToken,\n        progress: newProgress,\n      })\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ files: [] }, () => {\n      const newWidgetValue = this.createWidgetValue()\n      if (isNullOrUndefined(newWidgetValue)) {\n        return\n      }\n\n      const { widgetMgr, element, fragmentId } = this.props\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        { fromUi: true },\n        fragmentId\n      )\n    })\n  }\n\n  public render(): React.ReactNode {\n    const { files } = this.state\n    const { element, disabled, widgetMgr } = this.props\n    const acceptedExtensions = element.type\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // We display files in the reverse order they were added.\n    // This way, if you have multiple pages of uploaded files and then drop\n    // another one, you'll see that newest file at the top of the first page.\n    const newestToOldestFiles = files.slice().reverse()\n\n    return (\n      <StyledFileUploader\n        className=\"stFileUploader\"\n        data-testid=\"stFileUploader\"\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <FileDropzone\n          onDrop={this.dropHandler}\n          multiple={element.multipleFiles}\n          acceptedExtensions={acceptedExtensions}\n          maxSizeBytes={this.maxUploadSizeInBytes}\n          label={element.label}\n          disabled={disabled}\n        />\n        {newestToOldestFiles.length > 0 && (\n          <UploadedFiles\n            items={newestToOldestFiles}\n            pageSize={3}\n            onDelete={this.deleteFile}\n            resetOnAdd\n          />\n        )}\n      </StyledFileUploader>\n    )\n  }\n\n  private nextLocalFileId(): number {\n    return this.localFileIdCounter++\n  }\n}\n\nexport default FileUploader\n"],"mappings":"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"}