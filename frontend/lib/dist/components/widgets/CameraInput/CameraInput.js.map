{"version":3,"file":"CameraInput.js","names":["X","axios","isEqual","React","FileUploaderState","FileUploaderStateProto","UploadedFileInfo","UploadedFileInfoProto","Icon","Placement","TooltipIcon","StyledWidgetLabelHelp","WidgetLabel","FormClearHelper","logError","labelVisibilityProtoValueToEnum","UploadFileInfo","CameraInputButton","FacingMode","StyledBox","StyledCameraInput","StyledSpan","StyledImg","WebcamComponent","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MIN_SHUTTER_EFFECT_TIME_MS","CameraInput","PureComponent","constructor","props","localFileIdCounter","RESTORED_FROM_WIDGET_STRING","formClearHelper","getProgress","state","files","length","status","type","progress","undefined","setClearPhotoInProgress","clearPhotoInProgress","setState","setFacingMode","prevState","facingMode","USER","ENVIRONMENT","handleCapture","imgSrc","Promise","resolve","shutter","minShutterEffectPassed","delay","t","setTimeout","urltoFile","concat","Date","toISOString","replace","then","file","uploadClient","fetchFileURLs","fileURLsArray","fileUrls","_ref","uploadFile","_","catch","err","removeCapture","forEach","deleteFile","id","componentDidUpdate","newWidgetValue","createWidgetValue","element","widgetMgr","fragmentId","prevWidgetValue","getFileUploaderStateValue","setFileUploaderStateValue","fromUi","onFormCleared","fileId","getFile","cancelToken","cancel","deleteUrl","removeFile","addFile","idToRemove","filter","find","updateFile","curFileId","newFile","curState","map","onUploadComplete","localFileId","curFile","setStatus","onUploadProgress","event","newProgress","Math","round","loaded","total","reset","fileURLs","CancelToken","source","uploadingFileInfo","name","size","nextLocalFileId","uploadUrl","e","token","isCancel","errorMessage","toString","initialValue","emptyState","widgetValue","uploadedFileInfo","f","componentWillUnmount","disconnect","isFileUpdating","some","componentDidMount","render","_element$labelVisibil","disabled","width","manageFormClearListener","formId","className","children","label","labelVisibility","value","help","content","placement","TOP_RIGHT","src","alt","opacity","height","onClick","margin","testOverride","url","filename","fetch","res","arrayBuffer","buf","File"],"sources":["../../../../src/components/widgets/CameraInput/CameraInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { X } from \"@emotion-icons/open-iconic\"\nimport axios from \"axios\"\nimport isEqual from \"lodash/isEqual\"\nimport React from \"react\"\n\nimport {\n  CameraInput as CameraInputProto,\n  FileUploaderState as FileUploaderStateProto,\n  FileURLs as FileURLsProto,\n  IFileURLs,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"@streamlit/lib/src/proto\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { FileUploadClient } from \"@streamlit/lib/src/FileUploadClient\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\nimport {\n  UploadedStatus,\n  UploadFileInfo,\n  UploadingStatus,\n} from \"@streamlit/lib/src/components/widgets/FileUploader/UploadFileInfo\"\nimport CameraInputButton from \"./CameraInputButton\"\nimport { FacingMode } from \"./SwitchFacingModeButton\"\nimport {\n  StyledBox,\n  StyledCameraInput,\n  StyledSpan,\n  StyledImg,\n} from \"./styled-components\"\nimport WebcamComponent, { WebcamPermission } from \"./WebcamComponent\"\n\nexport interface Props {\n  element: CameraInputProto\n  widgetMgr: WidgetStateManager\n  uploadClient: FileUploadClient\n  disabled: boolean\n  width: number\n  fragmentId?: string\n  // Allow for unit testing\n  testOverride?: WebcamPermission\n}\n\ntype FileUploaderStatus =\n  | \"ready\" // FileUploader can upload or delete files\n  | \"updating\" // at least one file is being uploaded or deleted\n\nexport interface State {\n  /**\n   * Base64-encoded image data of the current frame from the camera.\n   */\n  imgSrc: string | null\n\n  shutter: boolean\n\n  minShutterEffectPassed: boolean\n  /**\n   * List of files (snapshots) captured by the user.\n   * Should contain exact one element if the user has taken a snapshot.\n   */\n  files: UploadFileInfo[]\n\n  /**\n   * Represents whether the component is in clear photo mode,\n   * when snapshot removed and new Webcam component is not shown yet.\n   * Time interval between `Clear Photo` button clicked and access to Webcam received again\n   */\n  clearPhotoInProgress: boolean\n\n  /**\n   * User facing mode for mobile devices. If `user`, the camera will be facing the user (front camera).\n   * If `environment`, the camera will be facing the environment (back camera).\n   */\n  facingMode: FacingMode\n}\n\nconst MIN_SHUTTER_EFFECT_TIME_MS = 150\n\nclass CameraInput extends React.PureComponent<Props, State> {\n  private localFileIdCounter = 1\n\n  private RESTORED_FROM_WIDGET_STRING = \"RESTORED_FROM_WIDGET\"\n\n  private readonly formClearHelper = new FormClearHelper()\n\n  public constructor(props: Props) {\n    super(props)\n    this.state = this.initialValue\n  }\n\n  private getProgress = (): number | null | undefined => {\n    if (\n      this.state.files.length > 0 &&\n      this.state.files[this.state.files.length - 1].status.type === \"uploading\"\n    ) {\n      const status = this.state.files[this.state.files.length - 1]\n        .status as UploadingStatus\n      return status.progress\n    }\n    return undefined\n  }\n\n  private setClearPhotoInProgress = (clearPhotoInProgress: boolean): void => {\n    this.setState({ clearPhotoInProgress })\n  }\n\n  private setFacingMode = (): void => {\n    this.setState(prevState => ({\n      facingMode:\n        prevState.facingMode === FacingMode.USER\n          ? FacingMode.ENVIRONMENT\n          : FacingMode.USER,\n    }))\n  }\n\n  private handleCapture = (imgSrc: string | null): Promise<void> => {\n    if (imgSrc === null) {\n      return Promise.resolve()\n    }\n\n    this.setState({\n      imgSrc,\n      shutter: true,\n      minShutterEffectPassed: false,\n    })\n\n    const delay = (t: number): Promise<ReturnType<typeof setTimeout>> =>\n      new Promise(resolve => setTimeout(resolve, t))\n\n    return urltoFile(\n      imgSrc,\n      `camera-input-${new Date().toISOString().replace(/:/g, \"_\")}.jpg`\n    )\n      .then(file =>\n        this.props.uploadClient\n          .fetchFileURLs([file])\n          .then(fileURLsArray => ({ file: file, fileUrls: fileURLsArray[0] }))\n      )\n      .then(({ file, fileUrls }) => this.uploadFile(fileUrls, file))\n      .then(() => delay(MIN_SHUTTER_EFFECT_TIME_MS))\n      .then(() => {\n        this.setState((prevState, _) => {\n          return {\n            imgSrc,\n            shutter: prevState.shutter,\n            minShutterEffectPassed: true,\n          }\n        })\n      })\n      .catch(err => {\n        logError(err)\n      })\n  }\n\n  private removeCapture = (): void => {\n    if (this.state.files.length === 0) {\n      return\n    }\n\n    this.state.files.forEach(file => this.deleteFile(file.id))\n\n    this.setState({\n      imgSrc: null,\n      clearPhotoInProgress: true,\n    })\n  }\n\n  get initialValue(): State {\n    const emptyState = {\n      files: [],\n      imgSrc: null,\n      shutter: false,\n      minShutterEffectPassed: true,\n      clearPhotoInProgress: false,\n      facingMode: FacingMode.USER,\n    }\n    const { widgetMgr, element } = this.props\n\n    const widgetValue = widgetMgr.getFileUploaderStateValue(element)\n\n    if (widgetValue == null) {\n      return emptyState\n    }\n\n    const { uploadedFileInfo } = widgetValue\n    if (uploadedFileInfo == null || uploadedFileInfo.length === 0) {\n      return emptyState\n    }\n\n    return {\n      files: uploadedFileInfo.map(f => {\n        const name = f.name as string\n        const size = f.size as number\n\n        const fileId = f.fileId as string\n        const fileUrls = f.fileUrls as FileURLsProto\n\n        return new UploadFileInfo(name, size, this.nextLocalFileId(), {\n          type: \"uploaded\",\n          fileId,\n          fileUrls,\n        })\n      }),\n      imgSrc:\n        uploadedFileInfo.length === 0 ? \"\" : this.RESTORED_FROM_WIDGET_STRING,\n      shutter: false,\n      minShutterEffectPassed: false,\n      clearPhotoInProgress: false,\n      facingMode: FacingMode.USER,\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  /**\n   * Return the FileUploader's current status, which is derived from\n   * its state.\n   */\n  public get status(): FileUploaderStatus {\n    const isFileUpdating = (file: UploadFileInfo): boolean =>\n      file.status.type === \"uploading\"\n\n    // If any of our files is Uploading or Deleting, then we're currently\n    // updating.\n    if (this.state.files.some(isFileUpdating)) {\n      return \"updating\"\n    }\n\n    return \"ready\"\n  }\n\n  public componentDidUpdate = (): void => {\n    // If our status is not \"ready\", then we have uploads in progress.\n    // We won't submit a new widgetValue until all uploads have resolved.\n    if (this.status !== \"ready\") {\n      return\n    }\n\n    // If we have had no completed uploads, our widgetValue will be\n    // undefined, and we can early-out of the state update.\n    const newWidgetValue = this.createWidgetValue()\n\n    const { element, widgetMgr, fragmentId } = this.props\n\n    // Maybe send a widgetValue update to the widgetStateManager.\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (!isEqual(newWidgetValue, prevWidgetValue)) {\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        {\n          fromUi: true,\n        },\n        fragmentId\n      )\n    }\n  }\n\n  public componentDidMount(): void {\n    const newWidgetValue = this.createWidgetValue()\n    const { element, widgetMgr, fragmentId } = this.props\n\n    // Set the state value on mount, to avoid triggering an extra rerun after\n    // the first rerun.\n    // We use same primitives as in file uploader widget,\n    // since simanticly camera_input is just a special case of file uploader.\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (prevWidgetValue === undefined) {\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        {\n          fromUi: false,\n        },\n        fragmentId\n      )\n    }\n  }\n\n  private createWidgetValue(): FileUploaderStateProto {\n    const uploadedFileInfo: UploadedFileInfoProto[] = this.state.files\n      .filter(f => f.status.type === \"uploaded\")\n      .map(f => {\n        const { name, size, status } = f\n        return new UploadedFileInfoProto({\n          fileId: (status as UploadedStatus).fileId,\n          fileUrls: (status as UploadedStatus).fileUrls,\n          name,\n          size,\n        })\n      })\n\n    return new FileUploaderStateProto({ uploadedFileInfo })\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ files: [] }, () => {\n      const newWidgetValue = this.createWidgetValue()\n      if (newWidgetValue == null) {\n        return\n      }\n\n      this.setState({\n        imgSrc: null,\n      })\n\n      const { widgetMgr, element, fragmentId } = this.props\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        newWidgetValue,\n        { fromUi: true },\n        fragmentId\n      )\n    })\n  }\n\n  public render(): React.ReactNode {\n    const { element, widgetMgr, disabled, width } = this.props\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <StyledCameraInput\n        width={width}\n        className=\"row-widget\"\n        data-testid=\"stCameraInput\"\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        {this.state.imgSrc ? (\n          <>\n            <StyledBox width={width}>\n              {this.state.imgSrc !== this.RESTORED_FROM_WIDGET_STRING && (\n                <StyledImg\n                  src={this.state.imgSrc}\n                  alt=\"Snapshot\"\n                  opacity={\n                    this.state.shutter || !this.state.minShutterEffectPassed\n                      ? \"50%\"\n                      : \"100%\"\n                  }\n                  width={width}\n                  height={(width * 9) / 16}\n                />\n              )}\n            </StyledBox>\n            <CameraInputButton\n              onClick={this.removeCapture}\n              progress={this.getProgress()}\n              disabled={!!this.getProgress() || disabled}\n            >\n              {this.getProgress() ? (\n                \"Uploading...\"\n              ) : (\n                <StyledSpan>\n                  <Icon content={X} margin=\"0 xs 0 0\" size=\"sm\" /> Clear photo\n                </StyledSpan>\n              )}\n            </CameraInputButton>\n          </>\n        ) : (\n          <WebcamComponent\n            handleCapture={this.handleCapture}\n            width={width}\n            disabled={disabled}\n            clearPhotoInProgress={this.state.clearPhotoInProgress}\n            setClearPhotoInProgress={this.setClearPhotoInProgress}\n            facingMode={this.state.facingMode}\n            setFacingMode={this.setFacingMode}\n            testOverride={this.props.testOverride}\n          />\n        )}\n      </StyledCameraInput>\n    )\n  }\n\n  private nextLocalFileId(): number {\n    return this.localFileIdCounter++\n  }\n\n  /**\n   * Delete the file with the given ID:\n   * - Cancel the file upload if it's in progress\n   * - Remove the fileID from our local state\n   * We don't actually tell the server to delete the file. It will garbage\n   * collect it.\n   */\n  public deleteFile = (fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null) {\n      return\n    }\n\n    if (file.status.type === \"uploading\") {\n      // The file hasn't been uploaded. Let's cancel the request.\n      // However, it may have been received by the server so we'll still\n      // send out a request to delete.\n      file.status.cancelToken.cancel()\n    }\n\n    if (file.status.type === \"uploaded\" && file.status.fileUrls.deleteUrl) {\n      this.props.uploadClient.deleteFile(file.status.fileUrls.deleteUrl)\n    }\n    this.removeFile(fileId)\n  }\n\n  /** Append the given file to `state.files`. */\n  private addFile = (file: UploadFileInfo): void => {\n    this.setState(state => ({ files: [...state.files, file] }))\n  }\n\n  /** Remove the file with the given ID from `state.files`. */\n  private removeFile = (idToRemove: number): void => {\n    this.setState(state => ({\n      files: state.files.filter(file => file.id !== idToRemove),\n    }))\n  }\n\n  /**\n   * Return the file with the given ID, if one exists.\n   */\n  private getFile = (fileId: number): UploadFileInfo | undefined => {\n    return this.state.files.find(file => file.id === fileId)\n  }\n\n  /** Replace the file with the given id in `state.files`. */\n  private updateFile = (curFileId: number, newFile: UploadFileInfo): void => {\n    this.setState(curState => {\n      return {\n        files: curState.files.map(file =>\n          file.id === curFileId ? newFile : file\n        ),\n      }\n    })\n  }\n\n  /**\n   * Called when an upload has completed. Updates the file's status, and\n   * assigns it the new file ID returned from the server.\n   */\n  private onUploadComplete = (\n    localFileId: number,\n    fileUrls: IFileURLs\n  ): void => {\n    this.setState(() => ({\n      shutter: false,\n    }))\n\n    const curFile = this.getFile(localFileId)\n    if (curFile == null || curFile.status.type !== \"uploading\") {\n      // The file may have been canceled right before the upload\n      // completed. In this case, we just bail.\n      return\n    }\n\n    this.updateFile(\n      curFile.id,\n      curFile.setStatus({\n        type: \"uploaded\",\n        fileId: fileUrls.fileId as string,\n        fileUrls,\n      })\n    )\n  }\n\n  /**\n   * Callback for file upload progress. Updates a single file's local `progress`\n   * state.\n   */\n  private onUploadProgress = (event: ProgressEvent, fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null || file.status.type !== \"uploading\") {\n      return\n    }\n\n    const newProgress = Math.round((event.loaded * 100) / event.total)\n    if (file.status.progress === newProgress) {\n      return\n    }\n\n    // Update file.progress\n    this.updateFile(\n      fileId,\n      file.setStatus({\n        type: \"uploading\",\n        cancelToken: file.status.cancelToken,\n        progress: newProgress,\n      })\n    )\n  }\n\n  /**\n   * Clear files and errors, and reset the widget to its READY state.\n   */\n  private reset = (): void => {\n    this.setState({ files: [], imgSrc: null })\n  }\n\n  public uploadFile = (fileURLs: IFileURLs, file: File): void => {\n    // Create an UploadFileInfo for this file and add it to our state.\n    const cancelToken = axios.CancelToken.source()\n    const uploadingFileInfo = new UploadFileInfo(\n      file.name,\n      file.size,\n      this.nextLocalFileId(),\n      {\n        type: \"uploading\",\n        cancelToken,\n        progress: 1,\n      }\n    )\n    this.addFile(uploadingFileInfo)\n\n    this.props.uploadClient\n      .uploadFile(\n        this.props.element,\n        fileURLs.uploadUrl as string,\n        file,\n        e => this.onUploadProgress(e, uploadingFileInfo.id),\n        cancelToken.token\n      )\n      .then(() => this.onUploadComplete(uploadingFileInfo.id, fileURLs))\n      .catch(err => {\n        // If this was a cancel error, we don't show the user an error -\n        // the cancellation was in response to an action they took.\n        if (!axios.isCancel(err)) {\n          this.updateFile(\n            uploadingFileInfo.id,\n            uploadingFileInfo.setStatus({\n              type: \"error\",\n              errorMessage: err ? err.toString() : \"Unknown error\",\n            })\n          )\n        }\n      })\n  }\n}\n\nfunction urltoFile(url: string, filename: string): Promise<File> {\n  return fetch(url)\n    .then(res => res.arrayBuffer())\n    .then(buf => new File([buf], filename, { type: \"image/jpeg\" }))\n}\n\nexport default CameraInput\n"],"mappings":"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"}