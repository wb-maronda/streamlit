{"version":3,"file":"componentUtils.js","names":["isNullOrUndefined","logWarning","ArrowDataframe","toExportedTheme","ComponentMessageType","StreamlitMessageType","CUSTOM_COMPONENT_API_VERSION","createIframeMessageHandler","callbacks","type","data","current","undefined","isReady","readyCheck","element","widgetMgr","setComponentError","componentReadyCallback","frameHeightCallback","fragmentId","COMPONENT_READY","apiVersion","Error","SET_COMPONENT_VALUE","handleSetComponentValue","tryGetValue","dataType","fromUi","SET_FRAME_HEIGHT","parseArgs","jsonArgs","specialArgs","newArgs","JSON","parse","dataframeArgs","specialArg","key","value","toLowerCase","push","toObject","arrowDataframe","bytes","sendRenderMessage","currentArgs","currentDataframeArgs","disabled","theme","iframe","contentWindow","postMessage","RENDER","args","dfs","source","setArrowValue","setBytesValue","setJsonValue","obj","name","defaultValue","arguments","length","hasOwnProperty"],"sources":["../../../../src/components/widgets/CustomComponent/componentUtils.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport {\n  ArrowDataframe,\n  ComponentInstance as ComponentInstanceProto,\n  ISpecialArg,\n  SpecialArg as SpecialArgProto,\n} from \"@streamlit/lib/src/proto\"\nimport { EmotionTheme, toExportedTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\n\nimport { ComponentMessageType, StreamlitMessageType } from \"./enums\"\n\n// The custom component's value posted from the iFrame has one of the three types as defined\n// in component-lib/\nexport type ValueType = \"bytes\" | \"dataframe\" | \"json\"\n\n// Define types for messages being sent from the custom component\n// The types are also defined in the component-lib/ module, and we can\n// replace these here when we have a shared module. Until then,\n// the typing is hopefully at least a little bit helpful for devs.\ntype ReadyMessage = {\n  apiVersion: number\n}\ntype ComponentValueMessage = {\n  /* the value sent from the custom component can be anything */\n  value: any\n  dataType: ValueType\n}\ntype FrameHeightMessage = {\n  height: number\n}\nexport type IframeMessage =\n  | ReadyMessage\n  | ComponentValueMessage\n  | FrameHeightMessage\n\nexport interface IframeMessageHandlerProps {\n  isReady: () => boolean\n  element: ComponentInstanceProto\n  widgetMgr: WidgetStateManager\n  setComponentError: (error: Error) => void\n  componentReadyCallback: () => void\n  frameHeightCallback: (height: number | undefined) => void\n  fragmentId?: string\n}\n\nexport interface Args {\n  [name: string]: any\n}\nexport interface DataframeArg {\n  key: string\n  value: any\n}\n\n/**\n * The current custom component API version. If our API changes,\n * this value must be incremented. ComponentInstances send their API\n * version in the COMPONENT_READY call.\n */\nexport const CUSTOM_COMPONENT_API_VERSION = 1\n\n/**\n * Create a callback to be passed to  {@link ComponentRegistry#registerListener}.\n * The passed callbacks RefObject is used in the returned function to access\n * the current fields of the reference when the callback is executed by the ComponentRegistry.\n * This ref-approach allows us to register the listener callback in a functional component only once\n * instead of keeping registering / unregistering multiple times.\n *\n * @param callbacks a ref object containing actual callbacks\n * @returns the callback function to be passed to {@link ComponentRegistry#registerListener}\n */\nexport function createIframeMessageHandler(\n  callbacks: React.RefObject<IframeMessageHandlerProps | undefined>\n): (type: string, data: IframeMessage) => void {\n  return (type: string, data: IframeMessage): void => {\n    if (!callbacks.current) {\n      return undefined\n    }\n\n    // we receive the callbacks as a reference, so that we can use the\n    //  newest version whenever the callback is called without the need\n    //  to register the callback to the outside\n    const {\n      isReady: readyCheck,\n      element,\n      widgetMgr,\n      setComponentError,\n      componentReadyCallback,\n      frameHeightCallback,\n      fragmentId,\n    } = callbacks.current\n    const isReady = readyCheck()\n\n    switch (type) {\n      case ComponentMessageType.COMPONENT_READY: {\n        // Our component is ready to begin receiving messages. Send off its\n        // first render message! It is *not* an error to get multiple\n        // COMPONENT_READY messages. This can happen if a component is being\n        // served from the webpack dev server, and gets reloaded. We\n        // always respond to this message with the most recent render\n        // arguments.\n        const { apiVersion } = data as ReadyMessage\n        if (apiVersion !== CUSTOM_COMPONENT_API_VERSION) {\n          // In the future, we may end up with multiple API versions we\n          // need to support. For now, we just have the one.\n          setComponentError(\n            new Error(`Unrecognized component API version: '${apiVersion}'`)\n          )\n        } else {\n          componentReadyCallback()\n        }\n        break\n      }\n\n      case ComponentMessageType.SET_COMPONENT_VALUE:\n        if (!isReady) {\n          logWarning(\n            `Got ${type} before ${ComponentMessageType.COMPONENT_READY}!`\n          )\n        } else {\n          handleSetComponentValue(\n            tryGetValue(data, \"value\"),\n            (data as ComponentValueMessage).dataType,\n            { fromUi: true },\n            element,\n            widgetMgr,\n            fragmentId\n          )\n        }\n        break\n\n      case ComponentMessageType.SET_FRAME_HEIGHT:\n        if (!isReady) {\n          logWarning(\n            `Got ${type} before ${ComponentMessageType.COMPONENT_READY}!`\n          )\n        } else {\n          frameHeightCallback(\n            tryGetValue(data as FrameHeightMessage, \"height\")\n          )\n        }\n        break\n\n      default:\n        logWarning(`Unrecognized ComponentBackMsgType: ${type}`)\n    }\n  }\n}\n\n/**\n * Parse incoming arguments and bring them into a new form.\n *\n * The `jsonArgs` are parsed to a JSON object.\n * The `specialArgs` are transformed:\n * - `specialArgs[{ key, value: 'arrowdataframe', arrowDataFrame }]` to `dataFrameArgs[{ key, value: arrowDataFrame }]`\n * - `specialArgs[{ key, value: 'bytes', bytes }]` to `newArgs{key: bytes}`\n *\n * This means that byte-values from `specialArgs` override entries in `jsonArgs` when having the same key\n *\n * @param jsonArgs JSON-string\n * @param specialArgs array of objects that hold special-typed values\n * @throws Error when `specialArgs` contains unrecognized type\n * @returns\n */\nexport function parseArgs(\n  jsonArgs: string,\n  specialArgs: ISpecialArg[]\n): [newArgs: Args, dataframeArgs: DataframeArg[]] {\n  // Parse arguments. Our JSON arguments are just stored in a JSON string.\n  const newArgs: Args = JSON.parse(jsonArgs)\n\n  // Some notes re: data marshalling:\n  //\n  // Non-JSON arguments are sent from Python in the \"specialArgs\"\n  // protobuf list. We get DataFrames and Bytes from this list (and\n  // any further non-JSON datatypes we add support for down the road will\n  // also go into it).\n  //\n  // We don't forward raw protobuf objects onto the iframe, however.\n  // Instead, JSON args and Bytes args are shipped to the iframe together\n  // in a plain old JS Object called `args`.\n  //\n  // But! Because dataframes are delivered as instances of our custom\n  // \"ArrowTable\" class, they can't be sent to the iframe in this same\n  // `args` object. Instead, raw DataFrame data is delivered to the iframe\n  // in a separate Array. The iframe then constructs the required\n  // ArrowTable instances and inserts them into the `args` array itself.\n  const dataframeArgs: DataframeArg[] = []\n  for (const specialArg of specialArgs as SpecialArgProto[]) {\n    const { key } = specialArg\n    switch (specialArg.value?.toLowerCase()) {\n      case \"arrowdataframe\":\n        dataframeArgs.push({\n          key,\n          value: ArrowDataframe.toObject(\n            specialArg.arrowDataframe as ArrowDataframe\n          ),\n        })\n        break\n\n      case \"bytes\":\n        newArgs[key] = specialArg.bytes\n        break\n\n      default:\n        throw new Error(`Unrecognized SpecialArg type: ${specialArg.value}`)\n    }\n  }\n\n  return [newArgs, dataframeArgs]\n}\n\n/**\n * Send a RENDER message to the component with the most recent arguments\n * received from Python.\n */\nexport function sendRenderMessage(\n  currentArgs: Args,\n  currentDataframeArgs: DataframeArg[],\n  disabled: boolean,\n  theme: EmotionTheme,\n  iframe?: HTMLIFrameElement\n): void {\n  if (!iframe) {\n    // This should never happen!\n    logWarning(\"Can't send ForwardMsg; missing our iframe!\")\n    return\n  }\n\n  if (isNullOrUndefined(iframe.contentWindow)) {\n    // Nor should this!\n    logWarning(\"Can't send ForwardMsg; iframe has no contentWindow!\")\n    return\n  }\n\n  // NB: if you change or remove any of the arguments here, you'll break\n  // existing components. You can *add* more arguments safely, but any\n  // other modifications require a CUSTOM_COMPONENT_API_VERSION bump.\n  iframe.contentWindow.postMessage(\n    {\n      type: StreamlitMessageType.RENDER,\n      args: currentArgs,\n      dfs: currentDataframeArgs,\n      disabled: disabled,\n      theme: toExportedTheme(theme),\n    },\n    \"*\"\n  )\n}\n\n/**\n * Set the component's value in the widgetManager to be passed to the backend\n * @param value posted by the custom component. Can be anything\n * @param dataType of the passed value. Determines the proto field type. See {@link ValueType}\n * @param source specifies from where the value is coming\n * @param element the element to which the value belongs\n * @param widgetMgr the widget manager to report the value to\n * @returns undefined\n */\nfunction handleSetComponentValue(\n  value: any, // we do not know what data the custom component is sending us, so we use 'any' here\n  dataType: ValueType,\n  source: Source,\n  element: ComponentInstanceProto,\n  widgetMgr: WidgetStateManager,\n  fragmentId?: string\n): void {\n  if (value === undefined) {\n    logWarning(`handleSetComponentValue: missing 'value' prop`)\n    return\n  }\n\n  switch (dataType) {\n    case \"dataframe\":\n      widgetMgr.setArrowValue(element, value, source, fragmentId)\n      break\n    case \"bytes\":\n      widgetMgr.setBytesValue(element, value, source, fragmentId)\n      break\n    default:\n      widgetMgr.setJsonValue(element, value, source, fragmentId)\n  }\n}\n\n/** Return the property with the given name, if it exists. */\nfunction tryGetValue(\n  obj: any,\n  name: string,\n  defaultValue: any = undefined\n): any {\n  return obj.hasOwnProperty(name) ? obj[name] : defaultValue\n}\n"],"mappings":"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"}