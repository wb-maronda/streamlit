{"version":3,"file":"TextInput.js","names":["React","uniqueId","Input","UIInput","withTheme","TextInput","TextInputProto","FormClearHelper","InputInstructions","StyledWidgetLabelHelp","WidgetLabel","TooltipIcon","Placement","isInForm","labelVisibilityProtoValueToEnum","StyledTextInput","jsx","_jsx","jsxs","_jsxs","PureComponent","constructor","props","_this","this","formClearHelper","id","state","dirty","value","initialValue","commitWidgetValue","source","updateState","arguments","length","undefined","widgetMgr","element","fragmentId","setStringValue","setState","onFormCleared","_","prevProps","default","fromUi","onBlur","onChange","e","target","maxChars","onKeyPress","formId","allowFormEnterToSubmit","key","submitForm","storedValue","getStringValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","disconnect","getTypeString","type","Type","PASSWORD","render","width","disabled","theme","placeholder","allowEnterToSubmit","manageFormClearListener","className","children","label","labelVisibility","htmlFor","help","content","placement","TOP_RIGHT","autoComplete","autocomplete","overrides","style","minWidth","opacity","lineHeight","lineHeights","inputWidget","paddingRight","spacing","sm","paddingLeft","paddingBottom","paddingTop","Root","height","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","breakpoints","hideWidgetDetails","maxLength","inForm"],"sources":["../../../../src/components/widgets/TextInput/TextInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport uniqueId from \"lodash/uniqueId\"\nimport { Input as UIInput } from \"baseui/input\"\nimport { withTheme } from \"@emotion/react\"\n\nimport { TextInput as TextInputProto } from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { StyledTextInput } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  dirty: boolean\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: string | null\n}\n\nclass TextInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  private readonly id: string\n\n  public state: State = {\n    dirty: false,\n    value: this.initialValue,\n  }\n\n  constructor(props: Props) {\n    super(props)\n    this.id = uniqueId(\"text_input_\")\n  }\n\n  private get initialValue(): string | null {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringValue(this.props.element)\n    return storedValue ?? this.props.element.default ?? null\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value: value ?? null }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /**\n   * Commits the current state value to the WidgetStateManager.\n   *\n   * @param source - Whether or not from the UI\n   * @param updateState - Optional flag to determine if the state should be updated\n   *                      to reflect that the value is no longer 'dirty' or modified.\n   *                      By default, this is true, meaning the state WILL be updated.\n   */\n  private commitWidgetValue = (source: Source, updateState = true): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setStringValue(element, this.state.value, source, fragmentId)\n    if (updateState) {\n      this.setState({ dirty: false })\n    }\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default ?? null }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onBlur = (): void => {\n    if (this.state.dirty) {\n      this.commitWidgetValue({ fromUi: true })\n    }\n  }\n\n  private onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n    const { element } = this.props\n    const { maxChars } = element\n\n    if (maxChars !== 0 && value.length > maxChars) {\n      return\n    }\n\n    // we immediately update its widgetValue on text changes in forms\n    // see here for why: https://github.com/streamlit/streamlit/issues/7101\n    // The widgetValue won't be passed to the Python script until the form\n    // is submitted, so this won't cause the script to re-run.\n    if (isInForm(this.props.element)) {\n      // make sure dirty is true so that enter to submit form text shows\n      this.setState({ dirty: true, value }, () => {\n        this.commitWidgetValue({ fromUi: true }, false)\n      })\n    }\n    // If the TextInput is *not* part of a form, we mark it dirty but don't\n    // update its value in the WidgetMgr. This means that individual keypresses\n    // won't trigger a script re-run.\n    else {\n      // make sure dirty is true so that enter to apply text shows\n      this.setState({ dirty: true, value })\n    }\n  }\n\n  private onKeyPress = (\n    e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { element, widgetMgr, fragmentId } = this.props\n    const { formId } = element\n    const allowFormEnterToSubmit = widgetMgr.allowFormEnterToSubmit(formId)\n\n    if (e.key === \"Enter\") {\n      if (this.state.dirty) {\n        this.commitWidgetValue({ fromUi: true })\n      }\n      if (allowFormEnterToSubmit) {\n        widgetMgr.submitForm(formId, fragmentId)\n      }\n    }\n  }\n\n  private getTypeString(): string | undefined {\n    return this.props.element.type === TextInputProto.Type.PASSWORD\n      ? \"password\"\n      : \"text\"\n  }\n\n  public render(): React.ReactNode {\n    const { dirty, value } = this.state\n    const { element, width, disabled, widgetMgr, theme } = this.props\n    const { placeholder, formId } = element\n    // Show \"Please enter\" instructions if in a form & allowed, or not in form\n    const allowEnterToSubmit =\n      widgetMgr.allowFormEnterToSubmit(formId) || !isInForm({ formId })\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      formId,\n      this.onFormCleared\n    )\n\n    return (\n      <StyledTextInput\n        className=\"stTextInput\"\n        data-testid=\"stTextInput\"\n        width={width}\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n          htmlFor={this.id}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UIInput\n          value={value ?? \"\"}\n          placeholder={placeholder}\n          onBlur={this.onBlur}\n          onChange={this.onChange}\n          onKeyPress={this.onKeyPress}\n          aria-label={element.label}\n          disabled={disabled}\n          id={this.id}\n          type={this.getTypeString()}\n          autoComplete={element.autocomplete}\n          overrides={{\n            Input: {\n              style: {\n                // Issue: https://github.com/streamlit/streamlit/issues/2495\n                // The input won't shrink in Firefox,\n                // unless the line below is provided.\n                // See https://stackoverflow.com/a/33811151\n                minWidth: 0,\n                \"::placeholder\": {\n                  opacity: \"0.7\",\n                },\n                lineHeight: theme.lineHeights.inputWidget,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            Root: {\n              props: {\n                \"data-testid\": \"stTextInputRootElement\",\n              },\n              style: {\n                height: theme.sizes.minElementHeight,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderLeftWidth: theme.sizes.borderWidth,\n                borderRightWidth: theme.sizes.borderWidth,\n                borderTopWidth: theme.sizes.borderWidth,\n                borderBottomWidth: theme.sizes.borderWidth,\n              },\n            },\n          }}\n        />\n        {/* Hide the \"Please enter to apply\" text in small widget sizes */}\n        {width > theme.breakpoints.hideWidgetDetails && (\n          <InputInstructions\n            dirty={dirty}\n            value={value ?? \"\"}\n            maxLength={element.maxChars}\n            inForm={isInForm({ formId })}\n            allowEnterToSubmit={allowEnterToSubmit}\n          />\n        )}\n      </StyledTextInput>\n    )\n  }\n}\n\nexport default withTheme(TextInput)\n"],"mappings":"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"}