{"version":3,"file":"Checkbox.js","names":["React","withTheme","labelVisibilityProtoValueToEnum","Checkbox","UICheckbox","STYLE_TYPE","LABEL_PLACEMENT","CheckboxProto","transparentize","FormClearHelper","hasLightBackgroundColor","TooltipIcon","Placement","StyledWidgetLabelHelpInline","StreamlitMarkdown","StyledContent","StyledCheckbox","jsx","_jsx","jsxs","_jsxs","PureComponent","constructor","arguments","formClearHelper","state","value","initialValue","commitWidgetValue","source","widgetMgr","element","fragmentId","props","setBoolValue","onFormCleared","setState","_","prevProps","default","fromUi","onChange","e","target","checked","storedValue","getBoolValue","undefined","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","disconnect","render","_element$labelVisibil","theme","width","disabled","colors","spacing","sizes","lightTheme","color","fadedText40","bodyText","manageFormClearListener","formId","className","children","label","checkmarkType","type","StyleType","TOGGLE","toggle","labelPlacement","right","overrides","Root","style","_ref","$isFocusVisible","marginBottom","marginTop","paddingRight","twoThirdsSmFont","backgroundColor","darkenedBgMix25","display","alignItems","Toggle","_ref2","$checked","bgColor","gray70","gray90","height","transform","boxShadow","ToggleTrack","_ref3","$isHovered","fadedText20","primary","marginRight","marginLeft","paddingLeft","minWidth","minHeight","borderBottomLeftRadius","radii","lg","borderTopLeftRadius","borderBottomRightRadius","borderTopRightRadius","Checkmark","_ref4","borderColor","outline","concat","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","Label","position","visibility","labelVisibility","allowHTML","isLabel","largerLabel","help","content","placement","TOP_RIGHT"],"sources":["../../../../src/components/widgets/Checkbox/Checkbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\nimport {\n  Checkbox as UICheckbox,\n  STYLE_TYPE,\n  LABEL_PLACEMENT,\n} from \"baseui/checkbox\"\nimport { Checkbox as CheckboxProto } from \"@streamlit/lib/src/proto\"\nimport { transparentize } from \"color2k\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport { StyledWidgetLabelHelpInline } from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\n\nimport { StyledContent, StyledCheckbox } from \"./styled-components\"\n\nexport interface OwnProps {\n  disabled: boolean\n  element: CheckboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ninterface ThemeProps {\n  theme: EmotionTheme\n}\n\nexport type Props = OwnProps & ThemeProps\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: boolean\n}\n\nclass Checkbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): boolean {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getBoolValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setBoolValue(element, this.state.value, source, fragmentId)\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const value = e.target.checked\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const { theme, width, element, disabled, widgetMgr } = this.props\n    const { colors, spacing, sizes } = theme\n    const lightTheme = hasLightBackgroundColor(theme)\n\n    const color = disabled ? colors.fadedText40 : colors.bodyText\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <StyledCheckbox\n        className=\"row-widget stCheckbox\"\n        data-testid=\"stCheckbox\"\n        width={width}\n      >\n        <UICheckbox\n          checked={this.state.value}\n          disabled={disabled}\n          onChange={this.onChange}\n          aria-label={element.label}\n          checkmarkType={\n            element.type === CheckboxProto.StyleType.TOGGLE\n              ? STYLE_TYPE.toggle\n              : STYLE_TYPE.default\n          }\n          labelPlacement={LABEL_PLACEMENT.right}\n          overrides={{\n            Root: {\n              style: ({ $isFocusVisible }: { $isFocusVisible: boolean }) => ({\n                marginBottom: 0,\n                marginTop: 0,\n                paddingRight: spacing.twoThirdsSmFont,\n                backgroundColor: $isFocusVisible ? colors.darkenedBgMix25 : \"\",\n                display: \"flex\",\n                alignItems: \"start\",\n              }),\n            },\n            Toggle: {\n              style: ({ $checked }: { $checked: boolean }) => {\n                let backgroundColor = lightTheme\n                  ? colors.bgColor\n                  : colors.bodyText\n\n                if (disabled) {\n                  backgroundColor = lightTheme ? colors.gray70 : colors.gray90\n                }\n                return {\n                  width: \"12px\",\n                  height: \"12px\",\n                  transform: $checked ? \"translateX(16px)\" : \"\",\n                  backgroundColor,\n                  boxShadow: \"\",\n                }\n              },\n            },\n            ToggleTrack: {\n              style: ({\n                $checked,\n                $isHovered,\n              }: {\n                $checked: boolean\n                $isHovered: boolean\n              }) => {\n                let backgroundColor = colors.fadedText40\n\n                if ($isHovered && !disabled) {\n                  backgroundColor = colors.fadedText20\n                }\n\n                if ($checked && !disabled) {\n                  backgroundColor = colors.primary\n                }\n\n                return {\n                  marginRight: 0,\n                  marginLeft: 0,\n                  marginBottom: 0,\n                  marginTop: \"0.25rem\",\n                  paddingLeft: \"2px\",\n                  paddingRight: \"2px\",\n                  width: \"32px\",\n                  minWidth: \"32px\",\n                  height: \"16px\",\n                  minHeight: \"16px\",\n                  borderBottomLeftRadius: theme.radii.lg,\n                  borderTopLeftRadius: theme.radii.lg,\n                  borderBottomRightRadius: theme.radii.lg,\n                  borderTopRightRadius: theme.radii.lg,\n                  backgroundColor,\n                }\n              },\n            },\n            Checkmark: {\n              style: ({\n                $isFocusVisible,\n                $checked,\n              }: {\n                $isFocusVisible: boolean\n                $checked: boolean\n              }) => {\n                const borderColor =\n                  $checked && !disabled ? colors.primary : colors.fadedText40\n\n                return {\n                  outline: 0,\n                  width: \"1rem\",\n                  height: \"1rem\",\n                  marginTop: \"0.25rem\",\n                  marginLeft: 0,\n                  marginBottom: 0,\n                  boxShadow:\n                    $isFocusVisible && $checked\n                      ? `0 0 0 0.2rem ${transparentize(colors.primary, 0.5)}`\n                      : \"\",\n                  // This is painfully verbose, but baseweb seems to internally\n                  // use the long-hand version, which means we can't use the\n                  // shorthand names here as if we do we'll end up with warn\n                  // logs spamming us every time a checkbox is rendered.\n                  borderLeftWidth: sizes.borderWidth,\n                  borderRightWidth: sizes.borderWidth,\n                  borderTopWidth: sizes.borderWidth,\n                  borderBottomWidth: sizes.borderWidth,\n                  borderLeftColor: borderColor,\n                  borderRightColor: borderColor,\n                  borderTopColor: borderColor,\n                  borderBottomColor: borderColor,\n                }\n              },\n            },\n            Label: {\n              style: {\n                position: \"relative\",\n                color,\n              },\n            },\n          }}\n        >\n          <StyledContent\n            visibility={labelVisibilityProtoValueToEnum(\n              element.labelVisibility?.value\n            )}\n            data-testid=\"stWidgetLabel\"\n          >\n            <StreamlitMarkdown\n              source={element.label}\n              allowHTML={false}\n              isLabel\n              largerLabel\n            />\n            {element.help && (\n              <StyledWidgetLabelHelpInline color={color}>\n                <TooltipIcon\n                  content={element.help}\n                  placement={Placement.TOP_RIGHT}\n                />\n              </StyledWidgetLabelHelpInline>\n            )}\n          </StyledContent>\n        </UICheckbox>\n      </StyledCheckbox>\n    )\n  }\n}\n\nexport default withTheme(Checkbox)\n"],"mappings":"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"}