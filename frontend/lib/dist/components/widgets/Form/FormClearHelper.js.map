{"version":3,"file":"FormClearHelper.js","names":["isValidFormId","FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","disconnect","addFormClearedListener","_this$formClearListen","undefined"],"sources":["../../../../src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa;AAItB,OAAO,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAAA,KACnBC,iBAAiB;IAAA,KAEjBC,aAAa;IAAA,KAEbC,UAAU;EAAA;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACSC,uBAAuBA,CAC5BC,SAA6B,EAC7BC,MAAc,EACdC,QAAoB,EACd;IACN;IACA,IACE,IAAI,CAACN,iBAAiB,IAAI,IAAI,IAC9B,IAAI,CAACC,aAAa,KAAKG,SAAS,IAChC,IAAI,CAACF,UAAU,KAAKG,MAAM,EAC1B;MACA;IACF;;IAEA;IACA,IAAI,CAACE,UAAU,CAAC,CAAC;;IAEjB;IACA,IAAI,CAACV,aAAa,CAACQ,MAAM,CAAC,EAAE;MAC1B;IACF;;IAEA;IACA,IAAI,CAACL,iBAAiB,GAAGI,SAAS,CAACI,sBAAsB,CAACH,MAAM,EAAEC,QAAQ,CAAC;IAC3E,IAAI,CAACL,aAAa,GAAGG,SAAS;IAC9B,IAAI,CAACF,UAAU,GAAGG,MAAM;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACSE,UAAUA,CAAA,EAAS;IAAA,IAAAE,qBAAA;IACxB,CAAAA,qBAAA,OAAI,CAACT,iBAAiB,cAAAS,qBAAA,uBAAtBA,qBAAA,CAAwBF,UAAU,CAAC,CAAC;IACpC,IAAI,CAACP,iBAAiB,GAAGU,SAAS;IAClC,IAAI,CAACT,aAAa,GAAGS,SAAS;IAC9B,IAAI,CAACR,UAAU,GAAGQ,SAAS;EAC7B;AACF"}