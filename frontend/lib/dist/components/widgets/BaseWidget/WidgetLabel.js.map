{"version":3,"file":"WidgetLabel.js","names":["React","StreamlitMarkdown","StyledWidgetLabel","Fragment","_Fragment","jsx","_jsx","jsxs","_jsxs","WidgetLabel","_ref","label","children","disabled","labelVisibility","htmlFor","source","allowHTML","isLabel"],"sources":["../../../../src/components/widgets/BaseWidget/WidgetLabel.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { LabelVisibilityOptions } from \"@streamlit/lib/src/util/utils\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\n\nimport { StyledWidgetLabel } from \"./styled-components\"\n\nexport interface LabelProps {\n  // Label body text. If nullsy, WidgetLabel won't show. But if empty string it will.\n  label?: string | null\n\n  // Used to specify other elements that should go inside the label container, like a help icon.\n  children?: React.ReactNode\n\n  // Used to specify whether widget disabled or enabled.\n  disabled?: boolean | null\n\n  // Used to specify whether widget is visible or not.\n  labelVisibility?: LabelVisibilityOptions\n\n  // Associates the label with the input field programatically. Makes it possible to focus input by clicking on label.\n  htmlFor?: string\n}\n\nexport function WidgetLabel({\n  label,\n  children,\n  disabled,\n  labelVisibility,\n  htmlFor,\n}: LabelProps): React.ReactElement {\n  if (label == null) {\n    return <></>\n  }\n\n  return (\n    // we use aria-hidden to disable ARIA for StyleWidgetLabel, because each\n    // widget should have its own aria-label and/or implement accessibility.\n    <StyledWidgetLabel\n      data-testid=\"stWidgetLabel\"\n      aria-hidden=\"true\"\n      disabled={disabled}\n      labelVisibility={labelVisibility}\n      htmlFor={htmlFor}\n    >\n      <StreamlitMarkdown source={label} allowHTML={false} isLabel />\n      {children}\n    </StyledWidgetLabel>\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,iBAAiB;AAExB,SAASC,iBAAiB;AAA6B,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAmBvD,OAAO,SAASC,WAAWA,CAAAC,IAAA,EAMQ;EAAA,IANP;IAC1BC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,eAAe;IACfC;EACU,CAAC,GAAAL,IAAA;EACX,IAAIC,KAAK,IAAI,IAAI,EAAE;IACjB,oBAAOL,IAAA,CAAAF,SAAA,IAAI,CAAC;EACd;EAEA;IAAA;IACE;IACA;IACAI,KAAA,CAACN,iBAAiB;MAChB,eAAY,eAAe;MAC3B,eAAY,MAAM;MAClBW,QAAQ,EAAEA,QAAS;MACnBC,eAAe,EAAEA,eAAgB;MACjCC,OAAO,EAAEA,OAAQ;MAAAH,QAAA,gBAEjBN,IAAA,CAACL,iBAAiB;QAACe,MAAM,EAAEL,KAAM;QAACM,SAAS,EAAE,KAAM;QAACC,OAAO;MAAA,CAAE,CAAC,EAC7DN,QAAQ;IAAA,CACQ;EAAC;AAExB"}