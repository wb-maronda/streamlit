{"version":3,"file":"VirtualDropdown.test.js","names":["React","screen","render","VirtualDropdown","jsx","_jsx","Option","props","className","item","value","describe","it","expect","getByTestId","toBeInTheDocument","children","getAllByTestId","toHaveLength"],"sources":["../../../../src/components/shared/Dropdown/VirtualDropdown.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport \"@testing-library/jest-dom\"\nimport { screen } from \"@testing-library/react\"\nimport { render } from \"@streamlit/lib/src/test_util\"\n\nimport VirtualDropdown from \"./VirtualDropdown\"\n\ninterface OptionProps {\n  item?: { value: string }\n}\n\nfunction Option(props: OptionProps): ReactElement {\n  return <span className={props.item ? props.item.value : \"nothing\"} />\n}\n\ndescribe(\"VirtualDropdown element\", () => {\n  it(\"renders a StyledEmptyState when it has no children\", () => {\n    render(<VirtualDropdown />)\n\n    expect(screen.getByTestId(\"stVirtualDropdownEmpty\")).toBeInTheDocument()\n  })\n\n  it(\"renders a StyledEmptyState when it has children with no item\", () => {\n    render(\n      <VirtualDropdown>\n        <Option />\n      </VirtualDropdown>\n    )\n\n    expect(screen.getByTestId(\"stVirtualDropdownEmpty\")).toBeInTheDocument()\n  })\n\n  it(\"renders a FixedSizeList when it has children\", () => {\n    render(\n      <VirtualDropdown>\n        <Option item={{ value: \"abc\" }} />\n      </VirtualDropdown>\n    )\n\n    expect(screen.getByTestId(\"stVirtualDropdown\")).toBeInTheDocument()\n\n    // each option will have a tooltip attached to it\n    expect(screen.getAllByTestId(\"stTooltipHoverTarget\")).toHaveLength(1)\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAwB,OAAO;AAC3C,OAAO,2BAA2B;AAClC,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,MAAM;AAEf,OAAOC,eAAe;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAM/C,SAASC,MAAMA,CAACC,KAAkB,EAAgB;EAChD,oBAAOF,IAAA;IAAMG,SAAS,EAAED,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACC,KAAK,GAAG;EAAU,CAAE,CAAC;AACvE;AAEAC,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EACxCC,EAAE,CAAC,oDAAoD,EAAE,MAAM;IAC7DV,MAAM,eAACG,IAAA,CAACF,eAAe,IAAE,CAAC,CAAC;IAE3BU,MAAM,CAACZ,MAAM,CAACa,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1E,CAAC,CAAC;EAEFH,EAAE,CAAC,8DAA8D,EAAE,MAAM;IACvEV,MAAM,eACJG,IAAA,CAACF,eAAe;MAAAa,QAAA,eACdX,IAAA,CAACC,MAAM,IAAE;IAAC,CACK,CACnB,CAAC;IAEDO,MAAM,CAACZ,MAAM,CAACa,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1E,CAAC,CAAC;EAEFH,EAAE,CAAC,8CAA8C,EAAE,MAAM;IACvDV,MAAM,eACJG,IAAA,CAACF,eAAe;MAAAa,QAAA,eACdX,IAAA,CAACC,MAAM;QAACG,IAAI,EAAE;UAAEC,KAAK,EAAE;QAAM;MAAE,CAAE;IAAC,CACnB,CACnB,CAAC;IAEDG,MAAM,CAACZ,MAAM,CAACa,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;;IAEnE;IACAF,MAAM,CAACZ,MAAM,CAACgB,cAAc,CAAC,sBAAsB,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC;AACJ,CAAC,CAAC"}