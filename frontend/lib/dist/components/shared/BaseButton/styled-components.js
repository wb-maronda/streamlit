import _styled from "@emotion/styled/base";
/**
 * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { darken, transparentize } from "color2k";
export let BaseButtonKind;
(function (BaseButtonKind) {
  BaseButtonKind["PRIMARY"] = "primary";
  BaseButtonKind["SECONDARY"] = "secondary";
  BaseButtonKind["TERTIARY"] = "tertiary";
  BaseButtonKind["LINK"] = "link";
  BaseButtonKind["SEGMENT"] = "icon";
  BaseButtonKind["SEGMENT_ACTIVE"] = "iconActive";
  BaseButtonKind["BORDERLESS_ICON"] = "borderlessIcon";
  BaseButtonKind["BORDERLESS_ICON_ACTIVE"] = "borderlessIconActive";
  BaseButtonKind["MINIMAL"] = "minimal";
  BaseButtonKind["PRIMARY_FORM_SUBMIT"] = "primaryFormSubmit";
  BaseButtonKind["SECONDARY_FORM_SUBMIT"] = "secondaryFormSubmit";
  BaseButtonKind["HEADER_BUTTON"] = "header";
  BaseButtonKind["HEADER_NO_PADDING"] = "headerNoPadding";
  BaseButtonKind["ELEMENT_TOOLBAR"] = "elementToolbar";
  BaseButtonKind["PILLS"] = "pills";
  BaseButtonKind["PILLS_ACTIVE"] = "pillsActive";
})(BaseButtonKind || (BaseButtonKind = {}));
export let BaseButtonSize;
(function (BaseButtonSize) {
  BaseButtonSize["XSMALL"] = "xsmall";
  BaseButtonSize["SMALL"] = "small";
  BaseButtonSize["MEDIUM"] = "medium";
  BaseButtonSize["LARGE"] = "large";
})(BaseButtonSize || (BaseButtonSize = {}));
function getSizeStyle(size, theme) {
  switch (size) {
    case BaseButtonSize.XSMALL:
      return {
        padding: `${theme.spacing.twoXS} ${theme.spacing.sm}`,
        fontSize: theme.fontSizes.sm
      };
    case BaseButtonSize.SMALL:
      return {
        padding: `${theme.spacing.twoXS} ${theme.spacing.md}`
      };
    case BaseButtonSize.LARGE:
      return {
        padding: `${theme.spacing.md} ${theme.spacing.md}`
      };
    default:
      return {
        padding: `${theme.spacing.xs} ${theme.spacing.md}`
      };
  }
}
export const StyledBaseButton = /*#__PURE__*/_styled("button", process.env.NODE_ENV === "production" ? {
  target: "ef3psqc18"
} : {
  target: "ef3psqc18",
  label: "StyledBaseButton"
})(_ref => {
  let {
    fluidWidth,
    size,
    theme
  } = _ref;
  const buttonWidth = typeof fluidWidth == "number" ? `${fluidWidth}px` : "100%";
  return {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    fontWeight: theme.fontWeights.normal,
    padding: `${theme.spacing.xs} ${theme.spacing.md}`,
    borderRadius: theme.radii.default,
    minHeight: theme.sizes.minElementHeight,
    margin: theme.spacing.none,
    lineHeight: theme.lineHeights.base,
    color: "inherit",
    width: fluidWidth ? buttonWidth : "auto",
    userSelect: "none",
    "&:focus": {
      outline: "none"
    },
    "&:focus-visible": {
      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`
    },
    ...getSizeStyle(size, theme)
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledPrimaryButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc17"
} : {
  target: "ef3psqc17",
  label: "StyledPrimaryButton"
})(_ref2 => {
  let {
    theme
  } = _ref2;
  return {
    backgroundColor: theme.colors.primary,
    color: theme.colors.white,
    border: `${theme.sizes.borderWidth} solid ${theme.colors.primary}`,
    "&:hover": {
      backgroundColor: darken(theme.colors.primary, 0.05)
    },
    "&:active": {
      backgroundColor: "transparent",
      color: theme.colors.primary
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      borderColor: theme.colors.borderColor,
      backgroundColor: theme.colors.transparent,
      color: theme.colors.fadedText40,
      cursor: "not-allowed"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledSecondaryButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc16"
} : {
  target: "ef3psqc16",
  label: "StyledSecondaryButton"
})(_ref3 => {
  let {
    theme
  } = _ref3;
  return {
    backgroundColor: theme.colors.lightenedBg05,
    border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,
    "&:hover": {
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    },
    "&:active": {
      color: theme.colors.white,
      borderColor: theme.colors.primary,
      backgroundColor: theme.colors.primary
    },
    "&:focus:not(:active)": {
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      borderColor: theme.colors.borderColor,
      backgroundColor: theme.colors.transparent,
      color: theme.colors.fadedText40,
      cursor: "not-allowed"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledTertiaryButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc15"
} : {
  target: "ef3psqc15",
  label: "StyledTertiaryButton"
})(_ref4 => {
  let {
    theme
  } = _ref4;
  return {
    backgroundColor: theme.colors.transparent,
    border: `${theme.sizes.borderWidth} solid ${theme.colors.transparent}`,
    "&:hover": {
      borderColor: theme.colors.transparent,
      color: theme.colors.primary
    },
    "&:active": {
      color: theme.colors.primary,
      borderColor: theme.colors.transparent,
      backgroundColor: theme.colors.transparent
    },
    "&:focus:not(:active)": {
      borderColor: theme.colors.transparent,
      color: theme.colors.primary
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      backgroundColor: theme.colors.lightGray,
      borderColor: theme.colors.transparent,
      color: theme.colors.gray
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledLinkButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc14"
} : {
  target: "ef3psqc14",
  label: "StyledLinkButton"
})(_ref5 => {
  let {
    theme
  } = _ref5;
  return {
    backgroundColor: theme.colors.transparent,
    padding: theme.spacing.none,
    border: "none",
    color: theme.colors.primary,
    "&:hover": {
      textDecoration: "underline"
    },
    "&:active": {
      backgroundColor: theme.colors.transparent,
      color: theme.colors.primary,
      textDecoration: "underline"
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      backgroundColor: theme.colors.lightGray,
      borderColor: theme.colors.transparent,
      color: theme.colors.gray
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledMinimalButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc13"
} : {
  target: "ef3psqc13",
  label: "StyledMinimalButton"
})(_ref6 => {
  let {
    theme
  } = _ref6;
  return {
    backgroundColor: theme.colors.transparent,
    border: "none",
    boxShadow: "none",
    padding: theme.spacing.none,
    "&:hover, &:active, &:focus-visible": {
      color: theme.colors.primary
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledPrimaryFormSubmitButton = /*#__PURE__*/_styled(StyledPrimaryButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc12"
} : {
  target: "ef3psqc12",
  label: "StyledPrimaryFormSubmitButton"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledSecondaryFormSubmitButton = /*#__PURE__*/_styled(StyledSecondaryButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc11"
} : {
  target: "ef3psqc11",
  label: "StyledSecondaryFormSubmitButton"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledIconButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc10"
} : {
  target: "ef3psqc10",
  label: "StyledIconButton"
})(_ref7 => {
  let {
    theme
  } = _ref7;
  return {
    backgroundColor: theme.colors.transparent,
    border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,
    flex: "1 1 0",
    padding: 0,
    "&:hover": {
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    },
    "&:active": {
      backgroundColor: theme.colors.primary,
      borderColor: theme.colors.primary,
      color: theme.colors.white
    },
    "&:not(:active)": {
      boxShadow: "none"
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      backgroundColor: theme.colors.lightGray,
      borderColor: theme.colors.transparent,
      color: theme.colors.gray
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledIconButtonActive = /*#__PURE__*/_styled(StyledIconButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc9"
} : {
  target: "ef3psqc9",
  label: "StyledIconButtonActive"
})(_ref8 => {
  let {
    theme
  } = _ref8;
  return {
    backgroundColor: theme.colors.primary,
    borderColor: theme.colors.primary,
    color: theme.colors.white,
    "&:hover": {
      backgroundColor: theme.colors.transparent,
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledPillsButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc8"
} : {
  target: "ef3psqc8",
  label: "StyledPillsButton"
})(_ref9 => {
  let {
    theme
  } = _ref9;
  return {
    background: theme.colors.bgColor,
    color: theme.colors.text,
    border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,
    borderRadius: theme.radii.xxxl,
    padding: `${theme.spacing.twoXS} ${theme.spacing.md}`,
    fontSize: theme.fontSizes.sm,
    lineHeight: theme.lineHeights.base,
    fontWeight: theme.fontWeights.normal,
    height: theme.sizes.largeLogoHeight,
    minHeight: theme.sizes.largeLogoHeight,
    maxWidth: theme.sizes.contentMaxWidth,
    gap: theme.spacing.xs,
    // show pills with long text in single line and use ellipsis for overflow
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    "&:hover": {
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      color: theme.colors.fadedText20,
      borderColor: theme.colors.fadedText20,
      cursor: "not-allowed"
    },
    "& div": {
      textOverflow: "ellipsis",
      overflow: "hidden"
    },
    "& p": {
      fontSize: theme.fontSizes.sm,
      textOverflow: "ellipsis",
      overflow: "hidden"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledPillsButtonActive = /*#__PURE__*/_styled(StyledPillsButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc7"
} : {
  target: "ef3psqc7",
  label: "StyledPillsButtonActive"
})(_ref10 => {
  let {
    theme
  } = _ref10;
  return {
    backgroundColor: transparentize(theme.colors.primary, 0.9),
    borderColor: theme.colors.primary,
    color: theme.colors.primary,
    "&:hover": {
      backgroundColor: transparentize(theme.colors.primary, 0.8),
      borderColor: theme.colors.primary,
      color: theme.colors.primary
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledHeaderButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc6"
} : {
  target: "ef3psqc6",
  label: "StyledHeaderButton"
})(_ref11 => {
  let {
    theme
  } = _ref11;
  return {
    backgroundColor: theme.colors.transparent,
    border: "none",
    padding: theme.spacing.sm,
    fontSize: theme.fontSizes.sm,
    marginLeft: theme.spacing.threeXS,
    marginRight: theme.spacing.threeXS,
    lineHeight: theme.lineHeights.none,
    // Override buttons min width and height, to ensure the hover state for icon buttons on the header is square
    minWidth: theme.spacing.threeXL,
    minHeight: theme.spacing.threeXL,
    "&:focus": {
      outline: "none"
    },
    "&:focus-visible": {
      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.gray90, 0.8)}`
    },
    "&:hover": {
      backgroundColor: theme.colors.darkenedBgMix25
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      backgroundColor: theme.colors.lightGray,
      borderColor: theme.colors.transparent,
      color: theme.colors.gray
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

// Take out padding for this specific button, so we can ensure it's 32x32px like other buttons in Community Cloud
export const StyledHeaderNoPaddingButton = /*#__PURE__*/_styled(StyledHeaderButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc5"
} : {
  target: "ef3psqc5",
  label: "StyledHeaderNoPaddingButton"
})(() => {
  return {
    padding: 0
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9CYXNlQnV0dG9uL3N0eWxlZC1jb21wb25lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThXMkMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0Jhc2VCdXR0b24vc3R5bGVkLWNvbXBvbmVudHMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgU3RyZWFtbGl0IEluYy4gKDIwMTgtMjAyMikgU25vd2ZsYWtlIEluYy4gKDIwMjItMjAyNClcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTW91c2VFdmVudCwgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHN0eWxlZCwgeyBDU1NPYmplY3QgfSBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCJcbmltcG9ydCB7IGRhcmtlbiwgdHJhbnNwYXJlbnRpemUgfSBmcm9tIFwiY29sb3Iya1wiXG5cbmltcG9ydCB7IEVtb3Rpb25UaGVtZSB9IGZyb20gXCJAc3RyZWFtbGl0L2xpYi9zcmMvdGhlbWVcIlxuXG5leHBvcnQgZW51bSBCYXNlQnV0dG9uS2luZCB7XG4gIFBSSU1BUlkgPSBcInByaW1hcnlcIixcbiAgU0VDT05EQVJZID0gXCJzZWNvbmRhcnlcIixcbiAgVEVSVElBUlkgPSBcInRlcnRpYXJ5XCIsXG4gIExJTksgPSBcImxpbmtcIixcbiAgU0VHTUVOVCA9IFwiaWNvblwiLFxuICBTRUdNRU5UX0FDVElWRSA9IFwiaWNvbkFjdGl2ZVwiLFxuICBCT1JERVJMRVNTX0lDT04gPSBcImJvcmRlcmxlc3NJY29uXCIsXG4gIEJPUkRFUkxFU1NfSUNPTl9BQ1RJVkUgPSBcImJvcmRlcmxlc3NJY29uQWN0aXZlXCIsXG4gIE1JTklNQUwgPSBcIm1pbmltYWxcIixcbiAgUFJJTUFSWV9GT1JNX1NVQk1JVCA9IFwicHJpbWFyeUZvcm1TdWJtaXRcIixcbiAgU0VDT05EQVJZX0ZPUk1fU1VCTUlUID0gXCJzZWNvbmRhcnlGb3JtU3VibWl0XCIsXG4gIEhFQURFUl9CVVRUT04gPSBcImhlYWRlclwiLFxuICBIRUFERVJfTk9fUEFERElORyA9IFwiaGVhZGVyTm9QYWRkaW5nXCIsXG4gIEVMRU1FTlRfVE9PTEJBUiA9IFwiZWxlbWVudFRvb2xiYXJcIixcbiAgUElMTFMgPSBcInBpbGxzXCIsXG4gIFBJTExTX0FDVElWRSA9IFwicGlsbHNBY3RpdmVcIixcbn1cblxuZXhwb3J0IGVudW0gQmFzZUJ1dHRvblNpemUge1xuICBYU01BTEwgPSBcInhzbWFsbFwiLFxuICBTTUFMTCA9IFwic21hbGxcIixcbiAgTUVESVVNID0gXCJtZWRpdW1cIixcbiAgTEFSR0UgPSBcImxhcmdlXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUJ1dHRvblByb3BzIHtcbiAga2luZDogQmFzZUJ1dHRvbktpbmRcbiAgc2l6ZT86IEJhc2VCdXR0b25TaXplXG4gIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiBhbnlcbiAgZGlzYWJsZWQ/OiBib29sZWFuXG4gIC8vIElmIHRydWUgb3IgbnVtYmVyLCB0aGUgYnV0dG9uIHNob3VsZCB0YWtlIHVwIGNvbnRhaW5lcidzIGZ1bGwgd2lkdGhcbiAgZmx1aWRXaWR0aD86IGJvb2xlYW4gfCBudW1iZXJcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZVxuICBhdXRvRm9jdXM/OiBib29sZWFuXG59XG5cbnR5cGUgUmVxdWlyZWRCYXNlQnV0dG9uUHJvcHMgPSBSZXF1aXJlZDxCYXNlQnV0dG9uUHJvcHM+XG5cbmZ1bmN0aW9uIGdldFNpemVTdHlsZShzaXplOiBCYXNlQnV0dG9uU2l6ZSwgdGhlbWU6IEVtb3Rpb25UaGVtZSk6IENTU09iamVjdCB7XG4gIHN3aXRjaCAoc2l6ZSkge1xuICAgIGNhc2UgQmFzZUJ1dHRvblNpemUuWFNNQUxMOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFkZGluZzogYCR7dGhlbWUuc3BhY2luZy50d29YU30gJHt0aGVtZS5zcGFjaW5nLnNtfWAsXG4gICAgICAgIGZvbnRTaXplOiB0aGVtZS5mb250U2l6ZXMuc20sXG4gICAgICB9XG4gICAgY2FzZSBCYXNlQnV0dG9uU2l6ZS5TTUFMTDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhZGRpbmc6IGAke3RoZW1lLnNwYWNpbmcudHdvWFN9ICR7dGhlbWUuc3BhY2luZy5tZH1gLFxuICAgICAgfVxuICAgIGNhc2UgQmFzZUJ1dHRvblNpemUuTEFSR0U6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWRkaW5nOiBgJHt0aGVtZS5zcGFjaW5nLm1kfSAke3RoZW1lLnNwYWNpbmcubWR9YCxcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFkZGluZzogYCR7dGhlbWUuc3BhY2luZy54c30gJHt0aGVtZS5zcGFjaW5nLm1kfWAsXG4gICAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFN0eWxlZEJhc2VCdXR0b24gPSBzdHlsZWQuYnV0dG9uPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPihcbiAgKHsgZmx1aWRXaWR0aCwgc2l6ZSwgdGhlbWUgfSkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbldpZHRoID1cbiAgICAgIHR5cGVvZiBmbHVpZFdpZHRoID09IFwibnVtYmVyXCIgPyBgJHtmbHVpZFdpZHRofXB4YCA6IFwiMTAwJVwiXG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheTogXCJpbmxpbmUtZmxleFwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUuZm9udFdlaWdodHMubm9ybWFsLFxuICAgICAgcGFkZGluZzogYCR7dGhlbWUuc3BhY2luZy54c30gJHt0aGVtZS5zcGFjaW5nLm1kfWAsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnJhZGlpLmRlZmF1bHQsXG4gICAgICBtaW5IZWlnaHQ6IHRoZW1lLnNpemVzLm1pbkVsZW1lbnRIZWlnaHQsXG4gICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcubm9uZSxcbiAgICAgIGxpbmVIZWlnaHQ6IHRoZW1lLmxpbmVIZWlnaHRzLmJhc2UsXG4gICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICB3aWR0aDogZmx1aWRXaWR0aCA/IGJ1dHRvbldpZHRoIDogXCJhdXRvXCIsXG4gICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgIFwiJjpmb2N1c1wiOiB7XG4gICAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgICAgfSxcbiAgICAgIFwiJjpmb2N1cy12aXNpYmxlXCI6IHtcbiAgICAgICAgYm94U2hhZG93OiBgMCAwIDAgMC4ycmVtICR7dHJhbnNwYXJlbnRpemUodGhlbWUuY29sb3JzLnByaW1hcnksIDAuNSl9YCxcbiAgICAgIH0sXG4gICAgICAuLi5nZXRTaXplU3R5bGUoc2l6ZSwgdGhlbWUpLFxuICAgIH1cbiAgfVxuKVxuXG5leHBvcnQgY29uc3QgU3R5bGVkUHJpbWFyeUJ1dHRvbiA9IHN0eWxlZChcbiAgU3R5bGVkQmFzZUJ1dHRvblxuKTxSZXF1aXJlZEJhc2VCdXR0b25Qcm9wcz4oKHsgdGhlbWUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgY29sb3I6IHRoZW1lLmNvbG9ycy53aGl0ZSxcbiAgYm9yZGVyOiBgJHt0aGVtZS5zaXplcy5ib3JkZXJXaWR0aH0gc29saWQgJHt0aGVtZS5jb2xvcnMucHJpbWFyeX1gLFxuICBcIiY6aG92ZXJcIjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogZGFya2VuKHRoZW1lLmNvbG9ycy5wcmltYXJ5LCAwLjA1KSxcbiAgfSxcbiAgXCImOmFjdGl2ZVwiOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxuICBcIiY6ZGlzYWJsZWQsICY6ZGlzYWJsZWQ6aG92ZXIsICY6ZGlzYWJsZWQ6YWN0aXZlXCI6IHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLmJvcmRlckNvbG9yLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZmFkZWRUZXh0NDAsXG4gICAgY3Vyc29yOiBcIm5vdC1hbGxvd2VkXCIsXG4gIH0sXG59KSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZFNlY29uZGFyeUJ1dHRvbiA9IHN0eWxlZChcbiAgU3R5bGVkQmFzZUJ1dHRvblxuKTxSZXF1aXJlZEJhc2VCdXR0b25Qcm9wcz4oKHsgdGhlbWUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMubGlnaHRlbmVkQmcwNSxcbiAgYm9yZGVyOiBgJHt0aGVtZS5zaXplcy5ib3JkZXJXaWR0aH0gc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyQ29sb3J9YCxcbiAgXCImOmhvdmVyXCI6IHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxuICBcIiY6YWN0aXZlXCI6IHtcbiAgICBjb2xvcjogdGhlbWUuY29sb3JzLndoaXRlLFxuICAgIGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxuICBcIiY6Zm9jdXM6bm90KDphY3RpdmUpXCI6IHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxuICBcIiY6ZGlzYWJsZWQsICY6ZGlzYWJsZWQ6aG92ZXIsICY6ZGlzYWJsZWQ6YWN0aXZlXCI6IHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLmJvcmRlckNvbG9yLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZmFkZWRUZXh0NDAsXG4gICAgY3Vyc29yOiBcIm5vdC1hbGxvd2VkXCIsXG4gIH0sXG59KSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZFRlcnRpYXJ5QnV0dG9uID0gc3R5bGVkKFxuICBTdHlsZWRCYXNlQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiAoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgYm9yZGVyOiBgJHt0aGVtZS5zaXplcy5ib3JkZXJXaWR0aH0gc29saWQgJHt0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnR9YCxcbiAgXCImOmhvdmVyXCI6IHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgfSxcbiAgXCImOmFjdGl2ZVwiOiB7XG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICAgIGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gIH0sXG4gIFwiJjpmb2N1czpub3QoOmFjdGl2ZSlcIjoge1xuICAgIGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxuICBcIiY6ZGlzYWJsZWQsICY6ZGlzYWJsZWQ6aG92ZXIsICY6ZGlzYWJsZWQ6YWN0aXZlXCI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5saWdodEdyYXksXG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgICBjb2xvcjogdGhlbWUuY29sb3JzLmdyYXksXG4gIH0sXG59KSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZExpbmtCdXR0b24gPSBzdHlsZWQoXG4gIFN0eWxlZEJhc2VCdXR0b25cbik8UmVxdWlyZWRCYXNlQnV0dG9uUHJvcHM+KCh7IHRoZW1lIH0pID0+ICh7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nLm5vbmUsXG4gIGJvcmRlcjogXCJub25lXCIsXG4gIGNvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgXCImOmhvdmVyXCI6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIixcbiAgfSxcbiAgXCImOmFjdGl2ZVwiOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICAgIHRleHREZWNvcmF0aW9uOiBcInVuZGVybGluZVwiLFxuICB9LFxuICBcIiY6ZGlzYWJsZWQsICY6ZGlzYWJsZWQ6aG92ZXIsICY6ZGlzYWJsZWQ6YWN0aXZlXCI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5saWdodEdyYXksXG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgICBjb2xvcjogdGhlbWUuY29sb3JzLmdyYXksXG4gIH0sXG59KSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZE1pbmltYWxCdXR0b24gPSBzdHlsZWQoXG4gIFN0eWxlZEJhc2VCdXR0b25cbik8UmVxdWlyZWRCYXNlQnV0dG9uUHJvcHM+KCh7IHRoZW1lIH0pID0+ICh7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICBib3JkZXI6IFwibm9uZVwiLFxuICBib3hTaGFkb3c6IFwibm9uZVwiLFxuICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nLm5vbmUsXG4gIFwiJjpob3ZlciwgJjphY3RpdmUsICY6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICB9LFxufSkpXG5cbmV4cG9ydCBjb25zdCBTdHlsZWRQcmltYXJ5Rm9ybVN1Ym1pdEJ1dHRvbiA9XG4gIHN0eWxlZChTdHlsZWRQcmltYXJ5QnV0dG9uKTxSZXF1aXJlZEJhc2VCdXR0b25Qcm9wcz4oKVxuXG5leHBvcnQgY29uc3QgU3R5bGVkU2Vjb25kYXJ5Rm9ybVN1Ym1pdEJ1dHRvbiA9IHN0eWxlZChcbiAgU3R5bGVkU2Vjb25kYXJ5QnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigpXG5cbmV4cG9ydCBjb25zdCBTdHlsZWRJY29uQnV0dG9uID0gc3R5bGVkKFxuICBTdHlsZWRCYXNlQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgYm9yZGVyOiBgJHt0aGVtZS5zaXplcy5ib3JkZXJXaWR0aH0gc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyQ29sb3J9YCxcbiAgICBmbGV4OiBcIjEgMSAwXCIsXG4gICAgcGFkZGluZzogMCxcblxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgfSxcbiAgICBcIiY6YWN0aXZlXCI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgICBjb2xvcjogdGhlbWUuY29sb3JzLndoaXRlLFxuICAgIH0sXG4gICAgXCImOm5vdCg6YWN0aXZlKVwiOiB7XG4gICAgICBib3hTaGFkb3c6IFwibm9uZVwiLFxuICAgIH0sXG4gICAgXCImOmRpc2FibGVkLCAmOmRpc2FibGVkOmhvdmVyLCAmOmRpc2FibGVkOmFjdGl2ZVwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5saWdodEdyYXksXG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgICAgY29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5LFxuICAgIH0sXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBTdHlsZWRJY29uQnV0dG9uQWN0aXZlID0gc3R5bGVkKFxuICBTdHlsZWRJY29uQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy53aGl0ZSxcbiAgICBcIiY6aG92ZXJcIjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgfSxcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZFBpbGxzQnV0dG9uID0gc3R5bGVkKFxuICBTdHlsZWRCYXNlQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmJnQ29sb3IsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy50ZXh0LFxuICAgIGJvcmRlcjogYCR7dGhlbWUuc2l6ZXMuYm9yZGVyV2lkdGh9IHNvbGlkICR7dGhlbWUuY29sb3JzLmJvcmRlckNvbG9yfWAsXG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5yYWRpaS54eHhsLFxuICAgIHBhZGRpbmc6IGAke3RoZW1lLnNwYWNpbmcudHdvWFN9ICR7dGhlbWUuc3BhY2luZy5tZH1gLFxuICAgIGZvbnRTaXplOiB0aGVtZS5mb250U2l6ZXMuc20sXG4gICAgbGluZUhlaWdodDogdGhlbWUubGluZUhlaWdodHMuYmFzZSxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS5mb250V2VpZ2h0cy5ub3JtYWwsXG4gICAgaGVpZ2h0OiB0aGVtZS5zaXplcy5sYXJnZUxvZ29IZWlnaHQsXG4gICAgbWluSGVpZ2h0OiB0aGVtZS5zaXplcy5sYXJnZUxvZ29IZWlnaHQsXG4gICAgbWF4V2lkdGg6IHRoZW1lLnNpemVzLmNvbnRlbnRNYXhXaWR0aCxcbiAgICBnYXA6IHRoZW1lLnNwYWNpbmcueHMsXG5cbiAgICAvLyBzaG93IHBpbGxzIHdpdGggbG9uZyB0ZXh0IGluIHNpbmdsZSBsaW5lIGFuZCB1c2UgZWxsaXBzaXMgZm9yIG92ZXJmbG93XG4gICAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIixcblxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgfSxcblxuICAgIFwiJjpkaXNhYmxlZCwgJjpkaXNhYmxlZDpob3ZlciwgJjpkaXNhYmxlZDphY3RpdmVcIjoge1xuICAgICAgY29sb3I6IHRoZW1lLmNvbG9ycy5mYWRlZFRleHQyMCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvcnMuZmFkZWRUZXh0MjAsXG4gICAgICBjdXJzb3I6IFwibm90LWFsbG93ZWRcIixcbiAgICB9LFxuXG4gICAgXCImIGRpdlwiOiB7XG4gICAgICB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIixcbiAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgIH0sXG5cbiAgICBcIiYgcFwiOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVzLnNtLFxuICAgICAgdGV4dE92ZXJmbG93OiBcImVsbGlwc2lzXCIsXG4gICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICB9LFxuICB9XG59KVxuXG5leHBvcnQgY29uc3QgU3R5bGVkUGlsbHNCdXR0b25BY3RpdmUgPSBzdHlsZWQoXG4gIFN0eWxlZFBpbGxzQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0cmFuc3BhcmVudGl6ZSh0aGVtZS5jb2xvcnMucHJpbWFyeSwgMC45KSxcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLnByaW1hcnksXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50aXplKHRoZW1lLmNvbG9ycy5wcmltYXJ5LCAwLjgpLFxuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICAgICAgY29sb3I6IHRoZW1lLmNvbG9ycy5wcmltYXJ5LFxuICAgIH0sXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBTdHlsZWRIZWFkZXJCdXR0b24gPSBzdHlsZWQoXG4gIFN0eWxlZEJhc2VCdXR0b25cbik8UmVxdWlyZWRCYXNlQnV0dG9uUHJvcHM+KCh7IHRoZW1lIH0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcuc20sXG4gICAgZm9udFNpemU6IHRoZW1lLmZvbnRTaXplcy5zbSxcbiAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nLnRocmVlWFMsXG4gICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcudGhyZWVYUyxcblxuICAgIGxpbmVIZWlnaHQ6IHRoZW1lLmxpbmVIZWlnaHRzLm5vbmUsXG5cbiAgICAvLyBPdmVycmlkZSBidXR0b25zIG1pbiB3aWR0aCBhbmQgaGVpZ2h0LCB0byBlbnN1cmUgdGhlIGhvdmVyIHN0YXRlIGZvciBpY29uIGJ1dHRvbnMgb24gdGhlIGhlYWRlciBpcyBzcXVhcmVcbiAgICBtaW5XaWR0aDogdGhlbWUuc3BhY2luZy50aHJlZVhMLFxuICAgIG1pbkhlaWdodDogdGhlbWUuc3BhY2luZy50aHJlZVhMLFxuXG4gICAgXCImOmZvY3VzXCI6IHtcbiAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgIH0sXG4gICAgXCImOmZvY3VzLXZpc2libGVcIjoge1xuICAgICAgYm94U2hhZG93OiBgMCAwIDAgMC4ycmVtICR7dHJhbnNwYXJlbnRpemUodGhlbWUuY29sb3JzLmdyYXk5MCwgMC44KX1gLFxuICAgIH0sXG4gICAgXCImOmhvdmVyXCI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLmRhcmtlbmVkQmdNaXgyNSxcbiAgICB9LFxuICAgIFwiJjpkaXNhYmxlZCwgJjpkaXNhYmxlZDpob3ZlciwgJjpkaXNhYmxlZDphY3RpdmVcIjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMubGlnaHRHcmF5LFxuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZ3JheSxcbiAgICB9LFxuICB9XG59KVxuXG4vLyBUYWtlIG91dCBwYWRkaW5nIGZvciB0aGlzIHNwZWNpZmljIGJ1dHRvbiwgc28gd2UgY2FuIGVuc3VyZSBpdCdzIDMyeDMycHggbGlrZSBvdGhlciBidXR0b25zIGluIENvbW11bml0eSBDbG91ZFxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlYWRlck5vUGFkZGluZ0J1dHRvbiA9IHN0eWxlZChcbiAgU3R5bGVkSGVhZGVyQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGFkZGluZzogMCxcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEJvcmRlcmxlc3NJY29uQnV0dG9uID0gc3R5bGVkKFxuICBTdHlsZWRCYXNlQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyBzaXplLCB0aGVtZSB9KSA9PiB7XG4gIGNvbnN0IGljb25QYWRkaW5nOiBSZWNvcmQ8QmFzZUJ1dHRvblNpemUsIHN0cmluZz4gPSB7XG4gICAgW0Jhc2VCdXR0b25TaXplLlhTTUFMTF06IHRoZW1lLnNwYWNpbmcudGhyZWVYUyxcbiAgICBbQmFzZUJ1dHRvblNpemUuU01BTExdOiB0aGVtZS5zcGFjaW5nLnR3b1hTLFxuICAgIFtCYXNlQnV0dG9uU2l6ZS5NRURJVU1dOiB0aGVtZS5zcGFjaW5nLm1kLFxuICAgIFtCYXNlQnV0dG9uU2l6ZS5MQVJHRV06IHRoZW1lLnNwYWNpbmcubGcsXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZmFkZWRUZXh0NjAsXG4gICAgcGFkZGluZzogaWNvblBhZGRpbmdbc2l6ZV0sXG4gICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZy5ub25lLFxuICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nLm5vbmUsXG5cbiAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIG1pbkhlaWdodDogXCJ1bnNldFwiLFxuXG4gICAgXCImOmZvY3VzXCI6IHtcbiAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICB9LFxuICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnRleHQsXG4gICAgfSxcbiAgICBcIiY6ZGlzYWJsZWQsICY6ZGlzYWJsZWQ6aG92ZXIsICY6ZGlzYWJsZWQ6YWN0aXZlXCI6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZmFkZWRUZXh0MjAsXG4gICAgICBjdXJzb3I6IFwibm90LWFsbG93ZWRcIixcbiAgICB9LFxuICB9XG59KVxuXG5leHBvcnQgY29uc3QgU3R5bGVkQm9yZGVybGVzc0ljb25CdXR0b25BY3RpdmUgPSBzdHlsZWQoXG4gIFN0eWxlZEJvcmRlcmxlc3NJY29uQnV0dG9uXG4pPFJlcXVpcmVkQmFzZUJ1dHRvblByb3BzPigoeyB0aGVtZSB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5ib2R5VGV4dCxcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IFN0eWxlZFRvb2x0aXBOb3JtYWwgPSBzdHlsZWQuZGl2KCh7IHRoZW1lIH0pID0+ICh7XG4gIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgW2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50cy5zbX0pYF06IHtcbiAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgfSxcbn0pKVxuXG5leHBvcnQgY29uc3QgU3R5bGVkVG9vbHRpcE1vYmlsZSA9IHN0eWxlZC5kaXYoKHsgdGhlbWUgfSkgPT4gKHtcbiAgZGlzcGxheTogXCJub25lXCIsXG4gIFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludHMuc219KWBdOiB7XG4gICAgZGlzcGxheTogXCJibG9ja1wiLFxuICB9LFxufSkpXG5cbmV4cG9ydCBjb25zdCBTdHlsZWRFbGVtZW50VG9vbGJhckJ1dHRvbiA9IHN0eWxlZChcbiAgU3R5bGVkQmFzZUJ1dHRvblxuKTxSZXF1aXJlZEJhc2VCdXR0b25Qcm9wcz4oKHsgdGhlbWUgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLnRyYW5zcGFyZW50LFxuICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZy54cyxcbiAgICBmb250U2l6ZTogdGhlbWUuZm9udFNpemVzLnR3b1NtLFxuICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcubm9uZSxcbiAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZy5ub25lLFxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGdhcDogdGhlbWUuc3BhY2luZy54cyxcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIG1pbkhlaWdodDogXCJ1bnNldFwiLFxuICAgIC8vIGxpbmUgaGVpZ2h0IHNob3VsZCBiZSB0aGUgc2FtZSBhcyB0aGUgaWNvbiBzaXplXG4gICAgbGluZUhlaWdodDogdGhlbWUuaWNvblNpemVzLm1kLFxuXG4gICAgXCImOmZvY3VzXCI6IHtcbiAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgIGJveFNoYWRvdzogXCJub25lXCIsXG4gICAgfSxcbiAgICBcIiY6Zm9jdXMtdmlzaWJsZVwiOiB7XG4gICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICBib3hTaGFkb3c6IFwibm9uZVwiLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMuZGFya2VuZWRCZ01peDI1LFxuICAgIH0sXG4gICAgXCImOmhvdmVyXCI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3JzLmRhcmtlbmVkQmdNaXgyNSxcbiAgICB9LFxuICAgIFwiJjpkaXNhYmxlZCwgJjpkaXNhYmxlZDpob3ZlciwgJjpkaXNhYmxlZDphY3RpdmVcIjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvcnMubGlnaHRHcmF5LFxuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLmNvbG9ycy50cmFuc3BhcmVudCxcbiAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMuZ3JheSxcbiAgICB9LFxuICB9XG59KVxuIl19 */");
export const StyledBorderlessIconButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc4"
} : {
  target: "ef3psqc4",
  label: "StyledBorderlessIconButton"
})(_ref12 => {
  let {
    size,
    theme
  } = _ref12;
  const iconPadding = {
    [BaseButtonSize.XSMALL]: theme.spacing.threeXS,
    [BaseButtonSize.SMALL]: theme.spacing.twoXS,
    [BaseButtonSize.MEDIUM]: theme.spacing.md,
    [BaseButtonSize.LARGE]: theme.spacing.lg
  };
  return {
    backgroundColor: theme.colors.transparent,
    color: theme.colors.fadedText60,
    padding: iconPadding[size],
    marginLeft: theme.spacing.none,
    marginRight: theme.spacing.none,
    border: "none",
    display: "flex",
    minHeight: "unset",
    "&:focus": {
      boxShadow: "none",
      outline: "none"
    },
    "&:hover": {
      color: theme.colors.text
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      color: theme.colors.fadedText20,
      cursor: "not-allowed"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledBorderlessIconButtonActive = /*#__PURE__*/_styled(StyledBorderlessIconButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc3"
} : {
  target: "ef3psqc3",
  label: "StyledBorderlessIconButtonActive"
})(_ref13 => {
  let {
    theme
  } = _ref13;
  return {
    color: theme.colors.bodyText
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledTooltipNormal = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "ef3psqc2"
} : {
  target: "ef3psqc2",
  label: "StyledTooltipNormal"
})(_ref14 => {
  let {
    theme
  } = _ref14;
  return {
    display: "block",
    [`@media (max-width: ${theme.breakpoints.sm})`]: {
      display: "none"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledTooltipMobile = /*#__PURE__*/_styled("div", process.env.NODE_ENV === "production" ? {
  target: "ef3psqc1"
} : {
  target: "ef3psqc1",
  label: "StyledTooltipMobile"
})(_ref15 => {
  let {
    theme
  } = _ref15;
  return {
    display: "none",
    [`@media (max-width: ${theme.breakpoints.sm})`]: {
      display: "block"
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const StyledElementToolbarButton = /*#__PURE__*/_styled(StyledBaseButton, process.env.NODE_ENV === "production" ? {
  target: "ef3psqc0"
} : {
  target: "ef3psqc0",
  label: "StyledElementToolbarButton"
})(_ref16 => {
  let {
    theme
  } = _ref16;
  return {
    backgroundColor: theme.colors.transparent,
    border: "none",
    padding: theme.spacing.xs,
    fontSize: theme.fontSizes.twoSm,
    marginLeft: theme.spacing.none,
    marginRight: theme.spacing.none,
    display: "flex",
    gap: theme.spacing.xs,
    alignItems: "center",
    minHeight: "unset",
    // line height should be the same as the icon size
    lineHeight: theme.iconSizes.md,
    "&:focus": {
      outline: "none",
      border: "none",
      boxShadow: "none"
    },
    "&:focus-visible": {
      outline: "none",
      border: "none",
      boxShadow: "none",
      backgroundColor: theme.colors.darkenedBgMix25
    },
    "&:hover": {
      backgroundColor: theme.colors.darkenedBgMix25
    },
    "&:disabled, &:disabled:hover, &:disabled:active": {
      backgroundColor: theme.colors.lightGray,
      borderColor: theme.colors.transparent,
      color: theme.colors.gray
    }
  };
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
//# sourceMappingURL=styled-components.js.map