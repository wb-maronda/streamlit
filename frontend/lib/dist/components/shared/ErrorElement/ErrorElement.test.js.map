{"version":3,"file":"ErrorElement.test.js","names":["React","screen","render","ErrorElement","jsx","_jsx","getProps","propOverrides","arguments","length","undefined","name","message","stack","width","describe","it","props","expect","getByTestId","toBeInTheDocument","toHaveTextContent","queryByTestId","not"],"sources":["../../../../src/components/shared/ErrorElement/ErrorElement.test.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport \"@testing-library/jest-dom\"\nimport { screen } from \"@testing-library/react\"\n\nimport { render } from \"@streamlit/lib/src/test_util\"\n\nimport ErrorElement, { ErrorElementProps } from \"./ErrorElement\"\n\nconst getProps = (\n  propOverrides: Partial<ErrorElementProps> = {}\n): ErrorElementProps => ({\n  name: \"Name\",\n  message: \"Message\",\n  stack: \"Stack\\nLine 1   \\nLine 2\\n\",\n  width: 100,\n  ...propOverrides,\n})\n\ndescribe(\"ErrorElement element\", () => {\n  it(\"renders an AlertElement without crashing\", () => {\n    const props = getProps()\n    render(<ErrorElement {...props} />)\n\n    expect(screen.getByTestId(\"stAlertContainer\")).toBeInTheDocument()\n  })\n\n  it(\"renders stack without first line and trimmed lines\", () => {\n    const props = getProps()\n    render(<ErrorElement {...props} />)\n\n    expect(screen.getByTestId(\"stErrorElementStack\")).toHaveTextContent(\n      \"Line 1 Line 2\"\n    )\n  })\n\n  it(\"does not render the stack when not defined\", () => {\n    const props = getProps({ stack: undefined })\n    render(<ErrorElement {...props} />)\n\n    expect(screen.queryByTestId(\"stErrorElementStack\")).not.toBeInTheDocument()\n  })\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,2BAA2B;AAClC,SAASC,MAAM,QAAQ,wBAAwB;AAE/C,SAASC,MAAM;AAEf,OAAOC,YAAY;AAA6C,SAAAC,GAAA,IAAAC,IAAA;AAEhE,MAAMC,QAAQ,GAAG,SAAAA,CAAA;EAAA,IACfC,aAAyC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,OACvB;IACvBG,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE,SAAS;IAClBC,KAAK,EAAE,4BAA4B;IACnCC,KAAK,EAAE,GAAG;IACV,GAAGP;EACL,CAAC;AAAA,CAAC;AAEFQ,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EACrCC,EAAE,CAAC,0CAA0C,EAAE,MAAM;IACnD,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;IACxBJ,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKc;IAAK,CAAG,CAAC,CAAC;IAEnCC,MAAM,CAACjB,MAAM,CAACkB,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACpE,CAAC,CAAC;EAEFJ,EAAE,CAAC,oDAAoD,EAAE,MAAM;IAC7D,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;IACxBJ,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKc;IAAK,CAAG,CAAC,CAAC;IAEnCC,MAAM,CAACjB,MAAM,CAACkB,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAACE,iBAAiB,CACjE,eACF,CAAC;EACH,CAAC,CAAC;EAEFL,EAAE,CAAC,4CAA4C,EAAE,MAAM;IACrD,MAAMC,KAAK,GAAGX,QAAQ,CAAC;MAAEO,KAAK,EAAEH;IAAU,CAAC,CAAC;IAC5CR,MAAM,eAACG,IAAA,CAACF,YAAY;MAAA,GAAKc;IAAK,CAAG,CAAC,CAAC;IAEnCC,MAAM,CAACjB,MAAM,CAACqB,aAAa,CAAC,qBAAqB,CAAC,CAAC,CAACC,GAAG,CAACH,iBAAiB,CAAC,CAAC;EAC7E,CAAC,CAAC;AACJ,CAAC,CAAC"}