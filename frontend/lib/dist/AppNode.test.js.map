{"version":3,"file":"AppNode.test.js","names":["Block","BlockProto","Delta","DeltaProto","Element","ForwardMsgMetadata","BlockNode","ElementNode","AppRoot","IndexTypeName","UNICODE","Writer","vectorFromArray","NO_SCRIPT_RUN_ID","FAKE_SCRIPT_HASH","BLOCK","block","text","ROOT","describe","it","node","getIn","expect","toBeTextNode","toBeUndefined","newBlock","setIn","not","toStrictEqual","toThrow","arrowTable","q","quiverElement","index","toEqual","columns","data","toArray","map","a","types","pandas_type","UnicodeIndex","numpy_type","meta","arrowDataFrame","_element$data","_element$data2","_element$data3","_element$data4","MOCK_VEGA_LITE_CHART","spec","JSON","stringify","mark","encoding","x","field","type","y","size","color","datasets","useContainerWidth","arrowVegaLiteChart","element","vegaLiteChartElement","length","hasName","name","MOCK_UNNAMED_DATASET","MOCK_NAMED_DATASET","MOCK_ANOTHER_NAMED_DATASET","test","newNode","arrowAddRows","getVegaLiteChart","_element$data5","_element$data6","_element$data7","_element$data8","undefined","_element$data9","_element$data10","_element$data11","_element$data12","_element$data13","_element$data14","_element$data15","_element$data16","_element$data17","_element$data18","_element$data19","_element$data20","_element$data21","_element$data22","_element$data23","_element$data24","windowSpy","beforeEach","jest","spyOn","window","afterEach","mockRestore","empty","main","children","toBe","child","skeleton","toBeNull","sidebar","isEmpty","mainScriptHash","activeScriptHash","event","bottom","root","mockImplementation","location","search","alert","toBeDefined","delta","makeProto","newElement","body","newRoot","applyDelta","forwardMsgMetadata","filterMainScriptElements","getElements","_newRoot$main$getIn","_newRoot$main$getIn2","_newRoot$main$getIn3","_newRoot$main$getIn4","scriptRunId","fragmentId","_newRoot$main$getIn5","_newRoot$main$getIn6","_newRoot$main$getIn7","_newRoot$main$getIn8","addBlock","_newRoot$main$getIn9","NEW_FAKE_SCRIPT_HASH","_newRoot$main$getIn10","clearStaleNodes","allowEmpty","pruned","toBeInstanceOf","toHaveLength","Set","arguments","create","deltaPath","toBeGreaterThanOrEqual","MessageType","properties","message","bytes","encode","finish","decode","extend","received","_elementNode$element$","elementNode","concat","pass","textBody"],"sources":["../src/AppNode.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ArrowNamedDataSet,\n  Block as BlockProto,\n  Delta as DeltaProto,\n  Element,\n  ForwardMsgMetadata,\n  IArrowVegaLiteChart,\n} from \"./proto\"\nimport { BlockNode, ElementNode, AppNode, AppRoot } from \"./AppNode\"\nimport { IndexTypeName } from \"./dataframes/Quiver\"\nimport { UNICODE } from \"./mocks/arrow\"\nimport { Writer } from \"protobufjs\"\nimport { vectorFromArray } from \"apache-arrow\"\n\nconst NO_SCRIPT_RUN_ID = \"NO_SCRIPT_RUN_ID\"\nconst FAKE_SCRIPT_HASH = \"fake_script_hash\"\n// prettier-ignore\nconst BLOCK = block([\n  text(\"1\"),\n  block([\n    text(\"2\"),\n  ]),\n])\n\n// Initialize new AppRoot with a main block node and three child block nodes - sidebar, events and bottom.\nconst ROOT = new AppRoot(\n  FAKE_SCRIPT_HASH,\n  new BlockNode(FAKE_SCRIPT_HASH, [\n    BLOCK,\n    new BlockNode(FAKE_SCRIPT_HASH),\n    new BlockNode(FAKE_SCRIPT_HASH),\n    new BlockNode(FAKE_SCRIPT_HASH),\n  ])\n)\n\ndescribe(\"AppNode.getIn\", () => {\n  it(\"handles shallow paths\", () => {\n    const node = BLOCK.getIn([0])\n    expect(node).toBeTextNode(\"1\")\n  })\n\n  it(\"handles deep paths\", () => {\n    const node = BLOCK.getIn([1, 0])\n    expect(node).toBeTextNode(\"2\")\n  })\n\n  it(\"returns undefined for invalid paths\", () => {\n    const node = BLOCK.getIn([2, 3, 4])\n    expect(node).toBeUndefined()\n  })\n})\n\ndescribe(\"AppNode.setIn\", () => {\n  it(\"handles shallow paths\", () => {\n    const newBlock = BLOCK.setIn([0], text(\"new\"), NO_SCRIPT_RUN_ID)\n    expect(newBlock.getIn([0])).toBeTextNode(\"new\")\n\n    // Check BLOCK..newBlock diff is as expected.\n    expect(newBlock).not.toStrictEqual(BLOCK)\n    expect(newBlock.getIn([1])).toStrictEqual(BLOCK.getIn([1]))\n  })\n\n  it(\"handles deep paths\", () => {\n    const newBlock = BLOCK.setIn([1, 1], text(\"new\"), NO_SCRIPT_RUN_ID)\n    expect(newBlock.getIn([1, 1])).toBeTextNode(\"new\")\n\n    // Check BLOCK..newBlock diff is as expected\n    expect(newBlock).not.toStrictEqual(BLOCK)\n    expect(newBlock.getIn([0])).toStrictEqual(BLOCK.getIn([0]))\n    expect(newBlock.getIn([1])).not.toStrictEqual(BLOCK.getIn([1]))\n    expect(newBlock.getIn([1, 0])).toStrictEqual(BLOCK.getIn([1, 0]))\n    expect(newBlock.getIn([1, 1])).not.toStrictEqual(BLOCK.getIn([1, 1]))\n  })\n\n  it(\"throws an error for invalid paths\", () => {\n    expect(() => BLOCK.setIn([1, 2], text(\"new\"), NO_SCRIPT_RUN_ID)).toThrow(\n      \"Bad 'setIn' index 2 (should be between [0, 1])\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.quiverElement\", () => {\n  it(\"returns a quiverElement (arrowTable)\", () => {\n    const node = arrowTable()\n    const q = node.quiverElement\n\n    expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(q.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n  })\n\n  it(\"returns a quiverElement (arrowDataFrame)\", () => {\n    const node = arrowDataFrame()\n    const q = node.quiverElement\n\n    expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(q.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n  })\n\n  it(\"does not recompute its value (arrowTable)\", () => {\n    // accessing `quiverElement` twice should return the same instance.\n    const node = arrowTable()\n    expect(node.quiverElement).toStrictEqual(node.quiverElement)\n  })\n\n  it(\"does not recompute its value (arrowDataFrame)\", () => {\n    // accessing `quiverElement` twice should return the same instance.\n    const node = arrowDataFrame()\n    expect(node.quiverElement).toStrictEqual(node.quiverElement)\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() => node.quiverElement).toThrow(\n      \"elementType 'text' is not a valid Quiver element!\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.vegaLiteChartElement\", () => {\n  it(\"returns a vegaLiteChartElement (data)\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: { data: UNICODE },\n      datasets: [],\n      useContainerWidth: true,\n    }\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    const element = node.vegaLiteChartElement\n\n    // spec\n    expect(element.spec).toEqual(MOCK_VEGA_LITE_CHART.spec)\n\n    // data\n    expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(element.data?.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n\n    // datasets\n    expect(element.datasets.length).toEqual(0)\n\n    // use container width\n    expect(element.useContainerWidth).toEqual(\n      MOCK_VEGA_LITE_CHART.useContainerWidth\n    )\n  })\n\n  it(\"returns a vegaLiteChartElement (datasets)\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: null,\n      datasets: [{ hasName: true, name: \"foo\", data: { data: UNICODE } }],\n      useContainerWidth: true,\n    }\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    const element = node.vegaLiteChartElement\n\n    // spec\n    expect(element.spec).toEqual(MOCK_VEGA_LITE_CHART.spec)\n\n    // data\n    expect(element.data).toEqual(null)\n\n    // datasets\n    expect(element.datasets[0].hasName).toEqual(\n      MOCK_VEGA_LITE_CHART.datasets[0].hasName\n    )\n    expect(element.datasets[0].name).toEqual(\n      MOCK_VEGA_LITE_CHART.datasets[0].name\n    )\n    expect(element.datasets[0].data.index).toEqual([\n      vectorFromArray([\"i1\", \"i2\"]),\n    ])\n    expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(\n      element.datasets[0].data.data.toArray().map(a => a?.toArray())\n    ).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(element.datasets[0].data.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n\n    // use container width\n    expect(element.useContainerWidth).toEqual(\n      MOCK_VEGA_LITE_CHART.useContainerWidth\n    )\n  })\n\n  it(\"does not recompute its value\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: { data: UNICODE },\n      datasets: [],\n      useContainerWidth: true,\n    }\n    // accessing `vegaLiteChartElement` twice should return the same instance.\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    expect(node.vegaLiteChartElement).toStrictEqual(node.vegaLiteChartElement)\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() => node.vegaLiteChartElement).toThrow(\n      \"elementType 'text' is not a valid VegaLiteChartElement!\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.arrowAddRows\", () => {\n  const MOCK_UNNAMED_DATASET = {\n    hasName: false,\n    name: \"\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n  const MOCK_NAMED_DATASET = {\n    hasName: true,\n    name: \"foo\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n  const MOCK_ANOTHER_NAMED_DATASET = {\n    hasName: true,\n    name: \"bar\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n\n  describe(\"arrowTable\", () => {\n    test(\"addRows can be called with an unnamed dataset\", () => {\n      const node = arrowTable()\n      const newNode = node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n      const q = newNode.quiverElement\n\n      expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n      expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n      expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n      ])\n      expect(q.types).toEqual({\n        index: [\n          {\n            pandas_type: IndexTypeName.UnicodeIndex,\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n        data: [\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n      })\n    })\n\n    test(\"addRows throws an error when called with a named dataset\", () => {\n      const node = arrowTable()\n      expect(() =>\n        node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n      ).toThrow(\n        \"Add rows cannot be used with a named dataset for this element.\"\n      )\n    })\n  })\n\n  describe(\"arrowDataFrame\", () => {\n    test(\"addRows can be called with an unnamed dataset\", () => {\n      const node = arrowDataFrame()\n      const newNode = node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n      const q = newNode.quiverElement\n\n      expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n      expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n      expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n      ])\n      expect(q.types).toEqual({\n        index: [\n          {\n            pandas_type: IndexTypeName.UnicodeIndex,\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n        data: [\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n      })\n    })\n\n    test(\"addRows throws an error when called with a named dataset\", () => {\n      const node = arrowDataFrame()\n      expect(() =>\n        node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n      ).toThrow(\n        \"Add rows cannot be used with a named dataset for this element.\"\n      )\n    })\n  })\n\n  describe(\"arrowVegaLiteChart\", () => {\n    const getVegaLiteChart = (\n      datasets?: ArrowNamedDataSet[],\n      data?: Uint8Array\n    ): IArrowVegaLiteChart => ({\n      datasets: datasets || [],\n      data: data ? { data } : null,\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      useContainerWidth: true,\n    })\n\n    describe(\"addRows is called with a named dataset\", () => {\n      test(\"element has one dataset -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([MOCK_ANOTHER_NAMED_DATASET])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element has a dataset with the given name -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([MOCK_NAMED_DATASET, MOCK_ANOTHER_NAMED_DATASET])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have a matched dataset, but has data -> append new rows to data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart(undefined, UNICODE))\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have a matched dataset or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([\n            MOCK_ANOTHER_NAMED_DATASET,\n            MOCK_ANOTHER_NAMED_DATASET,\n          ])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have any datasets or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart())\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n\n    describe(\"addRows is called with an unnamed dataset\", () => {\n      test(\"element has one dataset -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart([MOCK_NAMED_DATASET]))\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element has data -> append new rows to data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart(undefined, UNICODE))\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have any datasets or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart())\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() =>\n      node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n    ).toThrow(\"elementType 'text' is not a valid arrowAddRows target!\")\n  })\n})\n\ndescribe(\"AppRoot.empty\", () => {\n  let windowSpy: jest.SpyInstance\n\n  beforeEach(() => {\n    windowSpy = jest.spyOn(window, \"window\", \"get\")\n  })\n\n  afterEach(() => {\n    windowSpy.mockRestore()\n  })\n\n  it(\"creates empty tree except for a skeleton\", async () => {\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.skeleton).not.toBeNull()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"sets the main script hash and active script hash\", () => {\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    expect(empty.mainScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.main.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.sidebar.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.event.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.bottom.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.root.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n  })\n\n  it(\"creates empty tree with no loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=hide_loading_screen\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    expect(empty.main.isEmpty).toBe(true)\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with v1 loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v1\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.alert).toBeDefined()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with v2 loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v2\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.skeleton).not.toBeNull()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with no loading screen if query param is v1 and it's not first load\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v1\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH, false)\n\n    expect(empty.main.isEmpty).toBe(true)\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n})\n\ndescribe(\"AppRoot.filterMainScriptElements\", () => {\n  it(\"does not clear nodes associated with main script hash\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    ).filterMainScriptElements(FAKE_SCRIPT_HASH)\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([1, 1])).toBeTextNode(\"newElement!\")\n    expect(newRoot.getElements().size).toBe(3)\n  })\n\n  it(\"clears nodes not associated with main script hash\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], \"DIFFERENT_HASH\")\n    ).filterMainScriptElements(FAKE_SCRIPT_HASH)\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([1, 1])).toBeUndefined()\n    expect(newRoot.getElements().size).toBe(2)\n  })\n})\n\ndescribe(\"AppRoot.applyDelta\", () => {\n  it(\"handles 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode).toBeTextNode(\"newElement!\")\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.fragmentId).toBe(undefined)\n    expect(newRoot.main.getIn([0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.getIn([1, 0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1, 1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newNode.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newRoot.sidebar.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n  })\n\n  it(\"handles 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, { addBlock: {} })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.fragmentId).toBe(undefined)\n    expect(newRoot.main.getIn([0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.getIn([1, 0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1, 1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newNode.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newRoot.sidebar.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n  })\n\n  it(\"specifies active script hash on 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const NEW_FAKE_SCRIPT_HASH = \"new_fake_script_hash\"\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], NEW_FAKE_SCRIPT_HASH)\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new other nodes are not affected by the new script hash\n    expect(newRoot.main.getIn([1, 0])?.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newNode.activeScriptHash).toBe(NEW_FAKE_SCRIPT_HASH)\n  })\n\n  it(\"specifies active script hash on 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, { addBlock: {} })\n    const NEW_FAKE_SCRIPT_HASH = \"new_fake_script_hash\"\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], NEW_FAKE_SCRIPT_HASH)\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.getIn([1, 0])?.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newNode.activeScriptHash).toBe(NEW_FAKE_SCRIPT_HASH)\n  })\n\n  it(\"can set fragmentId in 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n      fragmentId: \"myFragmentId\",\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode.fragmentId).toBe(\"myFragmentId\")\n  })\n\n  it(\"can set fragmentId in 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      addBlock: {},\n      fragmentId: \"myFragmentId\",\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode.fragmentId).toBe(\"myFragmentId\")\n  })\n})\n\ndescribe(\"AppRoot.clearStaleNodes\", () => {\n  it(\"clears stale nodes\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    ).clearStaleNodes(\"new_session_id\", [])\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([0, 0])).toBeTextNode(\"newElement!\")\n    expect(newRoot.getElements().size).toBe(1)\n  })\n\n  it(\"handles currentFragmentId correctly\", () => {\n    const root = AppRoot.empty(FAKE_SCRIPT_HASH)\n      // Block not corresponding to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, { addBlock: { allowEmpty: true } }),\n        forwardMsgMetadata([0, 0])\n      )\n      // Element in block unrelated to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement!\" } },\n        }),\n        forwardMsgMetadata([0, 0, 0])\n      )\n      // Another element in block unrelated to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement2!\" } },\n          fragmentId: \"other_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 0, 1])\n      )\n      // Old element related to my_fragment_id but in an unrelated block. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement4!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 0, 2])\n      )\n      // Block corresponding to my_fragment_id\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          addBlock: { allowEmpty: false },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1])\n      )\n      // Old element related to my_fragment_id. Should be pruned.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement3!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 0])\n      )\n      // New element related to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"newElement!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 1])\n      )\n\n    const pruned = root.clearStaleNodes(\"new_session_id\", [\"my_fragment_id\"])\n\n    expect(pruned.main.getIn([0])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([0]) as BlockNode).children).toHaveLength(3)\n    expect(pruned.main.getIn([0, 0])).toBeTextNode(\"oldElement!\")\n    expect(pruned.main.getIn([0, 1])).toBeTextNode(\"oldElement2!\")\n    expect(pruned.main.getIn([0, 2])).toBeTextNode(\"oldElement4!\")\n\n    expect(pruned.main.getIn([1])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([1]) as BlockNode).children).toHaveLength(1)\n    expect(pruned.main.getIn([1, 0])).toBeTextNode(\"newElement!\")\n  })\n})\n\ndescribe(\"AppRoot.getElements\", () => {\n  it(\"returns all elements\", () => {\n    // We have elements at main.[0] and main.[1, 0]\n    expect(ROOT.getElements()).toEqual(\n      new Set([\n        (ROOT.main.getIn([0]) as ElementNode).element,\n        (ROOT.main.getIn([1, 0]) as ElementNode).element,\n      ])\n    )\n  })\n})\n\n/** Create a `Text` element node with the given properties. */\nfunction text(text: string, scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { text: { body: text } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create a BlockNode with the given properties. */\nfunction block(\n  children: AppNode[] = [],\n  scriptRunId = NO_SCRIPT_RUN_ID\n): BlockNode {\n  return new BlockNode(\n    FAKE_SCRIPT_HASH,\n    children,\n    makeProto(BlockProto, {}),\n    scriptRunId\n  )\n}\n\n/** Create an arrowTable element node with the given properties. */\nfunction arrowTable(scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { arrowTable: { data: UNICODE } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create an arrowDataFrame element node with the given properties. */\nfunction arrowDataFrame(scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { arrowDataFrame: { data: UNICODE } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create an arrowVegaLiteChart element node with the given properties. */\nfunction arrowVegaLiteChart(\n  data: IArrowVegaLiteChart,\n  scriptRunId = NO_SCRIPT_RUN_ID\n): ElementNode {\n  const element = makeProto(Element, { arrowVegaLiteChart: data })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create a ForwardMsgMetadata with the given container and path */\nfunction forwardMsgMetadata(\n  deltaPath: number[],\n  activeScriptHash = FAKE_SCRIPT_HASH\n): ForwardMsgMetadata {\n  expect(deltaPath.length).toBeGreaterThanOrEqual(2)\n  return makeProto(ForwardMsgMetadata, { deltaPath, activeScriptHash })\n}\n\n/**\n * Make a \"fully concrete\" instance of a protobuf message.\n * This function constructs a message and then encodes and decodes it as\n * if it had arrived on the wire. This ensures that that it has all its\n * 'oneOfs' and 'defaults' set.\n */\nfunction makeProto<Type, Props>(\n  MessageType: {\n    new (props: Props): Type\n    encode: (message: Type, writer: Writer) => Writer\n    decode: (bytes: Uint8Array) => Type\n  },\n  properties: Props\n): Type {\n  const message = new MessageType(properties)\n  const bytes = MessageType.encode(message, Writer.create()).finish()\n  return MessageType.decode(bytes)\n}\n\n// Custom Jest matchers for dealing with AppNodes\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace jest {\n    interface Matchers<R> {\n      toBeTextNode(text: string): R\n    }\n  }\n}\n\nexpect.extend({\n  toBeTextNode(received, text): jest.CustomMatcherResult {\n    const elementNode = received as ElementNode\n    if (elementNode == null) {\n      return {\n        message: () => `expected ${received} to be an instance of ElementNode`,\n        pass: false,\n      }\n    }\n\n    const { type } = elementNode.element\n    if (type !== \"text\") {\n      return {\n        message: () =>\n          `expected ${received}.element.type to be 'text', but it was ${type}`,\n        pass: false,\n      }\n    }\n\n    const textBody = elementNode.element.text?.body\n    return {\n      message: () =>\n        `expected ${received}.element.text.body to be \"${text}\", but it was \"${textBody}\"`,\n      pass: textBody === text,\n    }\n  },\n})\n"],"mappings":"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"}