{"version":3,"file":"AppNode.test.js","names":["Writer","vectorFromArray","isNullOrUndefined","Block","BlockProto","Delta","DeltaProto","Element","ForwardMsgMetadata","Logo","LogoProto","AppRoot","BlockNode","ElementNode","IndexTypeName","UNICODE","NO_SCRIPT_RUN_ID","FAKE_SCRIPT_HASH","BLOCK","block","text","ROOT","describe","it","node","getIn","expect","toBeTextNode","toBeUndefined","newBlock","setIn","not","toStrictEqual","toThrow","arrowTable","q","quiverElement","index","toEqual","columns","data","toArray","map","a","types","pandas_type","UnicodeIndex","numpy_type","meta","arrowDataFrame","MOCK_VEGA_LITE_CHART","spec","JSON","stringify","mark","encoding","x","field","type","y","size","color","datasets","useContainerWidth","arrowVegaLiteChart","element","vegaLiteChartElement","length","hasName","name","MOCK_UNNAMED_DATASET","MOCK_NAMED_DATASET","MOCK_ANOTHER_NAMED_DATASET","test","newNode","arrowAddRows","getVegaLiteChart","undefined","windowSpy","beforeEach","jest","spyOn","window","afterEach","mockRestore","empty","main","children","toBe","child","skeleton","toBeNull","sidebar","isEmpty","mainScriptHash","activeScriptHash","event","bottom","root","mockImplementation","location","search","alert","toBeDefined","logo","create","image","empty2","delta","makeProto","newElement","body","newRoot","applyDelta","forwardMsgMetadata","filterMainScriptElements","getElements","scriptRunId","fragmentId","deltaMsgReceivedAt","addBlock","expandable","expanded","label","icon","deltaBlock","newRoot2","tabContainer","replacedBlock","NEW_FAKE_SCRIPT_HASH","timestamp","Date","UTC","valueOf","now","fn","clearStaleNodes","appRootWithLogo","newNewRoot","tabContainerProto","allowEmpty","tab1","tab","tab2","pruned","toBeInstanceOf","toHaveLength","toContain","vertical","Set","arguments","deltaPath","toBeGreaterThanOrEqual","MessageType","properties","message","bytes","encode","finish","decode","extend","received","elementNode","pass","textBody"],"sources":["../src/AppNode.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Writer } from \"protobufjs\"\nimport { vectorFromArray } from \"apache-arrow\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  ArrowNamedDataSet,\n  Block as BlockProto,\n  Delta as DeltaProto,\n  Element,\n  ForwardMsgMetadata,\n  IArrowVegaLiteChart,\n  Logo as LogoProto,\n} from \"./proto\"\nimport { AppNode, AppRoot, BlockNode, ElementNode } from \"./AppNode\"\nimport { IndexTypeName } from \"./dataframes/Quiver\"\nimport { UNICODE } from \"./mocks/arrow\"\n\nconst NO_SCRIPT_RUN_ID = \"NO_SCRIPT_RUN_ID\"\nconst FAKE_SCRIPT_HASH = \"fake_script_hash\"\n// prettier-ignore\nconst BLOCK = block([\n  text(\"1\"),\n  block([\n    text(\"2\"),\n  ]),\n])\n\n// Initialize new AppRoot with a main block node and three child block nodes - sidebar, events and bottom.\nconst ROOT = new AppRoot(\n  FAKE_SCRIPT_HASH,\n  new BlockNode(FAKE_SCRIPT_HASH, [\n    BLOCK,\n    new BlockNode(FAKE_SCRIPT_HASH),\n    new BlockNode(FAKE_SCRIPT_HASH),\n    new BlockNode(FAKE_SCRIPT_HASH),\n  ])\n)\n\ndescribe(\"AppNode.getIn\", () => {\n  it(\"handles shallow paths\", () => {\n    const node = BLOCK.getIn([0])\n    expect(node).toBeTextNode(\"1\")\n  })\n\n  it(\"handles deep paths\", () => {\n    const node = BLOCK.getIn([1, 0])\n    expect(node).toBeTextNode(\"2\")\n  })\n\n  it(\"returns undefined for invalid paths\", () => {\n    const node = BLOCK.getIn([2, 3, 4])\n    expect(node).toBeUndefined()\n  })\n})\n\ndescribe(\"AppNode.setIn\", () => {\n  it(\"handles shallow paths\", () => {\n    const newBlock = BLOCK.setIn([0], text(\"new\"), NO_SCRIPT_RUN_ID)\n    expect(newBlock.getIn([0])).toBeTextNode(\"new\")\n\n    // Check BLOCK..newBlock diff is as expected.\n    expect(newBlock).not.toStrictEqual(BLOCK)\n    expect(newBlock.getIn([1])).toStrictEqual(BLOCK.getIn([1]))\n  })\n\n  it(\"handles deep paths\", () => {\n    const newBlock = BLOCK.setIn([1, 1], text(\"new\"), NO_SCRIPT_RUN_ID)\n    expect(newBlock.getIn([1, 1])).toBeTextNode(\"new\")\n\n    // Check BLOCK..newBlock diff is as expected\n    expect(newBlock).not.toStrictEqual(BLOCK)\n    expect(newBlock.getIn([0])).toStrictEqual(BLOCK.getIn([0]))\n    expect(newBlock.getIn([1])).not.toStrictEqual(BLOCK.getIn([1]))\n    expect(newBlock.getIn([1, 0])).toStrictEqual(BLOCK.getIn([1, 0]))\n    expect(newBlock.getIn([1, 1])).not.toStrictEqual(BLOCK.getIn([1, 1]))\n  })\n\n  it(\"throws an error for invalid paths\", () => {\n    expect(() => BLOCK.setIn([1, 2], text(\"new\"), NO_SCRIPT_RUN_ID)).toThrow(\n      \"Bad 'setIn' index 2 (should be between [0, 1])\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.quiverElement\", () => {\n  it(\"returns a quiverElement (arrowTable)\", () => {\n    const node = arrowTable()\n    const q = node.quiverElement\n\n    expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(q.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n  })\n\n  it(\"returns a quiverElement (arrowDataFrame)\", () => {\n    const node = arrowDataFrame()\n    const q = node.quiverElement\n\n    expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(q.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n  })\n\n  it(\"does not recompute its value (arrowTable)\", () => {\n    // accessing `quiverElement` twice should return the same instance.\n    const node = arrowTable()\n    expect(node.quiverElement).toStrictEqual(node.quiverElement)\n  })\n\n  it(\"does not recompute its value (arrowDataFrame)\", () => {\n    // accessing `quiverElement` twice should return the same instance.\n    const node = arrowDataFrame()\n    expect(node.quiverElement).toStrictEqual(node.quiverElement)\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() => node.quiverElement).toThrow(\n      \"elementType 'text' is not a valid Quiver element!\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.vegaLiteChartElement\", () => {\n  it(\"returns a vegaLiteChartElement (data)\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: { data: UNICODE },\n      datasets: [],\n      useContainerWidth: true,\n    }\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    const element = node.vegaLiteChartElement\n\n    // spec\n    expect(element.spec).toEqual(MOCK_VEGA_LITE_CHART.spec)\n\n    // data\n    expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n    expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(element.data?.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n\n    // datasets\n    expect(element.datasets.length).toEqual(0)\n\n    // use container width\n    expect(element.useContainerWidth).toEqual(\n      MOCK_VEGA_LITE_CHART.useContainerWidth\n    )\n  })\n\n  it(\"returns a vegaLiteChartElement (datasets)\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: null,\n      datasets: [{ hasName: true, name: \"foo\", data: { data: UNICODE } }],\n      useContainerWidth: true,\n    }\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    const element = node.vegaLiteChartElement\n\n    // spec\n    expect(element.spec).toEqual(MOCK_VEGA_LITE_CHART.spec)\n\n    // data\n    expect(element.data).toEqual(null)\n\n    // datasets\n    expect(element.datasets[0].hasName).toEqual(\n      MOCK_VEGA_LITE_CHART.datasets[0].hasName\n    )\n    expect(element.datasets[0].name).toEqual(\n      MOCK_VEGA_LITE_CHART.datasets[0].name\n    )\n    expect(element.datasets[0].data.index).toEqual([\n      vectorFromArray([\"i1\", \"i2\"]),\n    ])\n    expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n    expect(\n      element.datasets[0].data.data.toArray().map(a => a?.toArray())\n    ).toEqual([\n      [\"foo\", \"1\"],\n      [\"bar\", \"2\"],\n    ])\n    expect(element.datasets[0].data.types).toEqual({\n      index: [\n        {\n          pandas_type: IndexTypeName.UnicodeIndex,\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n      data: [\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n        {\n          pandas_type: \"unicode\",\n          numpy_type: \"object\",\n          meta: null,\n        },\n      ],\n    })\n\n    // use container width\n    expect(element.useContainerWidth).toEqual(\n      MOCK_VEGA_LITE_CHART.useContainerWidth\n    )\n  })\n\n  it(\"does not recompute its value\", () => {\n    const MOCK_VEGA_LITE_CHART = {\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      data: { data: UNICODE },\n      datasets: [],\n      useContainerWidth: true,\n    }\n    // accessing `vegaLiteChartElement` twice should return the same instance.\n    const node = arrowVegaLiteChart(MOCK_VEGA_LITE_CHART)\n    expect(node.vegaLiteChartElement).toStrictEqual(node.vegaLiteChartElement)\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() => node.vegaLiteChartElement).toThrow(\n      \"elementType 'text' is not a valid VegaLiteChartElement!\"\n    )\n  })\n})\n\ndescribe(\"ElementNode.arrowAddRows\", () => {\n  const MOCK_UNNAMED_DATASET = {\n    hasName: false,\n    name: \"\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n  const MOCK_NAMED_DATASET = {\n    hasName: true,\n    name: \"foo\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n  const MOCK_ANOTHER_NAMED_DATASET = {\n    hasName: true,\n    name: \"bar\",\n    data: { data: UNICODE },\n  } as ArrowNamedDataSet\n\n  describe(\"arrowTable\", () => {\n    test(\"addRows can be called with an unnamed dataset\", () => {\n      const node = arrowTable()\n      const newNode = node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n      const q = newNode.quiverElement\n\n      expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n      expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n      expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n      ])\n      expect(q.types).toEqual({\n        index: [\n          {\n            pandas_type: IndexTypeName.UnicodeIndex,\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n        data: [\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n      })\n    })\n\n    test(\"addRows throws an error when called with a named dataset\", () => {\n      const node = arrowTable()\n      expect(() =>\n        node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n      ).toThrow(\n        \"Add rows cannot be used with a named dataset for this element.\"\n      )\n    })\n  })\n\n  describe(\"arrowDataFrame\", () => {\n    test(\"addRows can be called with an unnamed dataset\", () => {\n      const node = arrowDataFrame()\n      const newNode = node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n      const q = newNode.quiverElement\n\n      expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n      expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n      expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n        [\"foo\", \"1\"],\n        [\"bar\", \"2\"],\n      ])\n      expect(q.types).toEqual({\n        index: [\n          {\n            pandas_type: IndexTypeName.UnicodeIndex,\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n        data: [\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n          {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n        ],\n      })\n    })\n\n    test(\"addRows throws an error when called with a named dataset\", () => {\n      const node = arrowDataFrame()\n      expect(() =>\n        node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n      ).toThrow(\n        \"Add rows cannot be used with a named dataset for this element.\"\n      )\n    })\n  })\n\n  describe(\"arrowVegaLiteChart\", () => {\n    const getVegaLiteChart = (\n      datasets?: ArrowNamedDataSet[],\n      data?: Uint8Array\n    ): IArrowVegaLiteChart => ({\n      datasets: datasets || [],\n      data: data ? { data } : null,\n      spec: JSON.stringify({\n        mark: \"circle\",\n        encoding: {\n          x: { field: \"a\", type: \"quantitative\" },\n          y: { field: \"b\", type: \"quantitative\" },\n          size: { field: \"c\", type: \"quantitative\" },\n          color: { field: \"c\", type: \"quantitative\" },\n        },\n      }),\n      useContainerWidth: true,\n    })\n\n    describe(\"addRows is called with a named dataset\", () => {\n      test(\"element has one dataset -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([MOCK_ANOTHER_NAMED_DATASET])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element has a dataset with the given name -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([MOCK_NAMED_DATASET, MOCK_ANOTHER_NAMED_DATASET])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have a matched dataset, but has data -> append new rows to data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart(undefined, UNICODE))\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have a matched dataset or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(\n          getVegaLiteChart([\n            MOCK_ANOTHER_NAMED_DATASET,\n            MOCK_ANOTHER_NAMED_DATASET,\n          ])\n        )\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have any datasets or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart())\n        const newNode = node.arrowAddRows(MOCK_NAMED_DATASET, NO_SCRIPT_RUN_ID)\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n\n    describe(\"addRows is called with an unnamed dataset\", () => {\n      test(\"element has one dataset -> append new rows to that dataset\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart([MOCK_NAMED_DATASET]))\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.datasets[0].data.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.datasets[0].data.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(\n          element.datasets[0].data.data.toArray().map(a => a?.toArray())\n        ).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.datasets[0].data.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element has data -> append new rows to data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart(undefined, UNICODE))\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([\n          vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"]),\n        ])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"element doesn't have any datasets or data -> use new rows as data\", () => {\n        const node = arrowVegaLiteChart(getVegaLiteChart())\n        const newNode = node.arrowAddRows(\n          MOCK_UNNAMED_DATASET,\n          NO_SCRIPT_RUN_ID\n        )\n        const element = newNode.vegaLiteChartElement\n\n        expect(element.data?.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(element.data?.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(element.data?.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(element.data?.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n  })\n\n  it(\"throws an error for other element types\", () => {\n    const node = text(\"foo\")\n    expect(() =>\n      node.arrowAddRows(MOCK_UNNAMED_DATASET, NO_SCRIPT_RUN_ID)\n    ).toThrow(\"elementType 'text' is not a valid arrowAddRows target!\")\n  })\n})\n\ndescribe(\"AppRoot.empty\", () => {\n  let windowSpy: jest.SpyInstance\n\n  beforeEach(() => {\n    windowSpy = jest.spyOn(window, \"window\", \"get\")\n  })\n\n  afterEach(() => {\n    windowSpy.mockRestore()\n  })\n\n  it(\"creates empty tree except for a skeleton\", async () => {\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.skeleton).not.toBeNull()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"sets the main script hash and active script hash\", () => {\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    expect(empty.mainScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.main.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.sidebar.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.event.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.bottom.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(empty.root.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n  })\n\n  it(\"creates empty tree with no loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=hide_loading_screen\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    expect(empty.main.isEmpty).toBe(true)\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with v1 loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v1\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.alert).toBeDefined()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with v2 loading screen if query param is set\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v2\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH)\n\n    // The linter is misfiring here. We're not accessing a DOM node.\n    // eslint-disable-next-line testing-library/no-node-access\n    expect(empty.main.children.length).toBe(1)\n    const child = empty.main.getIn([0]) as ElementNode\n    expect(child.element.skeleton).not.toBeNull()\n\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"creates empty tree with no loading screen if query param is v1 and it's not first load\", async () => {\n    windowSpy.mockImplementation(() => ({\n      location: {\n        search: \"?embed_options=show_loading_screen_v1\",\n      },\n    }))\n\n    const empty = AppRoot.empty(FAKE_SCRIPT_HASH, false)\n\n    expect(empty.main.isEmpty).toBe(true)\n    expect(empty.sidebar.isEmpty).toBe(true)\n  })\n\n  it(\"passes logo to new Root if empty is called with logo\", async () => {\n    const logo = LogoProto.create({\n      image:\n        \"https://global.discourse-cdn.com/business7/uploads/streamlit/original/2X/8/8cb5b6c0e1fe4e4ebfd30b769204c0d30c332fec.png\",\n    })\n\n    // Replicate .empty call on initial render\n    const empty = AppRoot.empty(\"\", true)\n    expect(empty.logo).toBeNull()\n\n    // Replicate .empty call in AppNav's clearPageElements for MPA V1\n    const empty2 = AppRoot.empty(FAKE_SCRIPT_HASH, false, undefined, logo)\n    expect(empty2.logo).not.toBeNull()\n  })\n})\n\ndescribe(\"AppRoot.filterMainScriptElements\", () => {\n  it(\"does not clear nodes associated with main script hash\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    ).filterMainScriptElements(FAKE_SCRIPT_HASH)\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([1, 1])).toBeTextNode(\"newElement!\")\n    expect(newRoot.getElements().size).toBe(3)\n  })\n\n  it(\"clears nodes not associated with main script hash\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], \"DIFFERENT_HASH\")\n    ).filterMainScriptElements(FAKE_SCRIPT_HASH)\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([1, 1])).toBeUndefined()\n    expect(newRoot.getElements().size).toBe(2)\n  })\n})\n\ndescribe(\"AppRoot.applyDelta\", () => {\n  it(\"handles 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode).toBeTextNode(\"newElement!\")\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.fragmentId).toBe(undefined)\n    expect(newRoot.main.deltaMsgReceivedAt).toBe(undefined)\n    expect(newRoot.main.getIn([0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.getIn([1, 0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1, 1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newNode.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newRoot.sidebar.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n  })\n\n  it(\"handles 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, { addBlock: {} })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.fragmentId).toBe(undefined)\n    expect(newRoot.main.deltaMsgReceivedAt).toBe(undefined)\n    expect(newRoot.main.getIn([0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newRoot.main.getIn([1, 0])?.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n    expect(newRoot.main.getIn([1, 1])?.scriptRunId).toBe(\"new_session_id\")\n    expect(newNode.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newRoot.sidebar.scriptRunId).toBe(NO_SCRIPT_RUN_ID)\n  })\n\n  it(\"removes a block's children if the block type changes for the same delta path\", () => {\n    const newRoot = ROOT.applyDelta(\n      \"script_run_id\",\n      makeProto(DeltaProto, {\n        addBlock: {\n          expandable: {\n            expanded: true,\n            label: \"label\",\n            icon: \"\",\n          },\n        },\n      }),\n      forwardMsgMetadata([0, 1, 1])\n    ).applyDelta(\n      \"script_run_id\",\n      makeProto(DeltaProto, {\n        newElement: { text: { body: \"newElement!\" } },\n      }),\n      forwardMsgMetadata([0, 1, 1, 0])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n    expect(newNode.deltaBlock.type).toBe(\"expandable\")\n    expect(newNode.children.length).toBe(1)\n\n    const newRoot2 = newRoot.applyDelta(\n      \"new_script_run_id\",\n      makeProto(DeltaProto, {\n        addBlock: {\n          tabContainer: {},\n        },\n      }),\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const replacedBlock = newRoot2.main.getIn([1, 1]) as BlockNode\n    expect(replacedBlock).toBeDefined()\n    expect(replacedBlock.deltaBlock.type).toBe(\"tabContainer\")\n    expect(replacedBlock.children.length).toBe(0)\n  })\n\n  it(\"will not remove a block's children if the block type is the same for the same delta path\", () => {\n    const newRoot = ROOT.applyDelta(\n      \"script_run_id\",\n      makeProto(DeltaProto, {\n        addBlock: {\n          expandable: {\n            expanded: true,\n            label: \"label\",\n            icon: \"\",\n          },\n        },\n      }),\n      forwardMsgMetadata([0, 1, 1])\n    ).applyDelta(\n      \"script_run_id\",\n      makeProto(DeltaProto, {\n        newElement: { text: { body: \"newElement!\" } },\n      }),\n      forwardMsgMetadata([0, 1, 1, 0])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n    expect(newNode.deltaBlock.type).toBe(\"expandable\")\n    expect(newNode.children.length).toBe(1)\n\n    const newRoot2 = newRoot.applyDelta(\n      \"new_script_run_id\",\n      makeProto(DeltaProto, {\n        addBlock: {\n          expandable: {\n            expanded: true,\n            label: \"other label\",\n            icon: \"\",\n          },\n        },\n      }),\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const replacedBlock = newRoot2.main.getIn([1, 1]) as BlockNode\n    expect(replacedBlock).toBeDefined()\n    expect(replacedBlock.deltaBlock.type).toBe(\"expandable\")\n    expect(replacedBlock.children.length).toBe(1)\n  })\n\n  it(\"specifies active script hash on 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const NEW_FAKE_SCRIPT_HASH = \"new_fake_script_hash\"\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], NEW_FAKE_SCRIPT_HASH)\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new other nodes are not affected by the new script hash\n    expect(newRoot.main.getIn([1, 0])?.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newNode.activeScriptHash).toBe(NEW_FAKE_SCRIPT_HASH)\n  })\n\n  it(\"specifies active script hash on 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, { addBlock: {} })\n    const NEW_FAKE_SCRIPT_HASH = \"new_fake_script_hash\"\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1], NEW_FAKE_SCRIPT_HASH)\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode).toBeDefined()\n\n    // Check that our new scriptRunId has been set only on the touched nodes\n    expect(newRoot.main.getIn([1, 0])?.activeScriptHash).toBe(FAKE_SCRIPT_HASH)\n    expect(newNode.activeScriptHash).toBe(NEW_FAKE_SCRIPT_HASH)\n  })\n\n  it(\"can set fragmentId in 'newElement' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n      fragmentId: \"myFragmentId\",\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as ElementNode\n    expect(newNode.fragmentId).toBe(\"myFragmentId\")\n  })\n\n  it(\"can set fragmentId in 'addBlock' deltas\", () => {\n    const delta = makeProto(DeltaProto, {\n      addBlock: {},\n      fragmentId: \"myFragmentId\",\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode.fragmentId).toBe(\"myFragmentId\")\n  })\n\n  it(\"timestamp is set on BlockNode as message id\", () => {\n    const timestamp = new Date(Date.UTC(2017, 1, 14)).valueOf()\n    Date.now = jest.fn(() => timestamp)\n    const delta = makeProto(DeltaProto, {\n      addBlock: {},\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    )\n\n    const newNode = newRoot.main.getIn([1, 1]) as BlockNode\n    expect(newNode.deltaMsgReceivedAt).toBe(timestamp)\n  })\n})\n\ndescribe(\"AppRoot.clearStaleNodes\", () => {\n  it(\"clears stale nodes\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n    })\n    const newRoot = ROOT.applyDelta(\n      \"new_session_id\",\n      delta,\n      forwardMsgMetadata([0, 1, 1])\n    ).clearStaleNodes(\"new_session_id\", [])\n\n    // We should now only have a single element, inside a single block\n    expect(newRoot.main.getIn([0, 0])).toBeTextNode(\"newElement!\")\n    expect(newRoot.getElements().size).toBe(1)\n  })\n\n  it(\"clears a stale logo\", () => {\n    const logo = LogoProto.create({\n      image:\n        \"https://global.discourse-cdn.com/business7/uploads/streamlit/original/2X/8/8cb5b6c0e1fe4e4ebfd30b769204c0d30c332fec.png\",\n    })\n    const newRoot = ROOT.appRootWithLogo(logo, {\n      activeScriptHash: \"hash\",\n      scriptRunId: \"script_run_id\",\n    })\n    expect(newRoot.logo).not.toBeNull()\n\n    const newNewRoot = newRoot.clearStaleNodes(\"new_script_run_id\", [])\n    expect(newNewRoot.logo).toBeNull()\n  })\n\n  it(\"handles currentFragmentId correctly\", () => {\n    const tabContainerProto = makeProto(DeltaProto, {\n      addBlock: { tabContainer: {}, allowEmpty: false },\n      fragmentId: \"my_fragment_id\",\n    })\n    const tab1 = makeProto(DeltaProto, {\n      addBlock: { tab: { label: \"tab1\" }, allowEmpty: true },\n      fragmentId: \"my_fragment_id\",\n    })\n    const tab2 = makeProto(DeltaProto, {\n      addBlock: { tab: { label: \"tab2\" }, allowEmpty: true },\n      fragmentId: \"my_fragment_id\",\n    })\n\n    // const BLOCK = block([text(\"1\"), block([text(\"2\")])])\n    const root = AppRoot.empty(FAKE_SCRIPT_HASH)\n      // Block not corresponding to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, { addBlock: { allowEmpty: true } }),\n        forwardMsgMetadata([0, 0])\n      )\n      // Element in block unrelated to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement!\" } },\n        }),\n        forwardMsgMetadata([0, 0, 0])\n      )\n      // Another element in block unrelated to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement2!\" } },\n          fragmentId: \"other_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 0, 1])\n      )\n      // Old element related to my_fragment_id but in an unrelated block. Should be preserved.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement4!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 0, 2])\n      )\n      // Block corresponding to my_fragment_id\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          addBlock: { allowEmpty: false },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1])\n      )\n      // Old element related to my_fragment_id. Should be pruned.\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement3!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 0])\n      )\n      // New element related to my_fragment_id. Should be preserved.\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"newElement!\" } },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 1])\n      )\n      // New element container related to my_fragment_id, having children which will be handled individually\n      // Create a tab container with two tabs in the old session; then send new delta with the container and\n      // only one tab. The second tab with the old_session_id should be pruned.\n      .applyDelta(\n        \"old_session_id\",\n        tabContainerProto,\n        forwardMsgMetadata([0, 2])\n      )\n      .applyDelta(\"old_session_id\", tab1, forwardMsgMetadata([0, 2, 0]))\n      .applyDelta(\"old_session_id\", tab2, forwardMsgMetadata([0, 2, 1]))\n      .applyDelta(\n        \"new_session_id\",\n        tabContainerProto,\n        forwardMsgMetadata([0, 2])\n      )\n      .applyDelta(\"new_session_id\", tab1, forwardMsgMetadata([0, 2, 0]))\n\n    const pruned = root.clearStaleNodes(\"new_session_id\", [\"my_fragment_id\"])\n\n    expect(pruned.main.getIn([0])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([0]) as BlockNode).children).toHaveLength(3)\n    expect(pruned.main.getIn([0, 0])).toBeTextNode(\"oldElement!\")\n    expect(pruned.main.getIn([0, 1])).toBeTextNode(\"oldElement2!\")\n    expect(pruned.main.getIn([0, 2])).toBeTextNode(\"oldElement4!\")\n\n    expect(pruned.main.getIn([1])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([1]) as BlockNode).children).toHaveLength(1)\n    expect(pruned.main.getIn([1, 0])).toBeTextNode(\"newElement!\")\n\n    expect(pruned.main.getIn([2])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([2]) as BlockNode).children).toHaveLength(1)\n    expect(\n      (pruned.main.getIn([2, 0]) as BlockNode).deltaBlock.tab?.label\n    ).toContain(\"tab1\")\n  })\n\n  it(\"clear childNodes of a block node in fragment run\", () => {\n    // Add a new element and clear stale nodes\n    const delta = makeProto(DeltaProto, {\n      newElement: { text: { body: \"newElement!\" } },\n      fragmentId: \"my_fragment_id\",\n    })\n    const newRoot = AppRoot.empty(FAKE_SCRIPT_HASH)\n      // Block corresponding to my_fragment_id\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          addBlock: { vertical: {}, allowEmpty: false },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 0])\n      )\n      .applyDelta(\"new_session_id\", delta, forwardMsgMetadata([0, 0, 0]))\n      // Block with child where scriptRunId is different\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          addBlock: { vertical: {}, allowEmpty: false },\n          fragmentId: \"my_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1])\n      )\n      .applyDelta(\"new_session_id\", delta, forwardMsgMetadata([0, 1, 0]))\n      .applyDelta(\"new_session_id\", delta, forwardMsgMetadata([0, 1, 1]))\n      // this child is a nested fragment_id from an old run and should be pruned\n      .applyDelta(\n        \"old_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"oldElement!\" } },\n          fragmentId: \"my_nested_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 2])\n      )\n      // this child is a nested fragment_id from the same run and should be preserved\n      .applyDelta(\n        \"new_session_id\",\n        makeProto(DeltaProto, {\n          newElement: { text: { body: \"newElement!\" } },\n          fragmentId: \"my_nested_fragment_id\",\n        }),\n        forwardMsgMetadata([0, 1, 3])\n      )\n\n    expect((newRoot.main.getIn([1]) as BlockNode).children).toHaveLength(4)\n\n    const pruned = newRoot.clearStaleNodes(\"new_session_id\", [\n      \"my_fragment_id\",\n    ])\n\n    expect(pruned.main.getIn([0])).toBeInstanceOf(BlockNode)\n    expect((pruned.main.getIn([0]) as BlockNode).children).toHaveLength(1)\n    expect(pruned.main.getIn([1])).toBeInstanceOf(BlockNode)\n    // the stale nested fragment child should have been pruned\n    expect((pruned.main.getIn([1]) as BlockNode).children).toHaveLength(3)\n  })\n})\n\ndescribe(\"AppRoot.getElements\", () => {\n  it(\"returns all elements\", () => {\n    // We have elements at main.[0] and main.[1, 0]\n    expect(ROOT.getElements()).toEqual(\n      new Set([\n        (ROOT.main.getIn([0]) as ElementNode).element,\n        (ROOT.main.getIn([1, 0]) as ElementNode).element,\n      ])\n    )\n  })\n})\n\n/** Create a `Text` element node with the given properties. */\nfunction text(text: string, scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { text: { body: text } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create a BlockNode with the given properties. */\nfunction block(\n  children: AppNode[] = [],\n  scriptRunId = NO_SCRIPT_RUN_ID\n): BlockNode {\n  return new BlockNode(\n    FAKE_SCRIPT_HASH,\n    children,\n    makeProto(BlockProto, {}),\n    scriptRunId\n  )\n}\n\n/** Create an arrowTable element node with the given properties. */\nfunction arrowTable(scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { arrowTable: { data: UNICODE } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create an arrowDataFrame element node with the given properties. */\nfunction arrowDataFrame(scriptRunId = NO_SCRIPT_RUN_ID): ElementNode {\n  const element = makeProto(Element, { arrowDataFrame: { data: UNICODE } })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create an arrowVegaLiteChart element node with the given properties. */\nfunction arrowVegaLiteChart(\n  data: IArrowVegaLiteChart,\n  scriptRunId = NO_SCRIPT_RUN_ID\n): ElementNode {\n  const element = makeProto(Element, { arrowVegaLiteChart: data })\n  return new ElementNode(\n    element,\n    ForwardMsgMetadata.create(),\n    scriptRunId,\n    FAKE_SCRIPT_HASH\n  )\n}\n\n/** Create a ForwardMsgMetadata with the given container and path */\nfunction forwardMsgMetadata(\n  deltaPath: number[],\n  activeScriptHash = FAKE_SCRIPT_HASH\n): ForwardMsgMetadata {\n  expect(deltaPath.length).toBeGreaterThanOrEqual(2)\n  return makeProto(ForwardMsgMetadata, { deltaPath, activeScriptHash })\n}\n\n/**\n * Make a \"fully concrete\" instance of a protobuf message.\n * This function constructs a message and then encodes and decodes it as\n * if it had arrived on the wire. This ensures that that it has all its\n * 'oneOfs' and 'defaults' set.\n */\nfunction makeProto<Type, Props>(\n  MessageType: {\n    new (props: Props): Type\n    encode: (message: Type, writer: Writer) => Writer\n    decode: (bytes: Uint8Array) => Type\n  },\n  properties: Props\n): Type {\n  const message = new MessageType(properties)\n  const bytes = MessageType.encode(message, Writer.create()).finish()\n  return MessageType.decode(bytes)\n}\n\n// Custom Jest matchers for dealing with AppNodes\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace jest {\n    interface Matchers<R> {\n      toBeTextNode(text: string): R\n    }\n  }\n}\n\nexpect.extend({\n  toBeTextNode(received, text): jest.CustomMatcherResult {\n    const elementNode = received as ElementNode\n    if (isNullOrUndefined(elementNode)) {\n      return {\n        message: () => `expected ${received} to be an instance of ElementNode`,\n        pass: false,\n      }\n    }\n\n    const { type } = elementNode.element\n    if (type !== \"text\") {\n      return {\n        message: () =>\n          `expected ${received}.element.type to be 'text', but it was ${type}`,\n        pass: false,\n      }\n    }\n\n    const textBody = elementNode.element.text?.body\n    return {\n      message: () =>\n        `expected ${received}.element.text.body to be \"${text}\", but it was \"${textBody}\"`,\n      pass: textBody === text,\n    }\n  },\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,YAAY;AACnC,SAASC,eAAe,QAAQ,cAAc;AAE9C,SAASC,iBAAiB;AAE1B,SAEEC,KAAK,IAAIC,UAAU,EACnBC,KAAK,IAAIC,UAAU,EACnBC,OAAO,EACPC,kBAAkB,EAElBC,IAAI,IAAIC,SAAS;AAEnB,SAAkBC,OAAO,EAAEC,SAAS,EAAEC,WAAW;AACjD,SAASC,aAAa;AACtB,SAASC,OAAO;AAEhB,MAAMC,gBAAgB,GAAG,kBAAkB;AAC3C,MAAMC,gBAAgB,GAAG,kBAAkB;AAC3C;AACA,MAAMC,KAAK,GAAGC,KAAK,CAAC,CAClBC,IAAI,CAAC,GAAG,CAAC,EACTD,KAAK,CAAC,CACJC,IAAI,CAAC,GAAG,CAAC,CACV,CAAC,CACH,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAG,IAAIV,OAAO,CACtBM,gBAAgB,EAChB,IAAIL,SAAS,CAACK,gBAAgB,EAAE,CAC9BC,KAAK,EACL,IAAIN,SAAS,CAACK,gBAAgB,CAAC,EAC/B,IAAIL,SAAS,CAACK,gBAAgB,CAAC,EAC/B,IAAIL,SAAS,CAACK,gBAAgB,CAAC,CAChC,CACH,CAAC;AAEDK,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,EAAE,CAAC,uBAAuB,EAAE,MAAM;IAChC,MAAMC,IAAI,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7BC,MAAM,CAACF,IAAI,CAAC,CAACG,YAAY,CAAC,GAAG,CAAC;EAChC,CAAC,CAAC;EAEFJ,EAAE,CAAC,oBAAoB,EAAE,MAAM;IAC7B,MAAMC,IAAI,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChCC,MAAM,CAACF,IAAI,CAAC,CAACG,YAAY,CAAC,GAAG,CAAC;EAChC,CAAC,CAAC;EAEFJ,EAAE,CAAC,qCAAqC,EAAE,MAAM;IAC9C,MAAMC,IAAI,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnCC,MAAM,CAACF,IAAI,CAAC,CAACI,aAAa,CAAC,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFN,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,EAAE,CAAC,uBAAuB,EAAE,MAAM;IAChC,MAAMM,QAAQ,GAAGX,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEV,IAAI,CAAC,KAAK,CAAC,EAAEJ,gBAAgB,CAAC;IAChEU,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,KAAK,CAAC;;IAE/C;IACAD,MAAM,CAACG,QAAQ,CAAC,CAACE,GAAG,CAACC,aAAa,CAACd,KAAK,CAAC;IACzCQ,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACO,aAAa,CAACd,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7D,CAAC,CAAC;EAEFF,EAAE,CAAC,oBAAoB,EAAE,MAAM;IAC7B,MAAMM,QAAQ,GAAGX,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEV,IAAI,CAAC,KAAK,CAAC,EAAEJ,gBAAgB,CAAC;IACnEU,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,KAAK,CAAC;;IAElD;IACAD,MAAM,CAACG,QAAQ,CAAC,CAACE,GAAG,CAACC,aAAa,CAACd,KAAK,CAAC;IACzCQ,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACO,aAAa,CAACd,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3DC,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACM,GAAG,CAACC,aAAa,CAACd,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/DC,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACO,aAAa,CAACd,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjEC,MAAM,CAACG,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACM,GAAG,CAACC,aAAa,CAACd,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC;EAEFF,EAAE,CAAC,mCAAmC,EAAE,MAAM;IAC5CG,MAAM,CAAC,MAAMR,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEV,IAAI,CAAC,KAAK,CAAC,EAAEJ,gBAAgB,CAAC,CAAC,CAACiB,OAAO,CACtE,gDACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFX,QAAQ,CAAC,2BAA2B,EAAE,MAAM;EAC1CC,EAAE,CAAC,sCAAsC,EAAE,MAAM;IAC/C,MAAMC,IAAI,GAAGU,UAAU,CAAC,CAAC;IACzB,MAAMC,CAAC,GAAGX,IAAI,CAACY,aAAa;IAE5BV,MAAM,CAACS,CAAC,CAACE,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxDyB,MAAM,CAACS,CAAC,CAACI,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACzCZ,MAAM,CAACS,CAAC,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CACtD,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;IACFZ,MAAM,CAACS,CAAC,CAACS,KAAK,CAAC,CAACN,OAAO,CAAC;MACtBD,KAAK,EAAE,CACL;QACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;QACvCC,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,CACF;MACDR,IAAI,EAAE,CACJ;QACEK,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,EACD;QACEH,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzB,EAAE,CAAC,0CAA0C,EAAE,MAAM;IACnD,MAAMC,IAAI,GAAGyB,cAAc,CAAC,CAAC;IAC7B,MAAMd,CAAC,GAAGX,IAAI,CAACY,aAAa;IAE5BV,MAAM,CAACS,CAAC,CAACE,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxDyB,MAAM,CAACS,CAAC,CAACI,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACzCZ,MAAM,CAACS,CAAC,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CACtD,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;IACFZ,MAAM,CAACS,CAAC,CAACS,KAAK,CAAC,CAACN,OAAO,CAAC;MACtBD,KAAK,EAAE,CACL;QACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;QACvCC,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,CACF;MACDR,IAAI,EAAE,CACJ;QACEK,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,EACD;QACEH,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzB,EAAE,CAAC,2CAA2C,EAAE,MAAM;IACpD;IACA,MAAMC,IAAI,GAAGU,UAAU,CAAC,CAAC;IACzBR,MAAM,CAACF,IAAI,CAACY,aAAa,CAAC,CAACJ,aAAa,CAACR,IAAI,CAACY,aAAa,CAAC;EAC9D,CAAC,CAAC;EAEFb,EAAE,CAAC,+CAA+C,EAAE,MAAM;IACxD;IACA,MAAMC,IAAI,GAAGyB,cAAc,CAAC,CAAC;IAC7BvB,MAAM,CAACF,IAAI,CAACY,aAAa,CAAC,CAACJ,aAAa,CAACR,IAAI,CAACY,aAAa,CAAC;EAC9D,CAAC,CAAC;EAEFb,EAAE,CAAC,yCAAyC,EAAE,MAAM;IAClD,MAAMC,IAAI,GAAGJ,IAAI,CAAC,KAAK,CAAC;IACxBM,MAAM,CAAC,MAAMF,IAAI,CAACY,aAAa,CAAC,CAACH,OAAO,CACtC,mDACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFX,QAAQ,CAAC,kCAAkC,EAAE,MAAM;EACjDC,EAAE,CAAC,uCAAuC,EAAE,MAAM;IAChD,MAAM2B,oBAAoB,GAAG;MAC3BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;UACRC,CAAC,EAAE;YAAEC,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCC,CAAC,EAAE;YAAEF,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCE,IAAI,EAAE;YAAEH,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UAC1CG,KAAK,EAAE;YAAEJ,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe;QAC5C;MACF,CAAC,CAAC;MACFlB,IAAI,EAAE;QAAEA,IAAI,EAAEzB;MAAQ,CAAC;MACvB+C,QAAQ,EAAE,EAAE;MACZC,iBAAiB,EAAE;IACrB,CAAC;IACD,MAAMvC,IAAI,GAAGwC,kBAAkB,CAACd,oBAAoB,CAAC;IACrD,MAAMe,OAAO,GAAGzC,IAAI,CAAC0C,oBAAoB;;IAEzC;IACAxC,MAAM,CAACuC,OAAO,CAACd,IAAI,CAAC,CAACb,OAAO,CAACY,oBAAoB,CAACC,IAAI,CAAC;;IAEvD;IACAzB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACpEyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;IACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;MAClCD,KAAK,EAAE,CACL;QACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;QACvCC,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,CACF;MACDR,IAAI,EAAE,CACJ;QACEK,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,EACD;QACEH,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;;IAEF;IACAtB,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAACK,MAAM,CAAC,CAAC7B,OAAO,CAAC,CAAC,CAAC;;IAE1C;IACAZ,MAAM,CAACuC,OAAO,CAACF,iBAAiB,CAAC,CAACzB,OAAO,CACvCY,oBAAoB,CAACa,iBACvB,CAAC;EACH,CAAC,CAAC;EAEFxC,EAAE,CAAC,2CAA2C,EAAE,MAAM;IACpD,MAAM2B,oBAAoB,GAAG;MAC3BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;UACRC,CAAC,EAAE;YAAEC,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCC,CAAC,EAAE;YAAEF,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCE,IAAI,EAAE;YAAEH,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UAC1CG,KAAK,EAAE;YAAEJ,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe;QAC5C;MACF,CAAC,CAAC;MACFlB,IAAI,EAAE,IAAI;MACVsB,QAAQ,EAAE,CAAC;QAAEM,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE,KAAK;QAAE7B,IAAI,EAAE;UAAEA,IAAI,EAAEzB;QAAQ;MAAE,CAAC,CAAC;MACnEgD,iBAAiB,EAAE;IACrB,CAAC;IACD,MAAMvC,IAAI,GAAGwC,kBAAkB,CAACd,oBAAoB,CAAC;IACrD,MAAMe,OAAO,GAAGzC,IAAI,CAAC0C,oBAAoB;;IAEzC;IACAxC,MAAM,CAACuC,OAAO,CAACd,IAAI,CAAC,CAACb,OAAO,CAACY,oBAAoB,CAACC,IAAI,CAAC;;IAEvD;IACAzB,MAAM,CAACuC,OAAO,CAACzB,IAAI,CAAC,CAACF,OAAO,CAAC,IAAI,CAAC;;IAElC;IACAZ,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC9B,OAAO,CACzCY,oBAAoB,CAACY,QAAQ,CAAC,CAAC,CAAC,CAACM,OACnC,CAAC;IACD1C,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC/B,OAAO,CACtCY,oBAAoB,CAACY,QAAQ,CAAC,CAAC,CAAC,CAACO,IACnC,CAAC;IACD3C,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACH,KAAK,CAAC,CAACC,OAAO,CAAC,CAC7CrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAC9B,CAAC;IACFyB,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACD,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAChEZ,MAAM,CACJuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAC/D,CAAC,CAACH,OAAO,CAAC,CACR,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;IACFZ,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACI,KAAK,CAAC,CAACN,OAAO,CAAC;MAC7CD,KAAK,EAAE,CACL;QACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;QACvCC,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,CACF;MACDR,IAAI,EAAE,CACJ;QACEK,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC,EACD;QACEH,WAAW,EAAE,SAAS;QACtBE,UAAU,EAAE,QAAQ;QACpBC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;;IAEF;IACAtB,MAAM,CAACuC,OAAO,CAACF,iBAAiB,CAAC,CAACzB,OAAO,CACvCY,oBAAoB,CAACa,iBACvB,CAAC;EACH,CAAC,CAAC;EAEFxC,EAAE,CAAC,8BAA8B,EAAE,MAAM;IACvC,MAAM2B,oBAAoB,GAAG;MAC3BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;UACRC,CAAC,EAAE;YAAEC,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCC,CAAC,EAAE;YAAEF,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCE,IAAI,EAAE;YAAEH,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UAC1CG,KAAK,EAAE;YAAEJ,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe;QAC5C;MACF,CAAC,CAAC;MACFlB,IAAI,EAAE;QAAEA,IAAI,EAAEzB;MAAQ,CAAC;MACvB+C,QAAQ,EAAE,EAAE;MACZC,iBAAiB,EAAE;IACrB,CAAC;IACD;IACA,MAAMvC,IAAI,GAAGwC,kBAAkB,CAACd,oBAAoB,CAAC;IACrDxB,MAAM,CAACF,IAAI,CAAC0C,oBAAoB,CAAC,CAAClC,aAAa,CAACR,IAAI,CAAC0C,oBAAoB,CAAC;EAC5E,CAAC,CAAC;EAEF3C,EAAE,CAAC,yCAAyC,EAAE,MAAM;IAClD,MAAMC,IAAI,GAAGJ,IAAI,CAAC,KAAK,CAAC;IACxBM,MAAM,CAAC,MAAMF,IAAI,CAAC0C,oBAAoB,CAAC,CAACjC,OAAO,CAC7C,yDACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFX,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzC,MAAMgD,oBAAoB,GAAG;IAC3BF,OAAO,EAAE,KAAK;IACdC,IAAI,EAAE,EAAE;IACR7B,IAAI,EAAE;MAAEA,IAAI,EAAEzB;IAAQ;EACxB,CAAsB;EACtB,MAAMwD,kBAAkB,GAAG;IACzBH,OAAO,EAAE,IAAI;IACbC,IAAI,EAAE,KAAK;IACX7B,IAAI,EAAE;MAAEA,IAAI,EAAEzB;IAAQ;EACxB,CAAsB;EACtB,MAAMyD,0BAA0B,GAAG;IACjCJ,OAAO,EAAE,IAAI;IACbC,IAAI,EAAE,KAAK;IACX7B,IAAI,EAAE;MAAEA,IAAI,EAAEzB;IAAQ;EACxB,CAAsB;EAEtBO,QAAQ,CAAC,YAAY,EAAE,MAAM;IAC3BmD,IAAI,CAAC,+CAA+C,EAAE,MAAM;MAC1D,MAAMjD,IAAI,GAAGU,UAAU,CAAC,CAAC;MACzB,MAAMwC,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACL,oBAAoB,EAAEtD,gBAAgB,CAAC;MACzE,MAAMmB,CAAC,GAAGuC,OAAO,CAACtC,aAAa;MAE/BV,MAAM,CAACS,CAAC,CAACE,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MACpEyB,MAAM,CAACS,CAAC,CAACI,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;MACzCZ,MAAM,CAACS,CAAC,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CACtD,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;MACFZ,MAAM,CAACS,CAAC,CAACS,KAAK,CAAC,CAACN,OAAO,CAAC;QACtBD,KAAK,EAAE,CACL;UACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;UACvCC,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC,CACF;QACDR,IAAI,EAAE,CACJ;UACEK,WAAW,EAAE,SAAS;UACtBE,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC,EACD;UACEH,WAAW,EAAE,SAAS;UACtBE,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFyB,IAAI,CAAC,0DAA0D,EAAE,MAAM;MACrE,MAAMjD,IAAI,GAAGU,UAAU,CAAC,CAAC;MACzBR,MAAM,CAAC,MACLF,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CACxD,CAAC,CAACiB,OAAO,CACP,gEACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,gBAAgB,EAAE,MAAM;IAC/BmD,IAAI,CAAC,+CAA+C,EAAE,MAAM;MAC1D,MAAMjD,IAAI,GAAGyB,cAAc,CAAC,CAAC;MAC7B,MAAMyB,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACL,oBAAoB,EAAEtD,gBAAgB,CAAC;MACzE,MAAMmB,CAAC,GAAGuC,OAAO,CAACtC,aAAa;MAE/BV,MAAM,CAACS,CAAC,CAACE,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MACpEyB,MAAM,CAACS,CAAC,CAACI,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;MACzCZ,MAAM,CAACS,CAAC,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CACtD,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;MACFZ,MAAM,CAACS,CAAC,CAACS,KAAK,CAAC,CAACN,OAAO,CAAC;QACtBD,KAAK,EAAE,CACL;UACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;UACvCC,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC,CACF;QACDR,IAAI,EAAE,CACJ;UACEK,WAAW,EAAE,SAAS;UACtBE,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC,EACD;UACEH,WAAW,EAAE,SAAS;UACtBE,UAAU,EAAE,QAAQ;UACpBC,IAAI,EAAE;QACR,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFyB,IAAI,CAAC,0DAA0D,EAAE,MAAM;MACrE,MAAMjD,IAAI,GAAGyB,cAAc,CAAC,CAAC;MAC7BvB,MAAM,CAAC,MACLF,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CACxD,CAAC,CAACiB,OAAO,CACP,gEACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,oBAAoB,EAAE,MAAM;IACnC,MAAMsD,gBAAgB,GAAGA,CACvBd,QAA8B,EAC9BtB,IAAiB,MACQ;MACzBsB,QAAQ,EAAEA,QAAQ,IAAI,EAAE;MACxBtB,IAAI,EAAEA,IAAI,GAAG;QAAEA;MAAK,CAAC,GAAG,IAAI;MAC5BW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;UACRC,CAAC,EAAE;YAAEC,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCC,CAAC,EAAE;YAAEF,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UACvCE,IAAI,EAAE;YAAEH,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe,CAAC;UAC1CG,KAAK,EAAE;YAAEJ,KAAK,EAAE,GAAG;YAAEC,IAAI,EAAE;UAAe;QAC5C;MACF,CAAC,CAAC;MACFK,iBAAiB,EAAE;IACrB,CAAC,CAAC;IAEFzC,QAAQ,CAAC,wCAAwC,EAAE,MAAM;MACvDmD,IAAI,CAAC,4DAA4D,EAAE,MAAM;QACvE,MAAMjD,IAAI,GAAGwC,kBAAkB,CAC7BY,gBAAgB,CAAC,CAACJ,0BAA0B,CAAC,CAC/C,CAAC;QACD,MAAME,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CAAC;QACvE,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACH,KAAK,CAAC,CAACC,OAAO,CAAC,CAC7CrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC1C,CAAC;QACFyB,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACD,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAChEZ,MAAM,CACJuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAC/D,CAAC,CAACH,OAAO,CAAC,CACR,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACI,KAAK,CAAC,CAACN,OAAO,CAAC;UAC7CD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,8EAA8E,EAAE,MAAM;QACzF,MAAMjD,IAAI,GAAGwC,kBAAkB,CAC7BY,gBAAgB,CAAC,CAACL,kBAAkB,EAAEC,0BAA0B,CAAC,CACnE,CAAC;QACD,MAAME,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CAAC;QACvE,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACH,KAAK,CAAC,CAACC,OAAO,CAAC,CAC7CrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC1C,CAAC;QACFyB,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACD,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAChEZ,MAAM,CACJuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAC/D,CAAC,CAACH,OAAO,CAAC,CACR,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACI,KAAK,CAAC,CAACN,OAAO,CAAC;UAC7CD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,iFAAiF,EAAE,MAAM;QAC5F,MAAMjD,IAAI,GAAGwC,kBAAkB,CAACY,gBAAgB,CAACC,SAAS,EAAE9D,OAAO,CAAC,CAAC;QACrE,MAAM2D,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CAAC;QACvE,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAClCrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC1C,CAAC;QACFyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;UAClCD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,wEAAwE,EAAE,MAAM;QACnF,MAAMjD,IAAI,GAAGwC,kBAAkB,CAC7BY,gBAAgB,CAAC,CACfJ,0BAA0B,EAC1BA,0BAA0B,CAC3B,CACH,CAAC;QACD,MAAME,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CAAC;QACvE,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACpEyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;UAClCD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,mEAAmE,EAAE,MAAM;QAC9E,MAAMjD,IAAI,GAAGwC,kBAAkB,CAACY,gBAAgB,CAAC,CAAC,CAAC;QACnD,MAAMF,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAACJ,kBAAkB,EAAEvD,gBAAgB,CAAC;QACvE,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACpEyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;UAClCD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF1B,QAAQ,CAAC,2CAA2C,EAAE,MAAM;MAC1DmD,IAAI,CAAC,4DAA4D,EAAE,MAAM;QACvE,MAAMjD,IAAI,GAAGwC,kBAAkB,CAACY,gBAAgB,CAAC,CAACL,kBAAkB,CAAC,CAAC,CAAC;QACvE,MAAMG,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAC/BL,oBAAoB,EACpBtD,gBACF,CAAC;QACD,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACH,KAAK,CAAC,CAACC,OAAO,CAAC,CAC7CrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC1C,CAAC;QACFyB,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACD,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAChEZ,MAAM,CACJuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAC/D,CAAC,CAACH,OAAO,CAAC,CACR,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACtB,IAAI,CAACI,KAAK,CAAC,CAACN,OAAO,CAAC;UAC7CD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,6CAA6C,EAAE,MAAM;QACxD,MAAMjD,IAAI,GAAGwC,kBAAkB,CAACY,gBAAgB,CAACC,SAAS,EAAE9D,OAAO,CAAC,CAAC;QACrE,MAAM2D,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAC/BL,oBAAoB,EACpBtD,gBACF,CAAC;QACD,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAClCrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAC1C,CAAC;QACFyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;UAClCD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFyB,IAAI,CAAC,mEAAmE,EAAE,MAAM;QAC9E,MAAMjD,IAAI,GAAGwC,kBAAkB,CAACY,gBAAgB,CAAC,CAAC,CAAC;QACnD,MAAMF,OAAO,GAAGlD,IAAI,CAACmD,YAAY,CAC/BL,oBAAoB,EACpBtD,gBACF,CAAC;QACD,MAAMiD,OAAO,GAAGS,OAAO,CAACR,oBAAoB;QAE5CxC,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEH,KAAK,CAAC,CAACC,OAAO,CAAC,CAACrC,eAAe,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACpEyB,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAED,OAAO,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACrDZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEA,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAClE,CAAC,KAAK,EAAE,GAAG,CAAC,EACZ,CAAC,KAAK,EAAE,GAAG,CAAC,CACb,CAAC;QACFZ,MAAM,CAACuC,OAAO,CAACzB,IAAI,EAAEI,KAAK,CAAC,CAACN,OAAO,CAAC;UAClCD,KAAK,EAAE,CACL;YACEQ,WAAW,EAAE/B,aAAa,CAACgC,YAAY;YACvCC,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,CACF;UACDR,IAAI,EAAE,CACJ;YACEK,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC,EACD;YACEH,WAAW,EAAE,SAAS;YACtBE,UAAU,EAAE,QAAQ;YACpBC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFzB,EAAE,CAAC,yCAAyC,EAAE,MAAM;IAClD,MAAMC,IAAI,GAAGJ,IAAI,CAAC,KAAK,CAAC;IACxBM,MAAM,CAAC,MACLF,IAAI,CAACmD,YAAY,CAACL,oBAAoB,EAAEtD,gBAAgB,CAC1D,CAAC,CAACiB,OAAO,CAAC,wDAAwD,CAAC;EACrE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFX,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9B,IAAIwD,SAA2B;EAE/BC,UAAU,CAAC,MAAM;IACfD,SAAS,GAAGE,IAAI,CAACC,KAAK,CAACC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC;EACjD,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAM;IACdL,SAAS,CAACM,WAAW,CAAC,CAAC;EACzB,CAAC,CAAC;EAEF7D,EAAE,CAAC,0CAA0C,EAAE,YAAY;IACzD,MAAM8D,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,CAAC;;IAE7C;IACA;IACAS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAGJ,KAAK,CAACC,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAgB;IAClDC,MAAM,CAAC+D,KAAK,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAAC3D,GAAG,CAAC4D,QAAQ,CAAC,CAAC;IAE7CjE,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EAEFjE,EAAE,CAAC,kDAAkD,EAAE,MAAM;IAC3D,MAAM8D,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,CAAC;IAE7CS,MAAM,CAAC2D,KAAK,CAACS,cAAc,CAAC,CAACN,IAAI,CAACvE,gBAAgB,CAAC;IACnDS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACS,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC1DS,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACG,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC7DS,MAAM,CAAC2D,KAAK,CAACW,KAAK,CAACD,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC3DS,MAAM,CAAC2D,KAAK,CAACY,MAAM,CAACF,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC5DS,MAAM,CAAC2D,KAAK,CAACa,IAAI,CAACH,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;EAC5D,CAAC,CAAC;EAEFM,EAAE,CAAC,iEAAiE,EAAE,YAAY;IAChFuD,SAAS,CAACqB,kBAAkB,CAAC,OAAO;MAClCC,QAAQ,EAAE;QACRC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CAAC;IAEH,MAAMhB,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,CAAC;IAE7CS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACO,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;IACrC9D,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EAEFjE,EAAE,CAAC,iEAAiE,EAAE,YAAY;IAChFuD,SAAS,CAACqB,kBAAkB,CAAC,OAAO;MAClCC,QAAQ,EAAE;QACRC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CAAC;IAEH,MAAMhB,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,CAAC;;IAE7C;IACA;IACAS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAGJ,KAAK,CAACC,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAgB;IAClDC,MAAM,CAAC+D,KAAK,CAACxB,OAAO,CAACqC,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;IAEzC7E,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EAEFjE,EAAE,CAAC,iEAAiE,EAAE,YAAY;IAChFuD,SAAS,CAACqB,kBAAkB,CAAC,OAAO;MAClCC,QAAQ,EAAE;QACRC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CAAC;IAEH,MAAMhB,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,CAAC;;IAE7C;IACA;IACAS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAGJ,KAAK,CAACC,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAgB;IAClDC,MAAM,CAAC+D,KAAK,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAAC3D,GAAG,CAAC4D,QAAQ,CAAC,CAAC;IAE7CjE,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EAEFjE,EAAE,CAAC,wFAAwF,EAAE,YAAY;IACvGuD,SAAS,CAACqB,kBAAkB,CAAC,OAAO;MAClCC,QAAQ,EAAE;QACRC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CAAC;IAEH,MAAMhB,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,EAAE,KAAK,CAAC;IAEpDS,MAAM,CAAC2D,KAAK,CAACC,IAAI,CAACO,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;IACrC9D,MAAM,CAAC2D,KAAK,CAACO,OAAO,CAACC,OAAO,CAAC,CAACL,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EAEFjE,EAAE,CAAC,sDAAsD,EAAE,YAAY;IACrE,MAAMiF,IAAI,GAAG9F,SAAS,CAAC+F,MAAM,CAAC;MAC5BC,KAAK,EACH;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMrB,KAAK,GAAG1E,OAAO,CAAC0E,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC;IACrC3D,MAAM,CAAC2D,KAAK,CAACmB,IAAI,CAAC,CAACb,QAAQ,CAAC,CAAC;;IAE7B;IACA,MAAMgB,MAAM,GAAGhG,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB,EAAE,KAAK,EAAE4D,SAAS,EAAE2B,IAAI,CAAC;IACtE9E,MAAM,CAACiF,MAAM,CAACH,IAAI,CAAC,CAACzE,GAAG,CAAC4D,QAAQ,CAAC,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFrE,QAAQ,CAAC,kCAAkC,EAAE,MAAM;EACjDC,EAAE,CAAC,uDAAuD,EAAE,MAAM;IAChE;IACA,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC;IACF,MAAMC,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC,CAACC,wBAAwB,CAAClG,gBAAgB,CAAC;;IAE5C;IACAS,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,aAAa,CAAC;IAC9DD,MAAM,CAACsF,OAAO,CAACI,WAAW,CAAC,CAAC,CAACxD,IAAI,CAAC,CAAC4B,IAAI,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC;EAEFjE,EAAE,CAAC,mDAAmD,EAAE,MAAM;IAC5D;IACA,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC;IACF,MAAMC,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAChD,CAAC,CAACC,wBAAwB,CAAClG,gBAAgB,CAAC;;IAE5C;IACAS,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC,CAAC;IAClDF,MAAM,CAACsF,OAAO,CAACI,WAAW,CAAC,CAAC,CAACxD,IAAI,CAAC,CAAC4B,IAAI,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFlE,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnCC,EAAE,CAAC,6BAA6B,EAAE,MAAM;IACtC,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC;IACF,MAAMC,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAgB;IACzDC,MAAM,CAACgD,OAAO,CAAC,CAAC/C,YAAY,CAAC,aAAa,CAAC;;IAE3C;IACAD,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC+B,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACvD9D,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAACgC,UAAU,CAAC,CAAC9B,IAAI,CAACX,SAAS,CAAC;IAC/CnD,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAACiC,kBAAkB,CAAC,CAAC/B,IAAI,CAACX,SAAS,CAAC;IACvDnD,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;IACnEU,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACnE9D,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;IACtEU,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACtE9D,MAAM,CAACgD,OAAO,CAACqB,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IACvDS,MAAM,CAACsF,OAAO,CAACpB,OAAO,CAACyB,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;EAC5D,CAAC,CAAC;EAEFO,EAAE,CAAC,2BAA2B,EAAE,MAAM;IACpC,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAAEkH,QAAQ,EAAE,CAAC;IAAE,CAAC,CAAC;IACrD,MAAMR,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC,CAAC6B,WAAW,CAAC,CAAC;;IAE7B;IACA7E,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC+B,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACvD9D,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAACgC,UAAU,CAAC,CAAC9B,IAAI,CAACX,SAAS,CAAC;IAC/CnD,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAACiC,kBAAkB,CAAC,CAAC/B,IAAI,CAACX,SAAS,CAAC;IACvDnD,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;IACnEU,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACnE9D,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;IACtEU,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE4F,WAAW,CAAC,CAAC7B,IAAI,CAAC,gBAAgB,CAAC;IACtE9D,MAAM,CAACgD,OAAO,CAACqB,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IACvDS,MAAM,CAACsF,OAAO,CAACpB,OAAO,CAACyB,WAAW,CAAC,CAAC7B,IAAI,CAACxE,gBAAgB,CAAC;EAC5D,CAAC,CAAC;EAEFO,EAAE,CAAC,8EAA8E,EAAE,MAAM;IACvF,MAAMyF,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,eAAe,EACfJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QACRC,UAAU,EAAE;UACVC,QAAQ,EAAE,IAAI;UACdC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAE;QACR;MACF;IACF,CAAC,CAAC,EACFV,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC,CAACD,UAAU,CACV,eAAe,EACfJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC,EACFG,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACjC,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC,CAAC6B,WAAW,CAAC,CAAC;IAC7B7E,MAAM,CAACgD,OAAO,CAACmD,UAAU,CAACnE,IAAI,CAAC,CAAC8B,IAAI,CAAC,YAAY,CAAC;IAClD9D,MAAM,CAACgD,OAAO,CAACa,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;IAEvC,MAAMsC,QAAQ,GAAGd,OAAO,CAACC,UAAU,CACjC,mBAAmB,EACnBJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QACRO,YAAY,EAAE,CAAC;MACjB;IACF,CAAC,CAAC,EACFb,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMc,aAAa,GAAGF,QAAQ,CAACxC,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IAC9DC,MAAM,CAACsG,aAAa,CAAC,CAACzB,WAAW,CAAC,CAAC;IACnC7E,MAAM,CAACsG,aAAa,CAACH,UAAU,CAACnE,IAAI,CAAC,CAAC8B,IAAI,CAAC,cAAc,CAAC;IAC1D9D,MAAM,CAACsG,aAAa,CAACzC,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC;EAEFjE,EAAE,CAAC,0FAA0F,EAAE,MAAM;IACnG,MAAMyF,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,eAAe,EACfJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QACRC,UAAU,EAAE;UACVC,QAAQ,EAAE,IAAI;UACdC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAE;QACR;MACF;IACF,CAAC,CAAC,EACFV,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC,CAACD,UAAU,CACV,eAAe,EACfJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC,EACFG,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACjC,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC,CAAC6B,WAAW,CAAC,CAAC;IAC7B7E,MAAM,CAACgD,OAAO,CAACmD,UAAU,CAACnE,IAAI,CAAC,CAAC8B,IAAI,CAAC,YAAY,CAAC;IAClD9D,MAAM,CAACgD,OAAO,CAACa,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;IAEvC,MAAMsC,QAAQ,GAAGd,OAAO,CAACC,UAAU,CACjC,mBAAmB,EACnBJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QACRC,UAAU,EAAE;UACVC,QAAQ,EAAE,IAAI;UACdC,KAAK,EAAE,aAAa;UACpBC,IAAI,EAAE;QACR;MACF;IACF,CAAC,CAAC,EACFV,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMc,aAAa,GAAGF,QAAQ,CAACxC,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IAC9DC,MAAM,CAACsG,aAAa,CAAC,CAACzB,WAAW,CAAC,CAAC;IACnC7E,MAAM,CAACsG,aAAa,CAACH,UAAU,CAACnE,IAAI,CAAC,CAAC8B,IAAI,CAAC,YAAY,CAAC;IACxD9D,MAAM,CAACsG,aAAa,CAACzC,QAAQ,CAACpB,MAAM,CAAC,CAACqB,IAAI,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC;EAEFjE,EAAE,CAAC,qDAAqD,EAAE,MAAM;IAC9D,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC;IACF,MAAMkB,oBAAoB,GAAG,sBAAsB;IACnD,MAAMjB,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEe,oBAAoB,CACpD,CAAC;IAED,MAAMvD,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAgB;IACzDC,MAAM,CAACgD,OAAO,CAAC,CAAC6B,WAAW,CAAC,CAAC;;IAE7B;IACA7E,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEsE,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC3ES,MAAM,CAACgD,OAAO,CAACqB,gBAAgB,CAAC,CAACP,IAAI,CAACyC,oBAAoB,CAAC;EAC7D,CAAC,CAAC;EAEF1G,EAAE,CAAC,mDAAmD,EAAE,MAAM;IAC5D,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAAEkH,QAAQ,EAAE,CAAC;IAAE,CAAC,CAAC;IACrD,MAAMS,oBAAoB,GAAG,sBAAsB;IACnD,MAAMjB,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEe,oBAAoB,CACpD,CAAC;IAED,MAAMvD,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC,CAAC6B,WAAW,CAAC,CAAC;;IAE7B;IACA7E,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEsE,gBAAgB,CAAC,CAACP,IAAI,CAACvE,gBAAgB,CAAC;IAC3ES,MAAM,CAACgD,OAAO,CAACqB,gBAAgB,CAAC,CAACP,IAAI,CAACyC,oBAAoB,CAAC;EAC7D,CAAC,CAAC;EAEF1G,EAAE,CAAC,2CAA2C,EAAE,MAAM;IACpD,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE,CAAC;MAC7CO,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMN,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAgB;IACzDC,MAAM,CAACgD,OAAO,CAAC4C,UAAU,CAAC,CAAC9B,IAAI,CAAC,cAAc,CAAC;EACjD,CAAC,CAAC;EAEFjE,EAAE,CAAC,yCAAyC,EAAE,MAAM;IAClD,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCkH,QAAQ,EAAE,CAAC,CAAC;MACZF,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMN,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC4C,UAAU,CAAC,CAAC9B,IAAI,CAAC,cAAc,CAAC;EACjD,CAAC,CAAC;EAEFjE,EAAE,CAAC,6CAA6C,EAAE,MAAM;IACtD,MAAM2G,SAAS,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAC3DF,IAAI,CAACG,GAAG,GAAGtD,IAAI,CAACuD,EAAE,CAAC,MAAML,SAAS,CAAC;IACnC,MAAMtB,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCkH,QAAQ,EAAE,CAAC;IACb,CAAC,CAAC;IACF,MAAMR,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAED,MAAMxC,OAAO,GAAGsC,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;IACvDC,MAAM,CAACgD,OAAO,CAAC6C,kBAAkB,CAAC,CAAC/B,IAAI,CAAC0C,SAAS,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF5G,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EACxCC,EAAE,CAAC,oBAAoB,EAAE,MAAM;IAC7B;IACA,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC;IACF,MAAMC,OAAO,GAAG3F,IAAI,CAAC4F,UAAU,CAC7B,gBAAgB,EAChBL,KAAK,EACLM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC,CAACsB,eAAe,CAAC,gBAAgB,EAAE,EAAE,CAAC;;IAEvC;IACA9G,MAAM,CAACsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,aAAa,CAAC;IAC9DD,MAAM,CAACsF,OAAO,CAACI,WAAW,CAAC,CAAC,CAACxD,IAAI,CAAC,CAAC4B,IAAI,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC;EAEFjE,EAAE,CAAC,qBAAqB,EAAE,MAAM;IAC9B,MAAMiF,IAAI,GAAG9F,SAAS,CAAC+F,MAAM,CAAC;MAC5BC,KAAK,EACH;IACJ,CAAC,CAAC;IACF,MAAMM,OAAO,GAAG3F,IAAI,CAACoH,eAAe,CAACjC,IAAI,EAAE;MACzCT,gBAAgB,EAAE,MAAM;MACxBsB,WAAW,EAAE;IACf,CAAC,CAAC;IACF3F,MAAM,CAACsF,OAAO,CAACR,IAAI,CAAC,CAACzE,GAAG,CAAC4D,QAAQ,CAAC,CAAC;IAEnC,MAAM+C,UAAU,GAAG1B,OAAO,CAACwB,eAAe,CAAC,mBAAmB,EAAE,EAAE,CAAC;IACnE9G,MAAM,CAACgH,UAAU,CAAClC,IAAI,CAAC,CAACb,QAAQ,CAAC,CAAC;EACpC,CAAC,CAAC;EAEFpE,EAAE,CAAC,qCAAqC,EAAE,MAAM;IAC9C,MAAMoH,iBAAiB,GAAG9B,SAAS,CAACvG,UAAU,EAAE;MAC9CkH,QAAQ,EAAE;QAAEO,YAAY,EAAE,CAAC,CAAC;QAAEa,UAAU,EAAE;MAAM,CAAC;MACjDtB,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMuB,IAAI,GAAGhC,SAAS,CAACvG,UAAU,EAAE;MACjCkH,QAAQ,EAAE;QAAEsB,GAAG,EAAE;UAAEnB,KAAK,EAAE;QAAO,CAAC;QAAEiB,UAAU,EAAE;MAAK,CAAC;MACtDtB,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMyB,IAAI,GAAGlC,SAAS,CAACvG,UAAU,EAAE;MACjCkH,QAAQ,EAAE;QAAEsB,GAAG,EAAE;UAAEnB,KAAK,EAAE;QAAO,CAAC;QAAEiB,UAAU,EAAE;MAAK,CAAC;MACtDtB,UAAU,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,MAAMpB,IAAI,GAAGvF,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB;IACzC;IAAA,CACCgG,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MAAEkH,QAAQ,EAAE;QAAEoB,UAAU,EAAE;MAAK;IAAE,CAAC,CAAC,EACzD1B,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE;IAC9C,CAAC,CAAC,EACFG,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAe;MAAE,CAAC;MAC9CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAe;MAAE,CAAC;MAC9CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QAAEoB,UAAU,EAAE;MAAM,CAAC;MAC/BtB,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAe;MAAE,CAAC;MAC9CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE,CAAC;MAC7CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IACA;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChB0B,iBAAiB,EACjBzB,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B,CAAC,CACAD,UAAU,CAAC,gBAAgB,EAAE4B,IAAI,EAAE3B,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACjED,UAAU,CAAC,gBAAgB,EAAE8B,IAAI,EAAE7B,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACjED,UAAU,CACT,gBAAgB,EAChB0B,iBAAiB,EACjBzB,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B,CAAC,CACAD,UAAU,CAAC,gBAAgB,EAAE4B,IAAI,EAAE3B,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEpE,MAAM8B,MAAM,GAAG9C,IAAI,CAACsC,eAAe,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,CAAC,CAAC;IAEzE9G,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACwH,cAAc,CAACrI,SAAS,CAAC;IACxDc,MAAM,CAAEsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;IACtExH,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,aAAa,CAAC;IAC7DD,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,cAAc,CAAC;IAC9DD,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,cAAc,CAAC;IAE9DD,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACwH,cAAc,CAACrI,SAAS,CAAC;IACxDc,MAAM,CAAEsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;IACtExH,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,aAAa,CAAC;IAE7DD,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACwH,cAAc,CAACrI,SAAS,CAAC;IACxDc,MAAM,CAAEsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;IACtExH,MAAM,CACHsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAeoG,UAAU,CAACiB,GAAG,EAAEnB,KAC3D,CAAC,CAACwB,SAAS,CAAC,MAAM,CAAC;EACrB,CAAC,CAAC;EAEF5H,EAAE,CAAC,kDAAkD,EAAE,MAAM;IAC3D;IACA,MAAMqF,KAAK,GAAGC,SAAS,CAACvG,UAAU,EAAE;MAClCwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE,CAAC;MAC7CO,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAMN,OAAO,GAAGrG,OAAO,CAAC0E,KAAK,CAACpE,gBAAgB;IAC5C;IAAA,CACCgG,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QAAE4B,QAAQ,EAAE,CAAC,CAAC;QAAER,UAAU,EAAE;MAAM,CAAC;MAC7CtB,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B,CAAC,CACAD,UAAU,CAAC,gBAAgB,EAAEL,KAAK,EAAEM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClE;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBkH,QAAQ,EAAE;QAAE4B,QAAQ,EAAE,CAAC,CAAC;QAAER,UAAU,EAAE;MAAM,CAAC;MAC7CtB,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC3B,CAAC,CACAD,UAAU,CAAC,gBAAgB,EAAEL,KAAK,EAAEM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAClED,UAAU,CAAC,gBAAgB,EAAEL,KAAK,EAAEM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClE;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE,CAAC;MAC7CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B;IACA;IAAA,CACCD,UAAU,CACT,gBAAgB,EAChBJ,SAAS,CAACvG,UAAU,EAAE;MACpBwG,UAAU,EAAE;QAAE1F,IAAI,EAAE;UAAE2F,IAAI,EAAE;QAAc;MAAE,CAAC;MAC7CO,UAAU,EAAE;IACd,CAAC,CAAC,EACFJ,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAC9B,CAAC;IAEHxF,MAAM,CAAEsF,OAAO,CAAC1B,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;IAEvE,MAAMF,MAAM,GAAGhC,OAAO,CAACwB,eAAe,CAAC,gBAAgB,EAAE,CACvD,gBAAgB,CACjB,CAAC;IAEF9G,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACwH,cAAc,CAACrI,SAAS,CAAC;IACxDc,MAAM,CAAEsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;IACtExH,MAAM,CAACsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACwH,cAAc,CAACrI,SAAS,CAAC;IACxD;IACAc,MAAM,CAAEsH,MAAM,CAAC1D,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAe8D,QAAQ,CAAC,CAAC2D,YAAY,CAAC,CAAC,CAAC;EACxE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF5H,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EACpCC,EAAE,CAAC,sBAAsB,EAAE,MAAM;IAC/B;IACAG,MAAM,CAACL,IAAI,CAAC+F,WAAW,CAAC,CAAC,CAAC,CAAC9E,OAAO,CAChC,IAAI+G,GAAG,CAAC,CACLhI,IAAI,CAACiE,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAiBwC,OAAO,EAC5C5C,IAAI,CAACiE,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAiBwC,OAAO,CACjD,CACH,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,SAAS7C,IAAIA,CAACA,IAAY,EAA+C;EAAA,IAA7CiG,WAAW,GAAAiC,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGtI,gBAAgB;EACxD,MAAMiD,OAAO,GAAG4C,SAAS,CAACtG,OAAO,EAAE;IAAEa,IAAI,EAAE;MAAE2F,IAAI,EAAE3F;IAAK;EAAE,CAAC,CAAC;EAC5D,OAAO,IAAIP,WAAW,CACpBoD,OAAO,EACPzD,kBAAkB,CAACiG,MAAM,CAAC,CAAC,EAC3BY,WAAW,EACXpG,gBACF,CAAC;AACH;;AAEA;AACA,SAASE,KAAKA,CAAA,EAGD;EAAA,IAFXoE,QAAmB,GAAA+D,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAG,EAAE;EAAA,IACxBjC,WAAW,GAAAiC,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGtI,gBAAgB;EAE9B,OAAO,IAAIJ,SAAS,CAClBK,gBAAgB,EAChBsE,QAAQ,EACRsB,SAAS,CAACzG,UAAU,EAAE,CAAC,CAAC,CAAC,EACzBiH,WACF,CAAC;AACH;;AAEA;AACA,SAASnF,UAAUA,CAAA,EAA8C;EAAA,IAA7CmF,WAAW,GAAAiC,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGtI,gBAAgB;EAChD,MAAMiD,OAAO,GAAG4C,SAAS,CAACtG,OAAO,EAAE;IAAE2B,UAAU,EAAE;MAAEM,IAAI,EAAEzB;IAAQ;EAAE,CAAC,CAAC;EACrE,OAAO,IAAIF,WAAW,CACpBoD,OAAO,EACPzD,kBAAkB,CAACiG,MAAM,CAAC,CAAC,EAC3BY,WAAW,EACXpG,gBACF,CAAC;AACH;;AAEA;AACA,SAASgC,cAAcA,CAAA,EAA8C;EAAA,IAA7CoE,WAAW,GAAAiC,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGtI,gBAAgB;EACpD,MAAMiD,OAAO,GAAG4C,SAAS,CAACtG,OAAO,EAAE;IAAE0C,cAAc,EAAE;MAAET,IAAI,EAAEzB;IAAQ;EAAE,CAAC,CAAC;EACzE,OAAO,IAAIF,WAAW,CACpBoD,OAAO,EACPzD,kBAAkB,CAACiG,MAAM,CAAC,CAAC,EAC3BY,WAAW,EACXpG,gBACF,CAAC;AACH;;AAEA;AACA,SAAS+C,kBAAkBA,CACzBxB,IAAyB,EAEZ;EAAA,IADb6E,WAAW,GAAAiC,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGtI,gBAAgB;EAE9B,MAAMiD,OAAO,GAAG4C,SAAS,CAACtG,OAAO,EAAE;IAAEyD,kBAAkB,EAAExB;EAAK,CAAC,CAAC;EAChE,OAAO,IAAI3B,WAAW,CACpBoD,OAAO,EACPzD,kBAAkB,CAACiG,MAAM,CAAC,CAAC,EAC3BY,WAAW,EACXpG,gBACF,CAAC;AACH;;AAEA;AACA,SAASiG,kBAAkBA,CACzBqC,SAAmB,EAEC;EAAA,IADpBxD,gBAAgB,GAAAuD,SAAA,CAAAnF,MAAA,QAAAmF,SAAA,QAAAzE,SAAA,GAAAyE,SAAA,MAAGrI,gBAAgB;EAEnCS,MAAM,CAAC6H,SAAS,CAACpF,MAAM,CAAC,CAACqF,sBAAsB,CAAC,CAAC,CAAC;EAClD,OAAO3C,SAAS,CAACrG,kBAAkB,EAAE;IAAE+I,SAAS;IAAExD;EAAiB,CAAC,CAAC;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,SAASA,CAChB4C,WAIC,EACDC,UAAiB,EACX;EACN,MAAMC,OAAO,GAAG,IAAIF,WAAW,CAACC,UAAU,CAAC;EAC3C,MAAME,KAAK,GAAGH,WAAW,CAACI,MAAM,CAACF,OAAO,EAAE3J,MAAM,CAACyG,MAAM,CAAC,CAAC,CAAC,CAACqD,MAAM,CAAC,CAAC;EACnE,OAAOL,WAAW,CAACM,MAAM,CAACH,KAAK,CAAC;AAClC;;AAEA;;AAUAlI,MAAM,CAACsI,MAAM,CAAC;EACZrI,YAAYA,CAACsI,QAAQ,EAAE7I,IAAI,EAA4B;IACrD,MAAM8I,WAAW,GAAGD,QAAuB;IAC3C,IAAI/J,iBAAiB,CAACgK,WAAW,CAAC,EAAE;MAClC,OAAO;QACLP,OAAO,EAAEA,CAAA,KAAO,YAAWM,QAAS,mCAAkC;QACtEE,IAAI,EAAE;MACR,CAAC;IACH;IAEA,MAAM;MAAEzG;IAAK,CAAC,GAAGwG,WAAW,CAACjG,OAAO;IACpC,IAAIP,IAAI,KAAK,MAAM,EAAE;MACnB,OAAO;QACLiG,OAAO,EAAEA,CAAA,KACN,YAAWM,QAAS,0CAAyCvG,IAAK,EAAC;QACtEyG,IAAI,EAAE;MACR,CAAC;IACH;IAEA,MAAMC,QAAQ,GAAGF,WAAW,CAACjG,OAAO,CAAC7C,IAAI,EAAE2F,IAAI;IAC/C,OAAO;MACL4C,OAAO,EAAEA,CAAA,KACN,YAAWM,QAAS,6BAA4B7I,IAAK,kBAAiBgJ,QAAS,GAAE;MACpFD,IAAI,EAAEC,QAAQ,KAAKhJ;IACrB,CAAC;EACH;AACF,CAAC,CAAC"}