{"version":3,"file":"Quiver.test.js","names":["Field","Utf8","vectorFromArray","cloneDeep","IndexTypeName","Quiver","CATEGORICAL","CATEGORICAL_COLUMN","DATE","DECIMAL","DICTIONARY","FLOAT64","INT64","INTERVAL_DATETIME64","INTERVAL_FLOAT64","INTERVAL_INT64","INTERVAL_UINT64","PERIOD","RANGE","UINT64","UNICODE","TIMEDELTA","EMPTY","MULTI","STYLER","DISPLAY_VALUES","FEWER_COLUMNS","DIFFERENT_COLUMN_TYPES","CATEGORICAL_INTERVAL","NAMED_INDEX","describe","mockElement","data","q","test","expect","cssId","toBeUndefined","cssStyles","caption","dimensions","toStrictEqual","headerRows","headerColumns","dataRows","dataColumns","rows","columns","indexNames","styler","uuid","styles","displayValues","toEqual","getCategoricalOptions","undefined","getCell","type","cssClass","content","field","Map","contentType","pandas_type","UnicodeIndex","numpy_type","meta","displayContent","it","toThrow","dataType","types","getTypeName","firstColumnType","indexType","index","CategoricalIndex","DatetimeIndex","Float64Index","Int64Index","RangeIndex","UInt64Index","format","Uint8Array","Date","UTC","timezone","cell1","cell2","cell3","cell4","table","columnIndex","column","rowIndex","cellValue","push","A","M","Y","h","min","ms","s","L","S","T","H","D","W","Q","INVALID_TYPE","isEmpty","toBe","toArray","map","a","BigInt","num_categories","ordered","getTime","toString","start","step","stop","kind","name","qq","addRows","qClone","mockElement1","mockElement2","q1","q2","q1q2","q2q1","toThrowErrorMatchingSnapshot"],"sources":["../../src/dataframes/Quiver.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Field, Utf8, vectorFromArray } from \"apache-arrow\"\nimport cloneDeep from \"lodash/cloneDeep\"\n\nimport { IndexTypeName, Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  // Types\n  CATEGORICAL,\n  CATEGORICAL_COLUMN,\n  DATE,\n  DECIMAL,\n  DICTIONARY,\n  FLOAT64,\n  INT64,\n  INTERVAL_DATETIME64,\n  INTERVAL_FLOAT64,\n  INTERVAL_INT64,\n  INTERVAL_UINT64,\n  PERIOD,\n  RANGE,\n  UINT64,\n  UNICODE,\n  TIMEDELTA,\n  // Special cases\n  EMPTY,\n  MULTI,\n  STYLER,\n  DISPLAY_VALUES,\n  FEWER_COLUMNS,\n  DIFFERENT_COLUMN_TYPES,\n  CATEGORICAL_INTERVAL,\n  NAMED_INDEX,\n} from \"@streamlit/lib/src/mocks/arrow\"\n\ndescribe(\"Quiver\", () => {\n  describe(\"Public methods\", () => {\n    describe(\"Without Styler\", () => {\n      const mockElement = { data: UNICODE }\n      const q = new Quiver(mockElement)\n\n      test(\"cssId\", () => {\n        expect(q.cssId).toBeUndefined()\n      })\n\n      test(\"cssStyles\", () => {\n        expect(q.cssStyles).toBeUndefined()\n      })\n\n      test(\"caption\", () => {\n        expect(q.caption).toBeUndefined()\n      })\n\n      test(\"dimensions\", () => {\n        expect(q.dimensions).toStrictEqual({\n          headerRows: 1,\n          headerColumns: 1,\n          dataRows: 2,\n          dataColumns: 2,\n          rows: 3,\n          columns: 3,\n        })\n      })\n\n      test(\"indexNames\", () => {\n        const mockElement = { data: NAMED_INDEX }\n        const q = new Quiver(mockElement)\n        expect(q.indexNames).toStrictEqual([\"INDEX\"])\n      })\n    })\n\n    describe(\"With Styler\", () => {\n      const mockElement = {\n        data: STYLER,\n        styler: {\n          uuid: \"FAKE_UUID\",\n          styles: \"FAKE_CSS\",\n          displayValues: DISPLAY_VALUES,\n          caption: \"FAKE_CAPTION\",\n        },\n      }\n      const q = new Quiver(mockElement)\n\n      test(\"cssId\", () => {\n        expect(q.cssId).toEqual(\"T_FAKE_UUID\")\n      })\n\n      test(\"cssStyles\", () => {\n        expect(q.cssStyles).toEqual(\"FAKE_CSS\")\n      })\n\n      test(\"caption\", () => {\n        expect(q.caption).toEqual(\"FAKE_CAPTION\")\n      })\n\n      describe(\"getCategoricalOptions\", () => {\n        test(\"gets all categories for a categorical columns\", () => {\n          const mockElement = { data: CATEGORICAL_COLUMN }\n          const q = new Quiver(mockElement)\n          // \"foo\" and \"bar\" are the two categories available in this column\n          expect(q.getCategoricalOptions(0)).toStrictEqual([\"bar\", \"foo\"])\n        })\n\n        test(\"returns undefined for a non-categorical column\", () => {\n          const mockElement = { data: CATEGORICAL_COLUMN }\n          const q = new Quiver(mockElement)\n          expect(q.getCategoricalOptions(1)).toStrictEqual(undefined)\n        })\n      })\n\n      test(\"dimensions\", () => {\n        expect(q.dimensions).toStrictEqual({\n          headerRows: 1,\n          headerColumns: 1,\n          dataRows: 2,\n          dataColumns: 2,\n          rows: 3,\n          columns: 3,\n        })\n      })\n    })\n\n    describe(\"getCell\", () => {\n      const mockElement = { data: UNICODE }\n      const q = new Quiver(mockElement)\n\n      test(\"blank cell\", () => {\n        expect(q.getCell(0, 0)).toStrictEqual({\n          type: \"blank\",\n          cssClass: \"blank\",\n          content: \"\",\n        })\n      })\n\n      test(\"index cell\", () => {\n        expect(q.getCell(1, 0)).toStrictEqual({\n          type: \"index\",\n          cssClass: \"row_heading level0 row0\",\n          cssId: undefined,\n          content: \"i1\",\n          field: new Field(\"__index_level_0__\", new Utf8(), true, new Map([])),\n          contentType: {\n            pandas_type: IndexTypeName.UnicodeIndex,\n            numpy_type: \"object\",\n            meta: null,\n          },\n        })\n      })\n\n      test(\"columns cell\", () => {\n        expect(q.getCell(0, 1)).toStrictEqual({\n          type: \"columns\",\n          cssClass: \"col_heading level0 col0\",\n          content: \"c1\",\n          contentType: {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n          },\n        })\n      })\n\n      test(\"data cell\", () => {\n        expect(q.getCell(1, 2)).toStrictEqual({\n          type: \"data\",\n          cssClass: \"data row0 col1\",\n          cssId: undefined,\n          content: \"1\",\n          contentType: {\n            pandas_type: \"unicode\",\n            numpy_type: \"object\",\n            meta: null,\n          },\n          field: new Field(\"c2\", new Utf8(), true, new Map([])),\n          displayContent: undefined,\n        })\n      })\n\n      it(\"throws an exception if row index is out of range\", () => {\n        expect(() => q.getCell(5, 0)).toThrow(\"Row index is out of range: 5\")\n      })\n\n      it(\"throws an exception if column index is out of range\", () => {\n        expect(() => q.getCell(0, 5)).toThrow(\n          \"Column index is out of range: 5\"\n        )\n      })\n    })\n\n    describe(\"getTypeName\", () => {\n      describe(\"uses numpy_type\", () => {\n        test(\"period\", () => {\n          const mockElement = { data: PERIOD }\n          const q = new Quiver(mockElement)\n          const dataType = q.types.data[0]\n\n          expect(Quiver.getTypeName(dataType)).toEqual(\"period[Y-DEC]\")\n        })\n\n        test(\"decimal\", () => {\n          const mockElement = { data: DECIMAL }\n          const q = new Quiver(mockElement)\n          const firstColumnType = q.types.data[0]\n\n          expect(Quiver.getTypeName(firstColumnType)).toEqual(\"decimal\")\n        })\n\n        test(\"timedelta\", () => {\n          const mockElement = { data: TIMEDELTA }\n          const q = new Quiver(mockElement)\n          const firstColumnType = q.types.data[0]\n\n          expect(Quiver.getTypeName(firstColumnType)).toEqual(\n            \"timedelta64[ns]\"\n          )\n        })\n\n        test(\"dictionary\", () => {\n          const mockElement = { data: DICTIONARY }\n          const q = new Quiver(mockElement)\n          const firstColumnType = q.types.data[0]\n\n          expect(Quiver.getTypeName(firstColumnType)).toEqual(\"object\")\n        })\n\n        test(\"interval datetime64[ns]\", () => {\n          const mockElement = { data: INTERVAL_DATETIME64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            \"interval[datetime64[ns], right]\"\n          )\n        })\n\n        test(\"interval float64\", () => {\n          const mockElement = { data: INTERVAL_FLOAT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            \"interval[float64, right]\"\n          )\n        })\n\n        test(\"interval int64\", () => {\n          const mockElement = { data: INTERVAL_INT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            \"interval[int64, right]\"\n          )\n        })\n\n        test(\"interval uint64\", () => {\n          const mockElement = { data: INTERVAL_UINT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            \"interval[uint64, right]\"\n          )\n        })\n      })\n\n      describe(\"uses pandas_type\", () => {\n        test(\"categorical\", () => {\n          const mockElement = { data: CATEGORICAL }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.CategoricalIndex\n          )\n        })\n\n        test(\"date\", () => {\n          const mockElement = { data: DATE }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.DatetimeIndex\n          )\n        })\n\n        test(\"float64\", () => {\n          const mockElement = { data: FLOAT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.Float64Index\n          )\n        })\n\n        test(\"int64\", () => {\n          const mockElement = { data: INT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.Int64Index\n          )\n        })\n\n        test(\"range\", () => {\n          const mockElement = { data: RANGE }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.RangeIndex\n          )\n        })\n\n        test(\"uint64\", () => {\n          const mockElement = { data: UINT64 }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.UInt64Index\n          )\n        })\n\n        test(\"unicode\", () => {\n          const mockElement = { data: UNICODE }\n          const q = new Quiver(mockElement)\n          const indexType = q.types.index[0]\n\n          expect(Quiver.getTypeName(indexType)).toEqual(\n            IndexTypeName.UnicodeIndex\n          )\n        })\n      })\n    })\n\n    describe(\"format\", () => {\n      test(\"null\", () => {\n        expect(Quiver.format(null)).toEqual(\"<NA>\")\n      })\n\n      test(\"string\", () => {\n        expect(Quiver.format(\"foo\")).toEqual(\"foo\")\n      })\n\n      test(\"boolean\", () => {\n        expect(Quiver.format(true)).toEqual(\"true\")\n      })\n\n      test(\"float64\", () => {\n        expect(\n          Quiver.format(1.25, {\n            pandas_type: \"float64\",\n            numpy_type: \"float64\",\n          })\n        ).toEqual(\"1.2500\")\n      })\n\n      test(\"int64\", () => {\n        const mockElement = { data: INT64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 2)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"int64\",\n            numpy_type: \"int64\",\n          })\n        ).toEqual(\"1\")\n      })\n\n      test(\"uint64\", () => {\n        const mockElement = { data: UINT64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 2)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"uint64\",\n            numpy_type: \"uint64\",\n          })\n        ).toEqual(\"2\")\n      })\n\n      test(\"bytes\", () => {\n        expect(\n          Quiver.format(new Uint8Array([1, 2, 3]), {\n            pandas_type: \"bytes\",\n            numpy_type: \"bytes\",\n          })\n        ).toEqual(\"1,2,3\")\n      })\n\n      test(\"date\", () => {\n        expect(\n          Quiver.format(new Date(Date.UTC(1970, 0, 1)), {\n            pandas_type: \"date\",\n            numpy_type: \"object\",\n          })\n        ).toEqual(\"1970-01-01\")\n      })\n\n      test(\"datetime\", () => {\n        expect(\n          Quiver.format(0, {\n            pandas_type: \"datetime\",\n            numpy_type: \"datetime64[ns]\",\n          })\n        ).toEqual(\"1970-01-01 00:00:00\")\n      })\n\n      test(\"datetimetz\", () => {\n        expect(\n          Quiver.format(0, {\n            pandas_type: \"datetimetz\",\n            numpy_type: \"datetime64[ns]\",\n            meta: { timezone: \"Europe/Moscow\" },\n          })\n        ).toEqual(\"1970-01-01 03:00:00+03:00\")\n      })\n\n      test(\"datetimetz with offset\", () => {\n        expect(\n          Quiver.format(0, {\n            pandas_type: \"datetimetz\",\n            numpy_type: \"datetime64[ns]\",\n            meta: { timezone: \"+01:00\" },\n          })\n        ).toEqual(\"1970-01-01 01:00:00+01:00\")\n      })\n\n      test(\"interval datetime64[ns]\", () => {\n        const mockElement = { data: INTERVAL_DATETIME64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 0)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"object\",\n            numpy_type: \"interval[datetime64[ns], right]\",\n          })\n        ).toEqual(\"(2017-01-01 00:00:00, 2017-01-02 00:00:00]\")\n      })\n\n      test(\"interval float64\", () => {\n        const mockElement = { data: INTERVAL_FLOAT64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 0)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"object\",\n            numpy_type: \"interval[float64, right]\",\n          })\n        ).toEqual(\"(0.0000, 1.5000]\")\n      })\n\n      test(\"interval int64\", () => {\n        const mockElement = { data: INTERVAL_INT64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 0)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"object\",\n            numpy_type: \"interval[int64, right]\",\n          })\n        ).toEqual(\"(0, 1]\")\n      })\n\n      test(\"interval uint64\", () => {\n        const mockElement = { data: INTERVAL_UINT64 }\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 0)\n\n        expect(\n          Quiver.format(content, {\n            pandas_type: \"object\",\n            numpy_type: \"interval[uint64, right]\",\n          })\n        ).toEqual(\"(0, 1]\")\n      })\n\n      test(\"decimal\", () => {\n        const mockElement = { data: DECIMAL }\n        const q = new Quiver(mockElement)\n        const cell1 = q.getCell(1, 1)\n        expect(\n          Quiver.format(cell1.content, cell1.contentType, cell1.field)\n        ).toEqual(\"1.1\")\n\n        const cell2 = q.getCell(2, 1)\n        expect(\n          Quiver.format(cell2.content, cell2.contentType, cell2.field)\n        ).toEqual(\"10000\")\n\n        const cell3 = q.getCell(1, 2)\n        expect(\n          Quiver.format(cell3.content, cell3.contentType, cell3.field)\n        ).toEqual(\"2.23\")\n\n        const cell4 = q.getCell(2, 2)\n        expect(\n          Quiver.format(cell4.content, cell4.contentType, cell4.field)\n        ).toEqual(\"-0.1\")\n      })\n\n      test(\"timedelta\", () => {\n        const mockElement = { data: TIMEDELTA }\n        const q = new Quiver(mockElement)\n        const cell1 = q.getCell(1, 1)\n        expect(\n          Quiver.format(cell1.content, cell1.contentType, cell1.field)\n        ).toEqual(\"a few seconds\")\n\n        const cell2 = q.getCell(2, 1)\n        expect(\n          Quiver.format(cell2.content, cell2.contentType, cell2.field)\n        ).toEqual(\"4 hours\")\n\n        const cell3 = q.getCell(1, 2)\n        expect(\n          Quiver.format(cell3.content, cell3.contentType, cell3.field)\n        ).toEqual(\"20 days\")\n\n        const cell4 = q.getCell(2, 2)\n        expect(\n          Quiver.format(cell4.content, cell4.contentType, cell4.field)\n        ).toEqual(\"2 hours\")\n      })\n\n      test(\"dictionary\", () => {\n        const mockElement = { data: DICTIONARY }\n        const q = new Quiver(mockElement)\n        const { content, contentType, field } = q.getCell(1, 1)\n        expect(Quiver.format(content, contentType, field)).toEqual(\n          `{\"a\":1,\"b\":2}`\n        )\n      })\n\n      test(\"categorical interval\", () => {\n        const mockElement = { data: CATEGORICAL_INTERVAL }\n        const q = new Quiver(mockElement)\n        const { content, contentType, field } = q.getCell(1, 1)\n\n        expect(Quiver.format(content, contentType, field)).toEqual(\n          \"(23.535, 256.5]\"\n        )\n      })\n\n      test(\"period\", () => {\n        const mockElement = { data: PERIOD }\n        const q = new Quiver(mockElement)\n        const { rows, columns } = q.dimensions\n        const table: Record<string, string[]> = {}\n        for (let columnIndex = 1; columnIndex < columns; columnIndex++) {\n          const column = []\n          for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n            const { content, contentType, field } = q.getCell(\n              rowIndex,\n              columnIndex\n            )\n            const cellValue = Quiver.format(content, contentType, field)\n            column.push(cellValue)\n          }\n          table[column[0]] = [column[1], column[2]]\n        }\n\n        expect(table).toEqual({\n          A: [\"2012\", \"1970\"],\n          M: [\"2012-02\", \"1970-01\"],\n          Y: [\"2012\", \"1970\"],\n          h: [\"2012-02-14 00:00\", \"1970-01-01 00:00\"],\n          min: [\"2012-02-14 00:00\", \"1970-01-01 00:00\"],\n          ms: [\"2012-02-14 00:00:00.000\", \"1970-01-01 00:00:00.000\"],\n          s: [\"2012-02-14 00:00:00\", \"1970-01-01 00:00:00\"],\n          L: [\"2012-02-14 00:00:00.000\", \"1970-01-01 00:00:00.000\"],\n          S: [\"2012-02-14 00:00:00\", \"1970-01-01 00:00:00\"],\n          T: [\"2012-02-14 00:00\", \"1970-01-01 00:00\"],\n          H: [\"2012-02-14 00:00\", \"1970-01-01 00:00\"],\n          D: [\"2012-02-14\", \"1970-01-01\"],\n          W: [\"2012-02-13/2012-02-19\", \"1969-12-29/1970-01-04\"],\n          \"W-SUN\": [\"2012-02-13/2012-02-19\", \"1969-12-29/1970-01-04\"],\n          \"W-MON\": [\"2012-02-14/2012-02-20\", \"1969-12-30/1970-01-05\"],\n          \"W-TUE\": [\"2012-02-08/2012-02-14\", \"1969-12-31/1970-01-06\"],\n          \"W-WED\": [\"2012-02-09/2012-02-15\", \"1970-01-01/1970-01-07\"],\n          \"W-THU\": [\"2012-02-10/2012-02-16\", \"1969-12-26/1970-01-01\"],\n          \"W-FRI\": [\"2012-02-11/2012-02-17\", \"1969-12-27/1970-01-02\"],\n          \"W-SAT\": [\"2012-02-12/2012-02-18\", \"1969-12-28/1970-01-03\"],\n          Q: [\"2012Q1\", \"1970Q1\"],\n          \"Q-JAN\": [\"2013Q1\", \"1970Q4\"],\n          \"Q-FEB\": [\"2012Q4\", \"1970Q4\"],\n          \"Q-MAR\": [\"2012Q4\", \"1970Q4\"],\n          \"Q-APR\": [\"2012Q4\", \"1970Q3\"],\n          \"Q-MAY\": [\"2012Q3\", \"1970Q3\"],\n          \"Q-JUN\": [\"2012Q3\", \"1970Q3\"],\n          \"Q-JUL\": [\"2012Q3\", \"1970Q2\"],\n          \"Q-AUG\": [\"2012Q2\", \"1970Q2\"],\n          \"Q-SEP\": [\"2012Q2\", \"1970Q2\"],\n          \"Q-OCT\": [\"2012Q2\", \"1970Q1\"],\n          \"Q-NOV\": [\"2012Q1\", \"1970Q1\"],\n          \"Q-DEC\": [\"2012Q1\", \"1970Q1\"],\n        })\n      })\n\n      test(\"invalid interval type\", () => {\n        const mockElement = { data: INTERVAL_INT64 }\n        const INVALID_TYPE = \"interval\"\n        const q = new Quiver(mockElement)\n        const { content } = q.getCell(1, 0)\n\n        expect(() =>\n          Quiver.format(content, {\n            pandas_type: \"object\",\n            numpy_type: INVALID_TYPE,\n          })\n        ).toThrow(\"Invalid interval type: interval\")\n      })\n\n      test(\"list[unicode]\", () => {\n        expect(\n          Quiver.format(vectorFromArray([\"foo\", \"bar\", \"baz\"]), {\n            pandas_type: \"list[unicode]\",\n            numpy_type: \"object\",\n          })\n        ).toEqual('[\"foo\",\"bar\",\"baz\"]')\n      })\n    })\n\n    describe(\"isEmpty\", () => {\n      it(\"returns true if a DataFrame is empty\", () => {\n        const mockElement = { data: EMPTY }\n        const q = new Quiver(mockElement)\n\n        expect(q.isEmpty()).toBe(true)\n      })\n\n      it(\"returns false if a DataFrame is not empty\", () => {\n        const mockElement = { data: UNICODE }\n        const q = new Quiver(mockElement)\n\n        expect(q.isEmpty()).toBe(false)\n      })\n    })\n  })\n\n  describe(\"Display\", () => {\n    describe(\"Pandas index types\", () => {\n      test(\"categorical\", () => {\n        const mockElement = { data: CATEGORICAL }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.CategoricalIndex,\n              numpy_type: \"int8\",\n              meta: {\n                num_categories: 3,\n                ordered: false,\n              },\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"date\", () => {\n        const mockElement = { data: DATE }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([\n          vectorFromArray([978220800000, 1009756800000]),\n        ])\n        expect(q.columns).toEqual([\n          [\"2000-12-31 00:00:00\", \"2001-12-31 00:00:00\"],\n        ])\n\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.DatetimeIndex,\n              numpy_type: \"datetime64[ns]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"date\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"date\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"float64\", () => {\n        const mockElement = { data: FLOAT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([vectorFromArray([1.24, 2.35])])\n        expect(q.columns).toEqual([[\"1.24\", \"2.35\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [1.2, 1.3],\n          [1.4, 1.5],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Float64Index,\n              numpy_type: IndexTypeName.Float64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"float64\",\n              numpy_type: \"float64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"float64\",\n              numpy_type: \"float64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"int64\", () => {\n        const mockElement = { data: INT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([vectorFromArray([BigInt(1), BigInt(2)])])\n        expect(q.columns).toEqual([[\"1\", \"2\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [BigInt(0), BigInt(1)],\n          [BigInt(2), BigInt(3)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Int64Index,\n              numpy_type: IndexTypeName.Int64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval datetime64[ns]\", () => {\n        const mockElement = { data: INTERVAL_DATETIME64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index.toString()).toEqual(\n          '[{\"left\": 1483228800000, \"right\": 1483315200000},{\"left\": 1483315200000, \"right\": 1483401600000}]'\n        )\n        expect(q.columns).toEqual([\n          [\"(2017-01-01, 2017-01-02]\", \"(2017-01-02, 2017-01-03]\"],\n        ])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[datetime64[ns], right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval float64\", () => {\n        const mockElement = { data: INTERVAL_FLOAT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1.5},{\"left\": 1.5, \"right\": 3}]'\n        )\n        expect(q.columns).toEqual([[\"(0.0, 1.5]\", \"(1.5, 3.0]\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[float64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval int64\", () => {\n        const mockElement = { data: INTERVAL_INT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2}]'\n        )\n        expect(q.columns).toEqual([[\"(0, 1]\", \"(1, 2]\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[int64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval uint64\", () => {\n        const mockElement = { data: INTERVAL_UINT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2}]'\n        )\n        expect(q.columns).toEqual([[\"(0, 1]\", \"(1, 2]\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[uint64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"range\", () => {\n        const mockElement = { data: RANGE }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([[0, 1]])\n        expect(q.columns).toEqual([[\"0\", \"1\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.RangeIndex,\n              numpy_type: IndexTypeName.RangeIndex,\n              meta: {\n                start: 0,\n                step: 1,\n                stop: 2,\n                kind: \"range\",\n                name: null,\n              },\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"uint64\", () => {\n        const mockElement = { data: UINT64 }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([vectorFromArray([BigInt(1), BigInt(2)])])\n        expect(q.columns).toEqual([[\"1\", \"2\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [BigInt(1), BigInt(2)],\n          [BigInt(3), BigInt(4)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UInt64Index,\n              numpy_type: IndexTypeName.UInt64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"unicode\", () => {\n        const mockElement = { data: UNICODE }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([vectorFromArray([\"i1\", \"i2\"])])\n        expect(q.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n\n    describe(\"Special cases\", () => {\n      test(\"empty\", () => {\n        const mockElement = { data: EMPTY }\n        const q = new Quiver(mockElement)\n\n        expect(q.dimensions).toStrictEqual({\n          headerRows: 1,\n          headerColumns: 1,\n          dataRows: 0,\n          dataColumns: 0,\n          rows: 1,\n          columns: 1,\n        })\n\n        expect(q.index).toEqual([])\n        expect(q.columns).toEqual([])\n        expect(q.data.toArray()).toEqual([])\n        expect(q.types).toEqual({\n          index: [{ pandas_type: \"empty\", numpy_type: \"object\", meta: null }],\n          data: [],\n        })\n      })\n\n      test(\"multi-index\", () => {\n        const mockElement = { data: MULTI }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([\n          vectorFromArray([BigInt(1), BigInt(2)]),\n          vectorFromArray([\"red\", \"blue\"]),\n        ])\n        expect(q.columns).toEqual([\n          [\"1\", \"2\"],\n          [\"red\", \"blue\"],\n        ])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Int64Index,\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"styler\", () => {\n        const mockElement = {\n          data: STYLER,\n          styler: {\n            uuid: \"FAKE_UUID\",\n            styles: \"FAKE_CSS\",\n            caption: \"FAKE_CAPTION\",\n            displayValues: DISPLAY_VALUES,\n          },\n        }\n        const q = new Quiver(mockElement)\n\n        expect(q.index).toEqual([[0, 1]])\n        expect(q.columns).toEqual([[\"0\", \"1\"]])\n        expect(q.data.toArray().map(a => a?.toArray())).toEqual([\n          [BigInt(1), BigInt(2)],\n          [BigInt(3), BigInt(4)],\n        ])\n        expect(q.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.RangeIndex,\n              numpy_type: IndexTypeName.RangeIndex,\n              meta: {\n                start: 0,\n                step: 1,\n                stop: 2,\n                kind: \"range\",\n                name: null,\n              },\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n        // Check display values.\n        expect(q.getCell(1, 1).displayContent).toEqual(\"1\")\n        expect(q.getCell(1, 2).displayContent).toEqual(\"2\")\n        expect(q.getCell(2, 1).displayContent).toEqual(\"3\")\n        expect(q.getCell(2, 2).displayContent).toEqual(\"4\")\n      })\n    })\n  })\n\n  describe(\"Add rows\", () => {\n    describe(\"Pandas index types\", () => {\n      test(\"categorical\", () => {\n        const mockElement = { data: CATEGORICAL }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n        expect(qq.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.CategoricalIndex,\n              numpy_type: \"int8\",\n              meta: {\n                num_categories: 3,\n                ordered: false,\n              },\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"date\", () => {\n        const mockElement = { data: DATE }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([\n          vectorFromArray([\n            978220800000, 1009756800000, 978220800000, 1009756800000,\n          ]),\n        ])\n        expect(qq.columns).toEqual([\n          [\"2000-12-31 00:00:00\", \"2001-12-31 00:00:00\"],\n        ])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n          [\n            new Date(\"2020-01-02T00:00:00.000Z\").getTime(),\n            new Date(\"2020-10-20T00:00:00.000Z\").getTime(),\n          ],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.DatetimeIndex,\n              numpy_type: \"datetime64[ns]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"date\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"date\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"float64\", () => {\n        const mockElement = { data: FLOAT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([vectorFromArray([1.24, 2.35, 1.24, 2.35])])\n        expect(qq.columns).toEqual([[\"1.24\", \"2.35\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [1.2, 1.3],\n          [1.4, 1.5],\n          [1.2, 1.3],\n          [1.4, 1.5],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Float64Index,\n              numpy_type: IndexTypeName.Float64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"float64\",\n              numpy_type: \"float64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"float64\",\n              numpy_type: \"float64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"int64\", () => {\n        const mockElement = { data: INT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([\n          vectorFromArray([BigInt(1), BigInt(2), BigInt(1), BigInt(2)]),\n        ])\n        expect(qq.columns).toEqual([[\"1\", \"2\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [BigInt(0), BigInt(1)],\n          [BigInt(2), BigInt(3)],\n          [BigInt(0), BigInt(1)],\n          [BigInt(2), BigInt(3)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Int64Index,\n              numpy_type: IndexTypeName.Int64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval datetime64[ns]\", () => {\n        const mockElement = { data: INTERVAL_DATETIME64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index.toString()).toEqual(\n          '[{\"left\": 1483228800000, \"right\": 1483315200000},{\"left\": 1483315200000, \"right\": 1483401600000},{\"left\": 1483228800000, \"right\": 1483315200000},{\"left\": 1483315200000, \"right\": 1483401600000}]'\n        )\n        expect(qq.columns).toEqual([\n          [\"(2017-01-01, 2017-01-02]\", \"(2017-01-02, 2017-01-03]\"],\n        ])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[datetime64[ns], right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval float64\", () => {\n        const mockElement = { data: INTERVAL_FLOAT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1.5},{\"left\": 1.5, \"right\": 3},{\"left\": 0, \"right\": 1.5},{\"left\": 1.5, \"right\": 3}]'\n        )\n        expect(qq.columns).toEqual([[\"(0.0, 1.5]\", \"(1.5, 3.0]\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[float64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval int64\", () => {\n        const mockElement = { data: INTERVAL_INT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2},{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2}]'\n        )\n        expect(qq.columns).toEqual([[\"(0, 1]\", \"(1, 2]\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[int64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"interval uint64\", () => {\n        const mockElement = { data: INTERVAL_UINT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index.toString()).toEqual(\n          '[{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2},{\"left\": 0, \"right\": 1},{\"left\": 1, \"right\": 2}]'\n        )\n        expect(qq.columns).toEqual([[\"(0, 1]\", \"(1, 2]\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n          [\"foo\", BigInt(100)],\n          [\"bar\", BigInt(200)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: \"object\",\n              numpy_type: \"interval[uint64, right]\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"range\", () => {\n        const mockElement = { data: RANGE }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([[0, 1, 2, 3]])\n        expect(qq.columns).toEqual([[\"0\", \"1\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.RangeIndex,\n              numpy_type: IndexTypeName.RangeIndex,\n              meta: {\n                start: 0,\n                step: 1,\n                stop: 4,\n                kind: \"range\",\n                name: null,\n              },\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"uint64\", () => {\n        const mockElement = { data: UINT64 }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([\n          vectorFromArray([BigInt(1), BigInt(2), BigInt(1), BigInt(2)]),\n        ])\n        expect(qq.columns).toEqual([[\"1\", \"2\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [BigInt(1), BigInt(2)],\n          [BigInt(3), BigInt(4)],\n          [BigInt(1), BigInt(2)],\n          [BigInt(3), BigInt(4)],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UInt64Index,\n              numpy_type: IndexTypeName.UInt64Index,\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n            {\n              pandas_type: \"int64\",\n              numpy_type: \"int64\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"unicode\", () => {\n        const mockElement = { data: UNICODE }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n        expect(qq.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n    })\n\n    describe(\"Special cases\", () => {\n      it(\"does not mutate the original element\", () => {\n        const mockElement = { data: UNICODE }\n        const q = new Quiver(mockElement)\n        const qClone = cloneDeep(q)\n\n        q.addRows(q)\n        expect(q).toEqual(qClone)\n      })\n\n      test(\"multi-index\", () => {\n        const mockElement = { data: MULTI }\n        const q = new Quiver(mockElement)\n\n        const qq = q.addRows(q)\n\n        expect(qq.index).toEqual([\n          vectorFromArray([BigInt(1), BigInt(2), BigInt(1), BigInt(2)]),\n          vectorFromArray([\"red\", \"blue\", \"red\", \"blue\"]),\n        ])\n        expect(qq.columns).toEqual([\n          [\"1\", \"2\"],\n          [\"red\", \"blue\"],\n        ])\n        expect(qq.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n        ])\n        expect(qq.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.Int64Index,\n              numpy_type: IndexTypeName.Int64Index,\n              meta: null,\n            },\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      test(\"DataFrames with different column types\", () => {\n        const mockElement1 = { data: UNICODE }\n        const mockElement2 = { data: DIFFERENT_COLUMN_TYPES }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        const q1q2 = q1.addRows(q2)\n\n        expect(q1q2.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n        expect(q1q2.columns).toEqual([[\"c1\", \"c2\"]])\n        expect(q1q2.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\", \"1\"],\n          [\"bar\", \"2\"],\n          [\"baz\", \"1\"],\n          [\"qux\", \"2\"],\n        ])\n        expect(q1q2.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      it(\"shows df2 if df1 is empty\", () => {\n        const mockElement1 = { data: EMPTY }\n        const mockElement2 = { data: UNICODE }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        const q1q2 = q1.addRows(q2)\n        expect(q1q2).toEqual(q2)\n      })\n\n      it(\"shows df1 if df2 is empty\", () => {\n        const mockElement1 = { data: EMPTY }\n        const mockElement2 = { data: UNICODE }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        const q2q1 = q2.addRows(q1)\n        expect(q2q1).toEqual(q2)\n      })\n\n      it(\"shows an empty DataFrame if both df1 and df2 are empty\", () => {\n        const mockElement = { data: EMPTY }\n        const q1 = new Quiver(mockElement)\n        const q2 = new Quiver(mockElement)\n\n        const q1q2 = q1.addRows(q2)\n        expect(q1q2.isEmpty()).toBe(true)\n      })\n\n      it(\"uses df1 columns if df2 has more columns than df1\", () => {\n        const mockElement1 = { data: FEWER_COLUMNS }\n        const mockElement2 = { data: UNICODE }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        const q1q2 = q1.addRows(q2)\n\n        expect(q1q2.index).toEqual([vectorFromArray([\"i1\", \"i2\", \"i1\", \"i2\"])])\n        expect(q1q2.columns).toEqual([[\"c1\"]])\n        expect(q1q2.data.toArray().map(a => a?.toArray())).toEqual([\n          [\"foo\"],\n          [\"bar\"],\n          [\"foo\"],\n          [\"bar\"],\n        ])\n        expect(q1q2.types).toEqual({\n          index: [\n            {\n              pandas_type: IndexTypeName.UnicodeIndex,\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n          data: [\n            {\n              pandas_type: \"unicode\",\n              numpy_type: \"object\",\n              meta: null,\n            },\n          ],\n        })\n      })\n\n      it(\"throws an error if df1 has more columns than df2\", () => {\n        const mockElement1 = { data: UNICODE }\n        const mockElement2 = { data: FEWER_COLUMNS }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        expect(() => q1.addRows(q2)).toThrowErrorMatchingSnapshot()\n      })\n\n      it(\"throws an error if one of the DataFrames has Styler\", () => {\n        const mockElement1 = {\n          data: STYLER,\n          styler: {\n            uuid: \"FAKE_UUID\",\n            styles: \"FAKE_CSS\",\n            caption: \"FAKE_CAPTION\",\n            displayValues: DISPLAY_VALUES,\n          },\n        }\n        const mockElement2 = { data: UNICODE }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        expect(() => q1.addRows(q2)).toThrowErrorMatchingSnapshot()\n        expect(() => q2.addRows(q1)).toThrowErrorMatchingSnapshot()\n      })\n\n      it(\"throws an error if DataFrames have different index types\", () => {\n        const mockElement1 = { data: UNICODE }\n        const mockElement2 = { data: RANGE }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        expect(() => q1.addRows(q2)).toThrowErrorMatchingSnapshot()\n      })\n\n      it(\"throws an error if DataFrames have different data types\", () => {\n        const mockElement1 = { data: UNICODE }\n        const mockElement2 = { data: INT64 }\n        const q1 = new Quiver(mockElement1)\n        const q2 = new Quiver(mockElement2)\n\n        expect(() => q1.addRows(q2)).toThrowErrorMatchingSnapshot()\n      })\n    })\n  })\n})\n"],"mappings":"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"}