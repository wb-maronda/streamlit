{"version":3,"file":"FileUploadClient.test.js","names":["FileUploadClient","mockSessionInfo","MOCK_FILE_ID","MOCK_FILE","File","describe","formsWithPendingRequestsChanged","requestFileURLs","uploadFileUploaderFile","uploader","beforeEach","jest","fn","sessionInfo","endpoints","buildComponentURL","buildMediaURL","buildFileUploadURL","buildAppPageURL","deleteFileAtURL","fetchCachedForwardMsg","it","mockResolvedValue","expect","uploadFile","id","formId","resolves","toBe","not","toHaveBeenCalled","uploadFilePromise","toHaveBeenCalledTimes","toHaveBeenLastCalledWith","Set","toBeDefined","mockRejectedValue","Error","rejects","toEqual","_pendingReqs$get","fileURLsPromise","fetchFileURLs","pendingReqs","pendingFileURLsRequests","size","reqId","keys","next","value","get","promise","_pendingReqs$get2","onFileURLsResponse","responseId","errorMsg","_pendingReqs$get3","fileUrls","toThrow"],"sources":["../src/FileUploadClient.test.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileUploadClient } from \"./FileUploadClient\"\nimport { mockSessionInfo } from \"./mocks/mocks\"\n\nconst MOCK_FILE_ID = -111\nconst MOCK_FILE = new File([\"file1\"], \"file1.txt\")\n\ndescribe(\"FileUploadClient Upload\", () => {\n  let formsWithPendingRequestsChanged: jest.Mock\n  let requestFileURLs: jest.Mock\n  let uploadFileUploaderFile: jest.Mock\n  let uploader: FileUploadClient\n\n  beforeEach(() => {\n    formsWithPendingRequestsChanged = jest.fn()\n    uploadFileUploaderFile = jest.fn()\n    requestFileURLs = jest.fn()\n\n    uploader = new FileUploadClient({\n      sessionInfo: mockSessionInfo(),\n      endpoints: {\n        buildComponentURL: jest.fn(),\n        buildMediaURL: jest.fn(),\n        buildFileUploadURL: jest.fn(),\n        buildAppPageURL: jest.fn(),\n        uploadFileUploaderFile: uploadFileUploaderFile,\n        deleteFileAtURL: jest.fn(),\n        fetchCachedForwardMsg: jest.fn(),\n      },\n      formsWithPendingRequestsChanged,\n      requestFileURLs,\n    })\n  })\n\n  it(\"uploads files outside a form\", async () => {\n    uploadFileUploaderFile.mockResolvedValue(MOCK_FILE_ID)\n\n    await expect(\n      uploader.uploadFile(\n        { id: \"widgetId\", formId: \"\" },\n        \"/_stcore/upload_file/file_1\",\n        MOCK_FILE\n      )\n    ).resolves.toBe(MOCK_FILE_ID)\n\n    expect(formsWithPendingRequestsChanged).not.toHaveBeenCalled()\n  })\n\n  it(\"uploads files inside a form\", async () => {\n    uploadFileUploaderFile.mockResolvedValue(MOCK_FILE_ID)\n\n    // Upload a file with an attached form ID.\n    const uploadFilePromise = uploader.uploadFile(\n      { id: \"widgetId\", formId: \"mockFormId\" },\n      \"/_stcore/upload_file/file_1\",\n      MOCK_FILE\n    )\n\n    // `formsWithPendingRequestsChanged` should be called with our mockFormId\n    // when the upload kicks off.\n    expect(formsWithPendingRequestsChanged).toHaveBeenCalledTimes(1)\n    expect(formsWithPendingRequestsChanged).toHaveBeenLastCalledWith(\n      new Set([\"mockFormId\"])\n    )\n\n    // Wait for the upload to complete\n    await expect(uploadFilePromise).resolves.toBeDefined()\n\n    // `formsWithPendingRequestsChanged` should be called a second time, with\n    // an empty set\n    expect(formsWithPendingRequestsChanged).toHaveBeenCalledTimes(2)\n    expect(formsWithPendingRequestsChanged).toHaveBeenLastCalledWith(new Set())\n  })\n\n  it(\"handles errors outside a form\", async () => {\n    uploadFileUploaderFile.mockRejectedValue(new Error(\"oh no!\"))\n\n    await expect(\n      uploader.uploadFile(\n        { id: \"widgetId\", formId: \"\" },\n        \"/_stcore/upload_file/file_1\",\n        MOCK_FILE\n      )\n    ).rejects.toEqual(new Error(\"oh no!\"))\n\n    expect(formsWithPendingRequestsChanged).not.toHaveBeenCalled()\n  })\n\n  it(\"handles errors inside a form\", async () => {\n    uploadFileUploaderFile.mockRejectedValue(new Error(\"oh no!\"))\n\n    // Upload a file with an attached form ID.\n    const uploadFilePromise = uploader.uploadFile(\n      { id: \"widgetId\", formId: \"mockFormId\" },\n      \"/_stcore/upload_file/file_1\",\n      MOCK_FILE\n    )\n\n    // `formsWithPendingRequestsChanged` should be called with our mockFormId\n    // when the upload kicks off.\n    expect(formsWithPendingRequestsChanged).toHaveBeenCalledTimes(1)\n    expect(formsWithPendingRequestsChanged).toHaveBeenLastCalledWith(\n      new Set([\"mockFormId\"])\n    )\n\n    // Wait for the upload to error\n    await expect(uploadFilePromise).rejects.toBeDefined()\n\n    // `formsWithPendingRequestsChanged` should be called a second time, with\n    // an empty set\n    expect(formsWithPendingRequestsChanged).toHaveBeenCalledTimes(2)\n    expect(formsWithPendingRequestsChanged).toHaveBeenLastCalledWith(new Set())\n  })\n\n  it(\"fetchFileURLs calls requestFileURLs and returns a promise\", () => {\n    const fileURLsPromise = uploader.fetchFileURLs([])\n    expect(requestFileURLs).toHaveBeenCalledTimes(1)\n\n    // @ts-expect-error\n    const pendingReqs = uploader.pendingFileURLsRequests\n    expect(pendingReqs.size).toBe(1)\n\n    const reqId = pendingReqs.keys().next().value\n\n    expect(pendingReqs.get(reqId)?.promise).toBe(fileURLsPromise)\n  })\n\n  it(\"onFileURLsResponse rejects promise on errorMsg\", async () => {\n    uploader.fetchFileURLs([])\n\n    // @ts-expect-error\n    const pendingReqs = uploader.pendingFileURLsRequests\n    const reqId = pendingReqs.keys().next().value\n    const promise = pendingReqs.get(reqId)?.promise\n\n    uploader.onFileURLsResponse({\n      responseId: reqId,\n      errorMsg: \"kaboom\",\n    })\n\n    await expect(promise).rejects.toBe(\"kaboom\")\n  })\n\n  it(\"onFileURLsResponse resolves promise on success\", async () => {\n    uploader.fetchFileURLs([])\n\n    // @ts-expect-error\n    const pendingReqs = uploader.pendingFileURLsRequests\n    const reqId = pendingReqs.keys().next().value\n    const promise = pendingReqs.get(reqId)?.promise\n\n    uploader.onFileURLsResponse({\n      responseId: reqId,\n      fileUrls: [],\n    })\n\n    await expect(promise).resolves.toEqual([])\n  })\n\n  it(\"onFileURLsResponse does not error when given an invalid responseId\", () => {\n    // No need to do anything other than check that no error is thrown.\n    expect(() => {\n      uploader.onFileURLsResponse({\n        responseId: \"noCorrespondingId\",\n        fileUrls: [],\n      })\n    }).not.toThrow()\n  })\n})\n"],"mappings":"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"}