{"version":3,"file":"useBasicWidgetState.js","names":["useCallback","useEffect","useState","useFormClearHelper","isNullOrUndefined","useBasicWidgetClientState","_ref","getStateFromWidgetMgr","getDefaultState","updateWidgetMgrState","element","widgetMgr","fragmentId","currentValue","setCurrentValue","nextValueWSource","setNextValueWSource","value","fromUi","onFormCleared","useBasicWidgetState","_ref2","getDefaultStateFromProto","getCurrStateFromProto","wm","el","setValue"],"sources":["../src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\nexport interface UseValueWSourceArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n}: UseValueWSourceArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWSource, setNextValueWSource] =\n    useState<ValueWSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWSource)) return\n    setNextValueWSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWSource, fragmentId)\n  }, [nextValueWSource, updateWidgetMgrState, element, widgetMgr, fragmentId])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const onFormCleared = useCallback((): void => {\n    setNextValueWSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n  }, [setNextValueWSource, element, getDefaultState, widgetMgr])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared })\n\n  return [currentValue, setNextValueWSource]\n}\n\n// Interface for a proto that has a .value, .setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue<T>\n  extends ValueElementProtoInterface {\n  value?: T\n  setValue: boolean\n}\n\nexport interface UseValueWSourceArgsWithSetValue<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue<T> // Proto for this widget.\n> extends Omit<UseValueWSourceArgs<T, P>, \"getDefaultState\"> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue<T> // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n}: UseValueWSourceArgsWithSetValue<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWSource])\n\n  return [currentValue, setNextValueWSource]\n}\n"],"mappings":"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"}